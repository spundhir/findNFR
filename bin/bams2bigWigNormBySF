#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
bams2bigWigNormBySF: convert bam files to bigWig format normalized to scaling factors
Copyright (C) 2021  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
GENOME="mm9"
PROCESSOR=1
GENOME_SPIKEIN="dm6"

#### usage ####
usage() {
	echo Program: "bams2bigWigNormBySF (convert bam files to bigWig format normalized to scaling factors)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bams2bigWigNormBySF -i <files> -o <dir> [OPTIONS]"
	echo "Options:"
    echo " -i <file>   [input mapped reads in BAM format (separate them by a comma)]"
    echo "             **OR**"
    echo "             [input configuration file containing bam file information]"
    echo "             [<id> <bam file> (eg. signal pol2_esc_Rep1.bam)]"
    echo "             **OR**"
    echo "             [input directory containing bam files]"
    echo " -o <dir>    [ouput directory to store results]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -f <string> [include bam files matching identifiers]"
    echo "             [if multiple seperate them by a comma]"
    echo " -F <string> [exclude bam files matching identifiers]"
    echo "             [if multiple seperate them by a comma]"
    echo " -M          [match any one of the filter criteria (default: all)]"
    echo " -p <int>    [number of processors to use (default: 1)]"
    echo " -I <string> [unique file id for output files (default: randomly generated)]"
    echo " -B          [use blacklisted regions for coverage normalization (-C)]"
    echo "[OPTIONS: NORMALIZATION]"
    echo " -T          [normalize by TMM scale]"
    echo " -A          [normalize by TMM scale and coverage]"
    echo " -P          [normalize by TPM scale]"
    echo " -D          [normalize by TPM scale and coverage]"
    echo " -S          [normalize by spike-in scale (needs -G argument)]"
    echo " -C          [normalize by spike-in scale and coverage (needs -G argument)]"
    echo " -G <string> [spike-in genome (default: dm6)]"
    echo "             [assumes spike-in genome bam files are in the same folder as input bam files]"
    echo " -Q          [plot quality plots using plotFingerprint (NOTE: uses non-normalized read counts from bam files)]"
	echo
	exit 0
}

#### parse options ####
while getopts i:o:g:f:F:Mp:I:BTAPDSCG:Qh ARG; do
	case "$ARG" in
        i) BAMFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        g) GENOME=$OPTARG;;
        f) INCLUDE_FILTER=$OPTARG;;
        F) EXCLUDE_FILTER=$OPTARG;;
        M) MATCH=1;;
        p) PROCESSOR=$OPTARG;;
        I) FILEID=$OPTARG;;
        B) USE_BLACKLISTED=1;;
        T) TMM=1;;
        A) TMM_COV=1;;
        P) TPM=1;;
        D) TPM_COV=1;;
        S) SPIKEIN=1;;
        C) SPIKEIN_COV=1;;
        G) GENOME_SPIKEIN=$OPTARG;;
        Q) QUALITY=1;;
		h) HELP=1;;
	esac
done

>&2 echo
if [ "$HELP" ]; then
    usage
fi

>&2 echo
>&2 echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$BAMFILE" -o -z "$OUTDIR" ]; then
    >&2 echo
    >&2 echo "Error: one or more required paramter values not provided"
    >&2 echo
	>&2 usage
fi
>&2 echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -g $GENOME)
GENOME_MACS2=$(initialize_genome -g $GENOME -m)
GENOME_SIZE=$(initialize_genome -g $GENOME -s)
if [ ! -f "$GENOME_FILE" ]; then
    >&2 echo
    >&2 echo "Presently the program only support analysis for mm9, mm10, hg19, hg38, rn5 and dm6"
    >&2 echo
    >&2 usage
fi
>&2 echo "done"

#############################
## check if input is BAM files, configuration file or directory containing BAM file information
#############################
TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
#TMP="VAmpr2lzRjsXS3gZG4fs1i9L4qryUvWH"
if [ -z "${FILEID}" ]; then
    FILEID=${TMP}
fi

FILTER_FILES=0
if [ -d "$BAMFILE" ]; then
    FILTER_FILES=1
elif [ "$(samtools view -H $(echo $BAMFILE | perl -ane '$_=~s/\,.*//g; print $_;') | wc -l)" -le 0 ]; then
    FILTER_FILES=1
fi

mkdir -p ${OUTDIR}

#############################
## filter BAM files for analysis
#############################
>&2 echo -n "filter BAM files for analysis (`date`).. "
if [ "$FILTER_FILES" -eq 1 ]; then
    ARG=""
    if [ "$MATCH" ]; then
        ARG=" -M"
    fi

    ## filter bam files based on input filters (include and/or exclude)
    if [ ! -z "$INCLUDE_FILTER" -a ! -z "$EXCLUDE_FILTER" ]; then
        filterFilesByName -i $BAMFILE -f $INCLUDE_FILTER -F $EXCLUDE_FILTER -e bam $ARG | tr '\,' '\n'
    elif [ ! -z "$INCLUDE_FILTER" ]; then
        filterFilesByName -i $BAMFILE -f $INCLUDE_FILTER -e bam $ARG | tr '\,' '\n'
    elif [ ! -z "$EXCLUDE_FILTER" ]; then
        filterFilesByName -i $BAMFILE -F $EXCLUDE_FILTER -e bam $ARG | tr '\,' '\n'
    else
        cat $BAMFILE
    fi | grep -v "^$" | perl -ane 'chomp($_); if(scalar(@F)==1) { print "tpm\t$_\n"; } else { print "$_\n"; }' > ${FILEID}.bamConfig
    BAMFILE=${FILEID}.bamConfig

    if [ "$(cat $BAMFILE | perl -ane 'print scalar(@F)."\n";' | sort | uniq | wc -l)" -gt 1 -o "$(cat $BAMFILE | wc -l)" -eq 0 ]; then
        echo
        echo "ERROR: input bam configuration file is not in correct format"
        echo "possible reason: spikeIn control not provided for each sample, or"
        echo "possible reason: none of the files fulfill the input filter criteria"
        echo
        usage
    fi

    ## read configuration file
    INPUT=$(cat $BAMFILE | perl -ane '
        $file.="$F[1] ";
        END {
            $file=~s/\s+$//g;
            print "$file\n";
        }'
    )
    BAMFILE=$INPUT
fi
#echo -e "$BAMFILE"; exit
>&2 echo "done"

#############################
## create bigWig files for input bam files without normalization
#############################
>&2 echo -n "create bigWig files for input bam files without normalization (`date`).. "

## parse input bam files in an array
BAMFILES=($BAMFILE)
BAMFILES_COUNT=${#BAMFILES[@]}

BWFILE=""
ID=""
for(( i=0; i<${#BAMFILES[@]}; i++ )); do
    if [ ! -s "${OUTDIR}/$(echo ${BAMFILES[i]} | parallel -j 1 'echo {/.}').bw" ]; then
        bam2bwForChIP -i ${BAMFILES[i]} -o ${OUTDIR} -g ${GENOME} -e -p ${PROCESSOR}
    fi

    ID="${ID} $(echo ${BAMFILES[i]} | parallel -j 1 'echo {/.}' | sed -E 's/[\-]/./g')"
    BWFILE="${BWFILE} ${OUTDIR}/$(echo ${BAMFILES[i]} | parallel -j 1 'echo {/.}').bw"
done
BWFILE=$(echo ${BWFILE} | perl -ane '$_=~s/^\s+//; print $_;')
#echo "${BWFILE}"

>&2 echo "done"

#############################
## compute signal at 10kb bins using multiBigwigSummary
#############################
>&2 echo -n "compute signal at 10kb bins using multiBigwigSummary (`date`).. "
if [ ! -s "$OUTDIR/${FILEID}_multiBigwigSummary.binSignal" -a "$(initialize_genome -g $GENOME -B)" ]; then
    multiBigwigSummary bins -b ${BWFILE} --labels ${ID} -o ${OUTDIR}/${FILEID}_multiBigwigSummary.binSignal.npz --outRawCounts ${OUTDIR}/${FILEID}_multiBigwigSummary.binSignal --blackListFileName $(initialize_genome -g $GENOME -B) -p ${PROCESSOR}
elif [ ! -s "$OUTDIR/${FILEID}_multiBigwigSummary.binSignal" ]; then
    multiBigwigSummary bins -b ${BWFILE} --labels ${ID} -o ${OUTDIR}/${FILEID}_multiBigwigSummary.binSignal.npz --outRawCounts ${OUTDIR}/${FILEID}_multiBigwigSummary.binSignal -p ${PROCESSOR}
fi
>&2 echo "done"

#############################
## compute signal at peak regions using multiBigwigSummary
#############################
>&2 echo -n "compute signal at peak regions using multiBigwigSummary (`date`).. "
if [ ! -s "${OUTDIR}/macs2/${FILEID}_peaks.bed" ]; then
    mkdir -p ${OUTDIR}/macs2
    macs2 callpeak -t ${BAMFILE} -g ${GENOME_MACS2} --outdir ${OUTDIR}/macs2 -n ${FILEID} 2>/dev/null;
    zless ${OUTDIR}/macs2/${FILEID}_peaks.narrowPeak | cut -f 1-6 > ${OUTDIR}/macs2/${FILEID}_peaks.bed
fi

if [ ! -s "$OUTDIR/${FILEID}_multiBigwigSummary.peakSignal" -a "$(initialize_genome -g $GENOME -B)" ]; then
    multiBamSummary BED-file -b ${BAMFILE} --labels ${ID} -o ${OUTDIR}/${FILEID}_multiBigwigSummary.peakSignal.npz --outRawCounts ${OUTDIR}/${FILEID}_multiBigwigSummary.peakSignal --blackListFileName $(initialize_genome -g $GENOME -B) -p ${PROCESSOR} --BED ${OUTDIR}/macs2/${FILEID}_peaks.bed
elif [ ! -s "$OUTDIR/${FILEID}_multiBigwigSummary.peakSignal" ]; then
    multiBamSummary BED-file -b ${BAMFILE} --labels ${ID} -o ${OUTDIR}/${FILEID}_multiBigwigSummary.peakSignal.npz --outRawCounts ${OUTDIR}/${FILEID}_multiBigwigSummary.peakSignal -p ${PROCESSOR} --BED ${OUTDIR}/macs2/${FILEID}_peaks.bed
fi
>&2 echo "done"

#############################
## compute TMM scale factor
#############################
>&2 echo -n "compute TMM scale factor (`date`).. "
if [ ! -s "${OUTDIR}/${FILEID}_multiBigwigSummary.binSignal.tmm" ]; then
    multiBigwigSummary2TMM.R -i $OUTDIR/${FILEID}_multiBigwigSummary.binSignal -l TMM > ${OUTDIR}/${FILEID}_multiBigwigSummary.binSignal.tmm
fi
>&2 echo "done"

#############################
## compute read counts in peak regions
#############################
>&2 echo -n "compute total reads in peak regions (`date`).. "
if [ ! -s "${OUTDIR}/${FILEID}_multiBigwigSummary.peakSignal.frip" ]; then
    zless ${OUTDIR}/${FILEID}_multiBigwigSummary.peakSignal | cut -f 4- | perl -ane 'if($_=~/[a-zA-Z]+/) { for($i=0; $i<scalar(@F); $i++) { $id{$i}=$F[$i]; } } else { for($i=0; $i<scalar(@F); $i++) { $count{$i}+=$F[$i]; } } END { for($i=0; $i<scalar(@F); $i++) { print "$id{$i}\t$count{$i}\n"; } }' | perl -pe "s/\'//g" > ${OUTDIR}/${FILEID}_multiBigwigSummary.peakSignal.frip
fi
>&2 echo "done"

#############################
## normalize each bigWig file (TMM scale factor) : ARG -T
#############################
if [ ! -z "$TMM" ]; then
    >&2 echo -n "normalize each bigWig file by TMM scale factors (`date`).. "
    BWFILES=($BWFILE)
    IDS=($ID)

    for(( i=0; i<${#BWFILES[@]}; i++ )); do
        if [ ! -s "${OUTDIR}/${IDS[i]}_normByTMM.bw" ]; then
            TMM="$(grep ${IDS[i]} ${OUTDIR}/${FILEID}_multiBigwigSummary.binSignal.tmm | perl -ane 'print "$F[1]";')"

            bigWigToWig ${BWFILES[i]} stdout | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", $F[3]/'${TMM}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | grep -v ${GENOME_SPIKEIN} | wigToBigWig stdin ${GENOME_FILE} ${OUTDIR}/${IDS[i]}_normByTMM.bw -clip
        fi
    done
    >&2 echo "done"
fi

#############################
## normalize each bigWig file (TMM scale factor as well as coverage) : ARG -A
#############################
if [ ! -z "$TMM_COV" ]; then
    >&2 echo -n "normalize each bigWig file by TMM scale factor as well as coverage (`date`).. "
    BWFILES=($BWFILE)
    IDS=($ID)

    for(( i=0; i<${#BWFILES[@]}; i++ )); do
        if [ ! -s "${OUTDIR}/${IDS[i]}_normByTMM_COV.bw" ]; then
            TMM="$(grep ${IDS[i]} ${OUTDIR}/${FILEID}_multiBigwigSummary.binSignal.tmm | perl -ane 'print "$F[1]";')"

            if [ "$(initialize_genome -g $GENOME -B)" -a ! -z "$USE_BLACKLISTED" ]; then
                COV=$(intersectBed -a <(bigWigToWig ${BWFILES[i]} stdout) -b $(initialize_genome -g $GENOME -B) | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", $F[3]/'${TMM}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | grep -v ${GENOME_SPIKEIN} | perl -ane 'if($_=~/^\#/) { next; } else { $sum+=$F[3]; $len+=$F[2]-$F[1]; } END { printf("%0.4f", $sum/'${GENOME_SIZE}'); }')
            else
                COV=$(intersectBed -a <(bigWigToWig ${BWFILES[i]} stdout) -b ${OUTDIR}/macs2/${FILEID}_peaks.bed -v | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", $F[3]/'${TMM}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | grep -v ${GENOME_SPIKEIN} | perl -ane 'if($_=~/^\#/) { next; } else { $sum+=$F[3]; $len+=$F[2]-$F[1]; } END { printf("%0.4f", $sum/'${GENOME_SIZE}'); }')
            fi
            #echo -e "${BWFILES[i]}\t${OUTDIR}/macs2/${FILEID}_peaks.bed\t${TMM}\t${GENOME_SIZE}\t${COV}";

            bigWigToWig ${BWFILES[i]} stdout | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", $F[3]/'${TMM}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | grep -v ${GENOME_SPIKEIN} | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", ($F[3])/'${COV}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | wigToBigWig stdin ${GENOME_FILE} ${OUTDIR}/${IDS[i]}_normByTMM_COV.bw -clip
        fi
    done
    >&2 echo "done"
fi

#############################
## normalize each bigWig file (TPM scale factor) : ARG -P
#############################
if [ ! -z "$TPM" ]; then
    >&2 echo -n "normalize each bigWig file by TPM scale factor (`date`).. "
    BWFILES=($BWFILE)
    IDS=($ID)

    for(( i=0; i<${#BWFILES[@]}; i++ )); do
        if [ ! -s "${OUTDIR}/${IDS[i]}_normByTPM.bw" ]; then
            TPM="$(grep ${IDS[i]} ${OUTDIR}/${FILEID}_multiBigwigSummary.peakSignal.frip | perl -ane 'print "$F[1]";')"

            bigWigToWig ${BWFILES[i]} stdout | grep -v ${GENOME_SPIKEIN} | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", ($F[3]*1000000)/'${TPM}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | wigToBigWig stdin ${GENOME_FILE} ${OUTDIR}/${IDS[i]}_normByTPM.bw -clip
        fi
    done
    >&2 echo "done"
fi

#############################
## normalize each bigWig file (TPM scale factor as well as coverage) : ARG -D
#############################
if [ ! -z "$TPM_COV" ]; then
    >&2 echo -n "normalize each bigWig file by TPM scale factor as well as coverage (`date`).. "
    BWFILES=($BWFILE)
    IDS=($ID)

    for(( i=0; i<${#BWFILES[@]}; i++ )); do
        if [ ! -s "${OUTDIR}/${IDS[i]}_normByTMM_COV.bw" ]; then
            TPM="$(grep ${IDS[i]} ${OUTDIR}/${FILEID}_multiBigwigSummary.peakSignal.frip | perl -ane 'print "$F[1]";')"

            if [ "$(initialize_genome -g $GENOME -B)" -a ! -z "$USE_BLACKLISTED" ]; then
                COV=$(intersectBed -a <(bigWigToWig ${BWFILES[i]} stdout) -b $(initialize_genome -g $GENOME -B) | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", ($F[3]*1000000)/'${TPM}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | grep -v ${GENOME_SPIKEIN} | perl -ane 'if($_=~/^\#/) { next; } else { $sum+=$F[3]; $len+=$F[2]-$F[1]; } END { printf("%0.4f", $sum/'${GENOME_SIZE}'); }')
            else
                COV=$(intersectBed -a <(bigWigToWig ${BWFILES[i]} stdout) -b ${OUTDIR}/macs2/${FILEID}_peaks.bed -v | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", ($F[3]*1000000)/'${TPM}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | grep -v ${GENOME_SPIKEIN} | perl -ane 'if($_=~/^\#/) { next; } else { $sum+=$F[3]; $len+=$F[2]-$F[1]; } END { printf("%0.4f", $sum/'${GENOME_SIZE}'); }')
            fi
            #echo -e "${BWFILES[i]}\t${OUTDIR}/macs2/${FILEID}_peaks.bed\t${TPM}\t${GENOME_SIZE}\t${COV}";

            bigWigToWig ${BWFILES[i]} stdout | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", ($F[3]*1000000)/'${TPM}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | grep -v ${GENOME_SPIKEIN} | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", ($F[3])/'${COV}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | wigToBigWig stdin ${GENOME_FILE} ${OUTDIR}/${IDS[i]}_normByTPM_COV.bw -clip
        fi
    done
    >&2 echo "done"
fi

#############################
## normalize each bigWig file (spike-in scale factor) : ARG -S
#############################
if [ ! -z "$SPIKEIN" -a ! -z "$GENOME_SPIKEIN" ]; then
    >&2 echo -n "normalize each bigWig file by spike-in factors (`date`).. "
    BWFILES=($BWFILE)
    IDS=($ID)

    BAMFILE_SPIKEIN=$(echo $BAMFILE | sed -E 's/_hg19|_hg38|_mm9|_mm10/_'${GENOME_SPIKEIN}'/g')
    BAMFILES_SPIKEIN=($BAMFILE_SPIKEIN)

    for(( i=0; i<${#BWFILES[@]}; i++ )); do
        if [ ! -s "${OUTDIR}/${IDS[i]}_normBySIF.bw" ]; then
            SIF=$(bam2spikeInScale -i ${BAMFILES_SPIKEIN[i]} 2>/dev/null)

            bigWigToWig ${BWFILES[i]} stdout | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", $F[3]*'${SIF}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | grep -v ${GENOME_SPIKEIN} | wigToBigWig stdin ${GENOME_FILE} ${OUTDIR}/${IDS[i]}_normBySIF.bw -clip
        fi
    done
    >&2 echo "done"
fi

#############################
## normalize each bigWig file (spike-in scale factor as well as coverage) : ARG -C
#############################
if [ ! -z "$SPIKEIN_COV" -a ! -z "$GENOME_SPIKEIN" ]; then
    >&2 echo -n "normalize each bigWig file by spike-in scale factor as well as coverage (`date`).. "
    BWFILES=($BWFILE)
    IDS=($ID)

    BAMFILE_SPIKEIN=$(echo $BAMFILE | sed -E 's/_hg19|_hg38|_mm9|_mm10/_'${GENOME_SPIKEIN}'/g')
    BAMFILES_SPIKEIN=($BAMFILE_SPIKEIN)

    for(( i=0; i<${#BWFILES[@]}; i++ )); do
        if [ ! -s "${OUTDIR}/${IDS[i]}_normBySIF_COV.bw" ]; then
            SIF=$(bam2spikeInScale -i ${BAMFILES_SPIKEIN[i]} 2>/dev/null)

            if [ "$(initialize_genome -g $GENOME -B)" -a ! -z "$USE_BLACKLISTED" ]; then
                COV=$(intersectBed -a <(bigWigToWig ${BWFILES[i]} stdout) -b $(initialize_genome -g $GENOME -B) | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", $F[3]*'${SIF}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | grep -v ${GENOME_SPIKEIN} | perl -ane 'if($_=~/^\#/) { next; } else { $sum+=$F[3]; $len+=$F[2]-$F[1]; } END { printf("%0.4f", $sum/'${GENOME_SIZE}'); }')
            else
                COV=$(intersectBed -a <(bigWigToWig ${BWFILES[i]} stdout) -b ${OUTDIR}/macs2/${FILEID}_peaks.bed -v | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", $F[3]*'${SIF}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | grep -v ${GENOME_SPIKEIN} | perl -ane 'if($_=~/^\#/) { next; } else { $sum+=$F[3]; $len+=$F[2]-$F[1]; } END { printf("%0.4f", $sum/'${GENOME_SIZE}'); }')
            fi
            #echo -e "${BWFILES[i]}\t${OUTDIR}/macs2/${FILEID}_peaks.bed\t${SIF}\t${GENOME_SIZE}\t${COV}";

            bigWigToWig ${BWFILES[i]} stdout | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", $F[3]*'${SIF}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | grep -v ${GENOME_SPIKEIN} | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", ($F[3])/'${COV}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | wigToBigWig stdin ${GENOME_FILE} ${OUTDIR}/${IDS[i]}_normBySIF_COV.bw -clip
        fi
    done
    >&2 echo "done"
fi

#############################
## normalize each bigWig file (spike-in scale factor as well as TMM scale factor) : ARG -B (does not seem useful)
#############################
#if [ ! -z "$SPIKEIN_TMM" -a ! -z "$GENOME_SPIKEIN" ]; then
#    >&2 echo -n "normalize each bigWig file by spike-in scale factor as well as TMM scale factor (`date`).. "
#    BWFILES=($BWFILE)
#    IDS=($ID)
#
#    BAMFILE_SPIKEIN=$(echo $BAMFILE | sed -E 's/_hg19|_hg38|_mm9|_mm10/_'${GENOME_SPIKEIN}'/g')
#    BAMFILES_SPIKEIN=($BAMFILE_SPIKEIN)
#
#    if [ ! -s "${OUTDIR}/${IDS[i]}_normBySIF_TMM.bw" ]; then
#        for(( i=0; i<${#BWFILES[@]}; i++ )); do
#            TMM="$(grep ${IDS[i]} ${OUTDIR}/${FILEID}_multiBigwigSummary.binSignal.tmm | perl -ane 'print "$F[1]";')"
#            SIF=$(bam2spikeInScale -i ${BAMFILES_SPIKEIN[i]} 2>/dev/null)
#
#            bigWigToWig ${BWFILES[i]} stdout | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", $F[3]*'${SIF}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | perl -ane 'if($_=~/^\#/) { print $_; } else { $F[3]=sprintf("%0.4f", $F[3]/'${TMM}'); print "$F[0]\t$F[1]\t$F[2]\t$F[3]\n"; }' | grep -v ${GENOME_SPIKEIN} | wigToBigWig stdin ${GENOME_FILE} ${OUTDIR}/${IDS[i]}_normBySIF_TMM.bw -clip
#        done
#    fi
#    >&2 echo "done"
#fi

#############################
## plot quality plots for input samples
#############################
if [ "${QUALITY}" ]; then
    >&2 echo -n "plot quality plots for input samples (`date`).. "
    mkdir -p ${OUTDIR}/quality
    #BAMFILE_SPIKEIN=$(echo $BAMFILE | sed -E 's/_hg19|_hg38|_mm9|_mm10/_'${GENOME_SPIKEIN}'/g')
    #BAMFILES_SPIKEIN=($BAMFILE_SPIKEIN)

    #SIFS=""
    #for(( i=0; i<${#BAMFILES_SPIKEIN[@]}; i++ )); do
    #    SIFS="$SIFS,$(bam2spikeInScale -i ${BAMFILES_SPIKEIN[i]} 2>/dev/null)"
    #done
    #SIFS=$(echo $SIFS | perl -ane '$_=~s/^\,//g; print $_;')

    #plotCorrelation -in ${OUTDIR}/${FILEID}_multiBigwigSummary.binSignal.npz --corMethod pearson --skipZeros --whatToPlot heatmap --removeOutliers -o ${OUTDIR}/quality/${FILEID}_multiBigwigSummary.binSignal.png

    #zless ${OUTDIR}/${FILEID}_multiBigwigSummary.peakSignal | cut -f 4- | perl -ane '@SIFS=split(/\,/,"'$SIFS'"); if($_=~/[a-zA-Z]+/) { chomp($_); print "peak\t$_\n"; } else { $i++; print "peak_$i"; for($j=0; $j<scalar(@F); $j++) { printf("\t%0.0f", $F[$j]*$SIFS[$j]); } } print "\n";' | deseq2.R -i stdin -o ${OUTDIR}/quality -t ${QUALITY} -N ${FILEID}_multiBigwigSummary.peakSignal
   
    if [ "$(initialize_genome -g $GENOME -B)" ]; then
        plotFingerprint -b ${BAMFILE} --labels ${ID} --minMappingQuality 20 --ignoreDuplicates --skipZeros --blackListFileName $(initialize_genome -g $GENOME -B) -p ${PROCESSOR} -o ${OUTDIR}/quality/${FILEID}_quality.png 
    else
        plotFingerprint -b ${BAMFILE} --labels ${ID} --minMappingQuality 20 --ignoreDuplicates --skipZeros -p ${PROCESSOR} -o ${OUTDIR}/quality/${FILEID}_quality.png 
    fi
    >&2 echo "done"
fi

#############################
## remove temporary files
#############################
rm ${FILEID}.bamConfig

>&2 echo
>&2 echo "All done.. bye"
