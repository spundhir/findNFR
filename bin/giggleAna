#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm10";
DATABASE="unibind"

#### usage ####
usage() {
	echo Program: "giggleAna (annotate genomic regions for overlap with giggle database)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: giggleAna -i <file> -o <dir> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input file having genomic regions in BED format (or stdin)]"
    echo "[OPTIONS]"
    echo " -g <string> [genome for which to perform the analysis (mm10, hg38, danRer7; default: mm10)]"
    echo " -d <string> [database to query (atac, jaspar, gtrd, unibind, homer, repeat; default: unibind)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:g:d:h ARG; do
	case "$ARG" in
		i) BEDFILE=$OPTARG;;
        g) GENOME=$OPTARG;;
        d) DATABASE=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$BEDFILE" -o "$HELP" ]; then
	usage
fi

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

<<"COMMENT1"
COMMENT1
>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
if [ "$GENOME" == "mm10" ]; then
    ATAC_DIR="/home/xfd783/data/09_ALL_PUBLIC/database/02_accessibilityCatalog/chipAtlas/mm10/giggle/"
    GTRD_DIR="/home/xfd783/data/09_ALL_PUBLIC/database/03_bindingCatalog/gtrd/v21.12/mm10/giggle/"
    UNIBIND_DIR="/home/xfd783/data/09_ALL_PUBLIC/database/03_bindingCatalog/unibind/v2022/mm10/giggle/"
    JASPAR_DIR="/home/xfd783/data/09_ALL_PUBLIC/database/04_motifCatalog/jaspar/mm10/giggle/"
    HOMER_DIR="/home/xfd783/data/09_ALL_PUBLIC/database/04_motifCatalog/homer/mm10/giggle"
    REPEAT_DIR="/home/xfd783/data/09_ALL_PUBLIC/database/07_repeatCatalog/mm10/family/giggle"
elif [ "$GENOME" == "hg38" ]; then
    ATAC_DIR="/home/xfd783/data/09_ALL_PUBLIC/database/02_accessibilityCatalog/chipAtlas/hg38/giggle/"
    GTRD_DIR="/home/xfd783/data/09_ALL_PUBLIC/database/03_bindingCatalog/gtrd/v21.12/hg38/giggle/"
    UNIBIND_DIR="/home/xfd783/data/09_ALL_PUBLIC/database/03_bindingCatalog/unibind/v2022/hg38/giggle/"
    JASPAR_DIR="/home/xfd783/data/09_ALL_PUBLIC/database/04_motifCatalog/jaspar/hg38/giggle/"
    HOMER_DIR="/home/xfd783/data/09_ALL_PUBLIC/database/04_motifCatalog/homer/hg38/giggle"
    REPEAT_DIR="/home/xfd783/data/09_ALL_PUBLIC/database/07_repeatCatalog/hg38/family/giggle"
elif [ "$GENOME" == "danRer7" ]; then
    ATAC_DIR=""
    JASPAR_DIR=""
    GTRD_DIR=""
    UNIBIND_DIR=""
    HOMER_DIR=""
    REPEAT_DIR=""
else
    echo "Presently the program only support analysis for mm10 or hg38"
    echo
    usage
fi
>&2 echo done

## determine, if the input regions are from a file or stdin
>&2 echo -n "Create region file depending on if the input is from file or STDIN... "
TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
if [ -f "$BEDFILE" ]; then
    zless $BEDFILE > ${TMP}.bed
elif [ "$BEDFILE" == "stdin" ]; then
    while read LINE; do echo "${LINE}"; done > ${TMP}.bed
else
    usage
fi

ROW_COUNT=$(zless ${TMP}.bed | wc -l)
ID_COUNT=$(zless ${TMP}.bed | cut -f 4 | sort | uniq | wc -l)

KEEP_ID=0
if [ "$ROW_COUNT" -eq "$ID_COUNT" ]; then
    KEEP_ID=1
fi

## ensure that peak ids are unique
#echo -e "$ROW_COUNT\t$ID_COUNT\t$KEEP_ID\n"; exit
zless ${TMP}.bed | perl -ane 'BEGIN { $counter=1; } if($F[5]!~/^\+$/ && $F[5]!~/^\-$/) { $F[5]="."; } if('$KEEP_ID') { print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t1\t$F[5]"; } else { print "$F[0]\t$F[1]\t$F[2]\tREGION$counter\t1\t$F[5]"; } print "\n"; $counter++;' | bgzip > ${TMP}.bed.gz
>&2 echo "done"

## perform giggle enrichment analysis
TARGET_TOTAL=$(zcat ${TMP}.bed.gz | wc -l)
if [ -d "$ATAC_DIR" -a "$DATABASE" == "atac" ]; then
    giggle search -i $ATAC_DIR -q ${TMP}.bed.gz -s -f 05 | perl -ane 'chomp($_); if($_=~/odds_ratio/) { print "$_\ttotal_regions\n"; } else { print "$_\t'${TARGET_TOTAL}'\n"; }'
elif [ -d "$JASPAR_DIR" -a "$DATABASE" == "jaspar" ]; then
    giggle search -i $JASPAR_DIR -q ${TMP}.bed.gz -s | perl -ane 'chomp($_); if($_=~/odds_ratio/) { print "$_\ttotal_regions\n"; } else { print "$_\t'${TARGET_TOTAL}'\n"; }'
elif [ -d "$GTRD_DIR" -a "$DATABASE" == "gtrd" ]; then
    giggle search -i $GTRD_DIR -q ${TMP}.bed.gz -s | perl -ane 'chomp($_); if($_=~/odds_ratio/) { print "$_\ttotal_regions\n"; } else { print "$_\t'${TARGET_TOTAL}'\n"; }'
elif [ -d "$UNIBIND_DIR" -a "$DATABASE" == "unibind" ]; then
    giggle search -i $UNIBIND_DIR -q ${TMP}.bed.gz -s | perl -ane 'chomp($_); if($_=~/odds_ratio/) { print "$_\ttotal_regions\n"; } else { print "$_\t'${TARGET_TOTAL}'\n"; }'
elif [ -d "$HOMER_DIR" -a "$DATABASE" == "homer" ]; then
    giggle search -i $HOMER_DIR -q ${TMP}.bed.gz -s | perl -ane 'chomp($_); if($_=~/odds_ratio/) { print "$_\ttotal_regions\n"; } else { print "$_\t'${TARGET_TOTAL}'\n"; }'
elif [ -d "$REPEAT_DIR" -a "$DATABASE" == "repeat" ]; then
    giggle search -i $REPEAT_DIR -q ${TMP}.bed.gz -s | perl -ane 'chomp($_); if($_=~/odds_ratio/) { print "$_\ttotal_regions\n"; } else { print "$_\t'${TARGET_TOTAL}'\n"; }'
else
    echo
    usage
fi

## remove temporary files
rm ${TMP}.bed
rm ${TMP}.bed.gz

#wait
#wait_for_jobs_to_finish "Wait for jobs to finish... "
#echo "done"
