#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm10";
DATABASE="unibind"

#### usage ####
usage() {
	echo Program: "giggleAna (annotate genomic regions for overlap with giggle database)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: giggleAna -i <file> -o <dir> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input file having genomic regions in BED format (or stdin)]"
    echo " -o <dir>    [output directory to store results]"
    echo "[OPTIONS]"
    echo " -g <string> [genome for which to perform the analysis (mm10, hg38, danRer7; default: mm10)]"
    echo " -d <string> [database to query (atac, jaspar, gtrd, unibind; default: unibind)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:o:g:d:h ARG; do
	case "$ARG" in
		i) BEDFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        g) GENOME=$OPTARG;;
        d) DATABASE=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$BEDFILE" -o -z "$OUTDIR" -o "$HELP" ]; then
	usage
fi

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

<<"COMMENT1"
COMMENT1
echo -n "Create directory structure... "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi
echo "done"

echo -n "Populating files based on input genome, $GENOME (`date`).. "
if [ "$GENOME" == "mm10" ]; then
    ATAC_DIR="/localhome/bric/xfd783/bric_share/bp_nextgen/09_ALL_PUBLIC/database/chipAtlas/atac/mm10/giggle/tissue/"
    JASPAR_DIR="/localhome/bric/xfd783/bric_share/bp_nextgen/09_ALL_PUBLIC/database/jaspar/mm10/giggle/"
    GTRD_DIR="/scratch/genomes/annotations/GTRD/v21.12/mm10/giggle/"
    UNIBIND_DIR="/scratch/genomes/annotations/UNIBIND/v2022/mm10/giggle/"
elif [ "$GENOME" == "hg38" ]; then
    ATAC_DIR="/localhome/bric/xfd783/bric_share/bp_nextgen/09_ALL_PUBLIC/database/chipAtlas/atac/hg38/giggle/tissue/"
    JASPAR_DIR="/localhome/bric/xfd783/bric_share/bp_nextgen/09_ALL_PUBLIC/database/jaspar/hg38/giggle/"
    GTRD_DIR="/scratch/genomes/annotations/GTRD/v21.12/hg38/giggle/"
    UNIBIND_DIR="/scratch/genomes/annotations/UNIBIND/v2022/hg38/giggle/"
elif [ "$GENOME" == "danRer7" ]; then
    ATAC_DIR=""
    JASPAR_DIR=""
    GTRD_DIR=""
    UNIBIND_DIR=""
else
    echo "Presently the program only support analysis for mm10 or hg38"
    echo
    usage
fi
echo done

## determine, if the input regions are from a file or stdin
echo -n "Create region file depending on if the input is from file or STDIN... "
if [ -f "$BEDFILE" ]; then
    zless $BEDFILE > $OUTDIR/REGIONS_INTEREST.bed.tmp 
elif [ "$BEDFILE" == "stdin" ]; then
    while read LINE; do echo "${LINE}"; done > $OUTDIR/REGIONS_INTEREST.bed.tmp
else
    usage
fi

ROW_COUNT=$(zless $OUTDIR/REGIONS_INTEREST.bed.tmp | wc -l)
ID_COUNT=$(zless $OUTDIR/REGIONS_INTEREST.bed.tmp | cut -f 4 | sort | uniq | wc -l)

KEEP_ID=0
if [ "$ROW_COUNT" -eq "$ID_COUNT" ]; then
    KEEP_ID=1
fi

#echo -e "$ROW_COUNT\t$ID_COUNT\t$KEEP_ID\n"; exit
zless $OUTDIR/REGIONS_INTEREST.bed.tmp | perl -ane 'BEGIN { $counter=1; } if($F[5]!~/^\+$/ && $F[5]!~/^\-$/) { $F[5]="."; } if('$KEEP_ID') { print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t1\t$F[5]"; } else { print "$F[0]\t$F[1]\t$F[2]\tREGION$counter\t1\t$F[5]"; } print "\n"; $counter++;' > $OUTDIR/REGIONS_INTEREST.bed
rm $OUTDIR/REGIONS_INTEREST.bed.tmp
echo "done"

## perform giggle enrichment analysis
TARGET_TOTAL=$(cat $OUTDIR/REGIONS_INTEREST.bed | wc -l)
cat $OUTDIR/REGIONS_INTEREST.bed | bgzip > $OUTDIR/REGIONS_INTEREST.bed.gz
if [ -d "$ATAC_DIR" -a "$DATABASE" == "atac" ]; then
    giggle search -i $ATAC_DIR -q $OUTDIR/REGIONS_INTEREST.bed.gz -s | perl -ane 'chomp($_); if($_=~/odds_ratio/) { print "$_\ttotal_regions\n"; } else { print "$_\t'${TARGET_TOTAL}'\n"; }' > $OUTDIR/giggleResultsATAC.txt
elif [ -d "$JASPAR_DIR" -a "$DATABASE" == "jaspar" ]; then
    giggle search -i $JASPAR_DIR -q $OUTDIR/REGIONS_INTEREST.bed.gz -s | perl -ane 'chomp($_); if($_=~/odds_ratio/) { print "$_\ttotal_regions\n"; } else { print "$_\t'${TARGET_TOTAL}'\n"; }' > $OUTDIR/giggleResultsJASPAR.txt
elif [ -d "$GTRD_DIR" -a "$DATABASE" == "gtrd" ]; then
    giggle search -i $GTRD_DIR -q $OUTDIR/REGIONS_INTEREST.bed.gz -s | perl -ane 'chomp($_); if($_=~/odds_ratio/) { print "$_\ttotal_regions\n"; } else { print "$_\t'${TARGET_TOTAL}'\n"; }' > $OUTDIR/giggleResultsGTRD.txt
elif [ -d "$UNIBIND_DIR" -a "$DATABASE" == "unibind" ]; then
    giggle search -i $UNIBIND_DIR -q $OUTDIR/REGIONS_INTEREST.bed.gz -s | perl -ane 'chomp($_); if($_=~/odds_ratio/) { print "$_\ttotal_regions\n"; } else { print "$_\t'${TARGET_TOTAL}'\n"; }' > $OUTDIR/giggleResultsUNIBIND.txt
else
    echo
    usage
fi

rm $OUTDIR/REGIONS_INTEREST.bed.gz

if [ ! -z "$TMP" ]; then
    rm $TMP
fi

#wait
#wait_for_jobs_to_finish "Wait for jobs to finish... "
#echo "done"

