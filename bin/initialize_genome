#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
initialize_genome: given a genome name, return the location of genome file
Copyright (C) 2015  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

FILE="$FINDNFRPATH/data/annotations/GENOME_FILE"

#### usage ####
usage() {
	echo Program: "initialize_genome (given a genome name, return the location of genome file)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: initialize_genome -g <genome>"
	echo "Options:"
    echo " -g <string> [genome]"
    echo "[OPTIONS]"
	echo " -i <file>   [input file containing genome information]"
    echo "             [default: $FILE]"
    echo " -m          [macs2 genome parameter, -g]"
    echo " -s          [effective genome size]"
    echo " -e          [file having genomic coordinates of genes in BED format]"
    echo " -t          [file having genomic coordinates of genes TSS (ensembl) in BED format]"
    echo " -n          [file having genomic coordinates of genes in GTF format]"
    echo " -c          [file having genomic coordinates of CpG islands]"
    echo " -T          [file having genomic coordinates of all TSS (cage) in BED format]"
    echo " -R          [file having genomic coordinates of sequence repeats in BED format]"
    echo " -B          [file having genomic coordinates of blacklisted regions in BED format]"
    echo " -D          [file having genomic coordinates of DNase regions in BED format]"
    echo " -F          [file having chromosome sequences in FASTA format]"
    echo " -G          [file having TF binding positions in the genome (GTRD)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts g:i:msetncTRBDFGh ARG; do
	case "$ARG" in
        g) GENOME=$OPTARG;;
		i) FILE=$OPTARG;;
        m) MACS2=1;;
        s) GSIZE=1;;
        e) GENE_COOR_BED=1;;
        t) TSS_COOR_BED=1;;
        n) GENE_COOR_GTF=1;;
        c) CPG_COOR_BED=1;;
        T) TSS_COOR_BED_CAGE=1;;
        R) REPEATS=1;;
        B) BLACKLIST=1;;
        D) DHS=1;;
        F) GENOME_FASTA=1;;
        G) GTRD=1;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$GENOME" -o "$HELP" ]; then
	usage
fi

## determine genome file location
if [ "$(grep -w $GENOME $FILE | wc -l)" -gt 0 ]; then
    if [ ! -z "$MACS2" ]; then
        grep -w $GENOME $FILE | head -n 2 | tail -n 1 | perl -ane 'print "$F[1]";'
    elif [ ! -z "$GSIZE" ] ; then
        grep -w $GENOME $FILE | head -n 3 | tail -n 1 | perl -ane 'print "$F[1]";'
    elif [ ! -z "$GENE_COOR_BED" ] ; then
        grep -w $GENOME $FILE | head -n 4 | tail -n 1 | perl -ane 'print "$F[1]";'
    elif [ ! -z "$TSS_COOR_BED" ] ; then
        grep -w $GENOME $FILE | head -n 5 | tail -n 1 | perl -ane 'print "$F[1]";'
    elif [ ! -z "$GENE_COOR_GTF" ] ; then
        grep -w $GENOME $FILE | head -n 6 | tail -n 1 | perl -ane 'print "$F[1]";'
    elif [ ! -z "$CPG_COOR_BED" ] ; then
        grep -w $GENOME $FILE | head -n 7 | tail -n 1 | perl -ane 'print "$F[1]";'
    elif [ ! -z "$TSS_COOR_BED_CAGE" ] ; then
        grep -w $GENOME $FILE | head -n 8 | tail -n 1 | perl -ane 'print "$F[1]";'
    elif [ ! -z "$REPEATS" ] ; then
        grep -w $GENOME $FILE | head -n 9 | tail -n 1 | perl -ane 'print "$F[1]";'
    elif [ ! -z "$BLACKLIST" ] ; then
        grep -w $GENOME $FILE | head -n 10 | tail -n 1 | perl -ane 'print "$F[1]";'
    elif [ ! -z "$DHS" ] ; then
        grep -w $GENOME $FILE | head -n 11 | tail -n 1 | perl -ane 'print "$F[1]";'
    elif [ ! -z "$GENOME_FASTA" ] ; then
        grep -w $GENOME $FILE | head -n 12 | tail -n 1 | perl -ane 'print "$F[1]";'
    elif [ ! -z "$GTRD" ] ; then
        grep -w $GENOME $FILE | head -n 13 | tail -n 1 | perl -ane 'print "$F[1]";'
    else
        grep -w $GENOME $FILE | head -n 1 | tail -n 1 | perl -ane 'print "$F[1]";'
    fi
fi
exit
