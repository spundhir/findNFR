#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm10"
DATABASE="unibind"
NHITS=50
PVALUE="0.01"
MIN_OVERLAP=50
MIN_N_CLASS=1

#### usage ####
usage() {
echo Program: "multiClassGiggleAna (perform giggle analysis on genomic regions from multiple classes)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: multiClassGiggleAna -i <file> -o <dir> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input file containing gene list(s) (can be stdin)]"
    echo "             [format]"
    echo "             => chr start end name score strand class"
    echo " -o <dir>    [output directory]"
    echo "[OPTIONS]"
    echo " -g <string> [genome for which to perform the analysis (mm10, hg38, danRer7; default: mm10)]"
    echo " -d <string> [database to query (atac, jaspar, gtrd, unibind; default: unibind)]"
    echo " -c <int>    [number of top hits to analyze from each sample (default: 50)]"
    echo " -x <float>  [p-value (default: 0.01)]"
    echo " -y <float>  [remove hits with overlap less than # (default: 50)]"
    echo " -n <int>    [minimum number of elements within each region class to plot (default: 1)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:o:g:d:c::x:y:n:h ARG; do
	case "$ARG" in
		i) BEDFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        g) GENOME=$OPTARG;;
        d) DATABASE=$OPTARG;;
        c) NHITS=$OPTARG;;
        x) PVALUE=$OPTARG;;  
        y) MIN_OVERLAP=$OPTARG;;  
        n) MIN_N_CLASS=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$BEDFILE" -o -z "$OUTDIR" -o "$HELP" ]; then
	usage
fi

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

<<"COMMENT1"
COMMENT1
echo -n "Create directory structure... "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi
echo "done"

echo -n "Populating files based on input genome, $GENOME (`date`).. "
if [ "$GENOME" == "mm10" ]; then
    GENOME_FILE="/scratch/genomes/annotations/SIZE/mouse.mm10.genome"
    REPEAT_FILE="/scratch/genomes/annotations/REPEATS/mouse.mm10.simpleRepeat.gz"
    ATAC_DIR="/localhome/bric/xfd783/bric_share/bp_nextgen/09_ALL_PUBLIC/database/chipAtlas/atac/mm10/giggle/"
    JASPAR_DIR="/localhome/bric/xfd783/bric_share/bp_nextgen/09_ALL_PUBLIC/database/jaspar/mm10/giggle/"
    GTRD_DIR="/scratch/genomes/annotations/GTRD/v21.12/mm10/giggle/"
    UNIBIND_DIR="/scratch/genomes/annotations/UNIBIND/v2022/mm10/giggle/"
elif [ "$GENOME" == "hg38" ]; then
    GENOME_FILE="/scratch/genomes/annotations/SIZE/human.hg38.genome"
    REPEAT_FILE="/scratch/genomes/annotations/REPEATS/human.hg38.simpleRepeat.gz"
    ATAC_DIR="/localhome/bric/xfd783/bric_share/bp_nextgen/09_ALL_PUBLIC/database/chipAtlas/atac/hg38/giggle/"
    JASPAR_DIR="/localhome/bric/xfd783/bric_share/bp_nextgen/09_ALL_PUBLIC/database/jaspar/hg38/giggle/"
    GTRD_DIR="/scratch/genomes/annotations/GTRD/v21.12/hg38/giggle/"
    UNIBIND_DIR="/scratch/genomes/annotations/UNIBIND/v2022/hg38/giggle/"
elif [ "$GENOME" == "danRer7" ]; then
    GENOME_FILE="/scratch/genomes/annotations/SIZE/zebrafish.danRer7.genome"
    REPEAT_FILE="/scratch/genomes/annotations/REPEATS/zebrafish.danRer7.simpleRepeat.gz"
    ATAC_DIR=""
    JASPAR_DIR=""
    GTRD_DIR=""
    UNIBIND_DIR=""
else
    echo "Presently the program only support analysis for mm10, hg38 or danRer7"
    echo
    usage
fi
echo "done"

## determine, if the input genes are from a file or stdin
echo -n "Create gene file depending on if the input is from file or STDIN (`date`).. "
if [ ! -s "$OUTDIR/BEDFILE_INTEREST.TXT" ]; then
    if [ -f "$BEDFILE" ]; then
        zless $BEDFILE | perl -ane '$line=(); foreach(@F) { chomp($_); $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $OUTDIR/BEDFILE_INTEREST.TXT
    elif [ "$BEDFILE" == "stdin" ]; then
        while read LINE; do echo ${LINE}; done | perl -ane '$line=(); foreach(@F) { chomp($_); $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $OUTDIR/BEDFILE_INTEREST.TXT
    else
        usage
    fi
fi
echo "done"

echo -ne "Analyzing for following classes: "
GIGGLEDIR_ALL=""
CLASS_COUNT=0
echo -e "$(cat $OUTDIR/BEDFILE_INTEREST.TXT | perl -ane 'if($F[1]=~/^[0-9]+$/) { print "$F[6]\n"; }' | sort | uniq -c | sed -E 's/^\s+//g' | perl -ane 'if($F[0]>='$MIN_N_CLASS') { print "$F[1] "; }';) (`date`)"

for CLASS in $(cat $OUTDIR/BEDFILE_INTEREST.TXT | perl -ane 'if($F[1]=~/^[0-9]+$/) { print "$F[6]\n"; }' | sort | uniq -c | sed -E 's/^\s+//g' | perl -ane 'if($F[0]>='$MIN_N_CLASS') { print "$F[1]\n"; }'); do
    ID=$(echo $CLASS | perl -ane 'if($_=~/^\.$/) { print "other"; } else { $_=~s/\,/\_/g; print $_; }')
    cat $OUTDIR/BEDFILE_INTEREST.TXT | perl -ane 'if($F[6]=~/^'$CLASS'$/) { print $_; }' > $OUTDIR/enhancer_$ID.bed

    GIGGLEDIR="$OUTDIR/$ID"
    if [ ! -d "$GIGGLEDIR" ]; then
        mkdir -p $GIGGLEDIR
    fi

<<"COMMENT"
COMMENT
    giggleAna -i $OUTDIR/enhancer_$ID.bed -o $GIGGLEDIR -g $GENOME -d ${DATABASE} &>$GIGGLEDIR/$ID.log &

    CLASS_COUNT=$((CLASS_COUNT+1))
    GIGGLEDIR_ALL="$GIGGLEDIR_ALL,$GIGGLEDIR"
done
wait

if [ "$CLASS_COUNT" -gt 1 ]; then
    GIGGLEDIR_ALL=$(echo $GIGGLEDIR_ALL | perl -ane '$_=~s/^\,//g; print $_;')
    giggleDynAna -i $GIGGLEDIR_ALL -o $OUTDIR/giggleDynAna -g $GENOME -d ${DATABASE} -c $NHITS -x $PVALUE -y $MIN_OVERLAP &>$OUTDIR/giggleDynAna.log
else
    echo "Only one class is found. Not performing differential giggle enrichment analysis using giggleDynAna" 
fi
echo "done"
