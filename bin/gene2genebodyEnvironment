#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
gene2promoterEnvironment: compute chromatin environment at promoters
Copyright (C) 2017  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
GENOME="mm9"
SCORE_COL=5

#### usage ####
usage() {
	echo Program: "gene2promoterEnvironment (compute chromatin environment at promoters)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2promoterEnvironment -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates of promoters in BED format]"
    echo " -j <file>   [configuration file containing list of histone peak files]"
    echo "             [format: each line corresponds to absolute path of peak files corresponding to one epigenetic mark, eg.]"
    echo "             [        <ID><SPACE|TAB>h3k27me3_peaks.bed]"
    echo "             [        <ID><SPACE|TAB>h3k4me3_peaks.bed]"
    echo "             [        <ID><SPACE|TAB>h3k4me1_peaks.bed]"
    echo " -o <dir>    [output directory to store results]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -c <int>    [column containing score information in histone peak files (default: 5)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:o:g:c:h ARG; do
	case "$ARG" in
		i) PROMOTERFILE=$OPTARG;;
        j) CONFIGFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        g) GENOME=$OPTARG;;
        c) SCORE_COL=$OPTARG;;
		h) HELP=1;;
	esac
done

echo
if [ "$HELP" ]; then
    usage
fi

echo
echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$PROMOTERFILE" -o ! -f "$CONFIGFILE" ]; then
    echo
    echo "Error: one or more required paramter values not provided"
    echo
	usage
fi
echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

echo -n "Create directory structure (`date`).. "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi
echo "done"

echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
#GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    echo
    echo "computation for $GENOME is not available yet"
    echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    echo
    usage
fi
echo "done"

## create temporary BED file if input is from stdin
if [ "$PROMOTERFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo "${LINE}"
    done > $OUTDIR/$TMP
    PROMOTERFILE=$OUTDIR/$TMP
else
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    zless $PROMOTERFILE | perl -ane 'if($F[0]=~/\_/ || $F[0]=~/chrM/) { next; } print $_;' > $OUTDIR/$TMP
    PROMOTERFILE=$OUTDIR/$TMP
fi

echo -n "Compute chromatin environment at promoters (`date`).. "
WS_FILE=""
while read LINE; do
    TPM=$(echo $LINE | perl -ane 'if($F[0]=~/tpm/ || $_=~/^$/) { print "1"; } else { print "0" }')
    [ "$TPM" -eq "1" ] && continue;

    ID=$(echo $LINE | perl -ane 'print "$F[0]"')
    PEAKFILE=$(echo $LINE | perl -ane 'print "$F[1]"')

    FILENAME=$ID_"WS.BED"
    if [ ! -s "$OUTDIR/$FILENAME" ]; then
        bed2weightedSignal -i $PROMOTERFILE -j $PEAKFILE -g $GENOME -c $SCORE_COL -v > $OUTDIR/$FILENAME
    fi
    WS_FILE="$WS__FILE $FILENAME"

    if [ ! -s "$OUTDIR/peaks/$ID/WS/WS_DISTAL.BED" ]; then
        TMP_SUB=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
        intersectBed -a $OUTDIR/peaks/$ID/PEAKS.BED -b $OUTDIR/GENES_PROMOTER.BED -v > $TMP_SUB
        
        ## OBSOLETE: gene with broader promoter (more active) get less weighed signal if we measure peak distance from TSS
        #bed2window -i $OUTDIR/GENES_PROMOTER.BED -w 1 | bed2weightedSignal -i stdin -j $TMP_SUB -g $GENOME -c 5 | sort -k 4,4 > $OUTDIR/peaks/$ID/WS/WS_DISTAL.BED

        ## NEW: now we are measuring peak distance from gene promoter boundaries defined by gene2promoter script
        bed2weightedSignal -i $OUTDIR/GENES_PROMOTER.BED -j $TMP_SUB -g $GENOME -c 5 | sort -k 4,4 > $OUTDIR/peaks/$ID/WS/WS_DISTAL.BED

        rm $TMP_SUB
    fi
    WS_DISTAL_FILE="$WS_DISTAL_FILE $OUTDIR/peaks/$ID/WS/WS_DISTAL.BED"

    if [ ! -s "$OUTDIR/peaks/$ID/WS/WS_GENEBODY.BED" ]; then
        TMP_SUB=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
        intersectBed -a $OUTDIR/peaks/$ID/PEAKS.BED -b $GENEFILE -u > $TMP_SUB
        bed2window -i $GENEFILE -w 1 | bed2weightedSignal -i stdin -j $TMP_SUB -g $GENOME -c 5 | sort -k 4,4 > $OUTDIR/peaks/$ID/WS/WS_GENEBODY.BED
        rm $TMP_SUB
    fi
    WS_GENEBODY_FILE="$WS_GENEBODY_FILE $OUTDIR/peaks/$ID/WS/WS_GENEBODY.BED"
done < $CONFIGFILE

WS_PROMOTER_FILE=$(echo $WS_PROMOTER_FILE | perl -ane '$_=~s/^\s+//g; print $_;')
WS_DISTAL_FILE=$(echo $WS_DISTAL_FILE | perl -ane '$_=~s/^\s+//g; print $_;')
WS_GENEBODY_FILE=$(echo $WS_GENEBODY_FILE | perl -ane '$_=~s/^\s+//g; print $_;')
echo "done"

echo -n "Compute regulatory complexity of input genes (`date`).. "
oIFS=$IFS
IFS=" "
WS_PROMOTER_FILES=($WS_PROMOTER_FILE)
WS_DISTAL_FILES=($WS_DISTAL_FILE)
WS_GENEBODY_FILES=($WS_GENEBODY_FILE)
WS_PROMOTER_FILES_COUNT=${#WS_PROMOTER_FILES[@]}
IFS=$oIFS

HEADER_PROMOTER="chr\tstart\tend\tgene\tscore\tstrand\tpromoter_defined\ttss\tdist_tss_up\tdist_tss_down"
HEADER_DISTAL="chr\tstart\tend\tgene\tscore\tstrand\tpromoter_defined\ttss\tdist_tss_up\tdist_tss_down"
HEADER_GENEBODY="chr\tstart\tend\tgene\tscore\tstrand"

WS_PROMOTER_COLUMNS="1-10"
WS_DISTAL_COLUMNS="1-10"
WS_GENEBODY_COLUMNS="1-6"
for(( i=1; i<=$WS_PROMOTER_FILES_COUNT; i++ )); do
    ID=$(echo ${WS_PROMOTER_FILES[$i-1]} | perl -ane '@t=split(/\//, $_); print $t[scalar(@t)-3];')
    HEADER_PROMOTER="$HEADER_PROMOTER\t$ID (promoter)"
    NCOL=$(head -n 1 ${WS_PROMOTER_FILES[$i-1]} | perl -ane 'print scalar(@F);')
    WS_PROMOTER_COLUMNS="$WS_PROMOTER_COLUMNS,$(perl -e '$col=('$NCOL'*'$i'); print "$col"')"

    HEADER_DISTAL="$HEADER_DISTAL\t$ID (distal)"
    NCOL=$(head -n 1 ${WS_DISTAL_FILES[$i-1]} | perl -ane 'print scalar(@F);')
    WS_DISTAL_COLUMNS="$WS_DISTAL_COLUMNS,$(perl -e '$col=('$NCOL'*'$i'); print "$col"')"

    HEADER_GENEBODY="$HEADER_GENEBODY\t$ID (genebody)"
    NCOL=$(head -n 1 ${WS_GENEBODY_FILES[$i-1]} | perl -ane 'print scalar(@F);')
    WS_GENEBODY_COLUMNS="$WS_GENEBODY_COLUMNS,$(perl -e '$col=('$NCOL'*'$i'); print "$col"')"
done

echo -e $HEADER_PROMOTER > $OUTDIR/RC_PROMOTER.BED
paste $WS_PROMOTER_FILE | cut -f $WS_PROMOTER_COLUMNS >> $OUTDIR/RC_PROMOTER.BED

echo -e $HEADER_DISTAL > $OUTDIR/RC_DISTAL.BED
paste $WS_DISTAL_FILE | cut -f $WS_DISTAL_COLUMNS >> $OUTDIR/RC_DISTAL.BED

echo -e $HEADER_GENEBODY > $OUTDIR/RC_GENEBODY.BED
paste $WS_GENEBODY_FILE | cut -f $WS_GENEBODY_COLUMNS >> $OUTDIR/RC_GENEBODY.BED

paste $OUTDIR/RC_PROMOTER.BED <(cut -f 11-$((WS_PROMOTER_FILES_COUNT+10)) $OUTDIR/RC_DISTAL.BED) <(cut -f 7-$((WS_PROMOTER_FILES_COUNT+6)) $OUTDIR/RC_GENEBODY.BED) > $OUTDIR/RC.BED
echo "done"

<<"COMMENT"
echo -n "Compute regulatory complexity of input genes using histone reads overlapping to gene promoters (`date`).. "
if [ ! -s "$OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED" -a "$REPLICATES" -gt 1 ]; then
    echo -e $HEADER > $OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED
    bed2expr -i $OUTDIR/GENES_PROMOTER.BED -j $BAMFILEs -d -v 1 -g $GENOME >> $OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED
elif [ ! -s "$OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED" ]; then
    echo -e $HEADER > $OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED
    bed2expr -i $OUTDIR/GENES_PROMOTER.BED -j $BAMFILEs -d -g $GENOME >> $OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED
fi

#nfrDynAna2Matrix -i $OUTDIR/GENES_PROMOTER.BED -j $CONFIGFILE -o $OUTDIR/nfrDynAna -r 1 -n 1 -g $GENOME -c

#TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
#cat <(cat $CONFIGFILE | perl -ane 'BEGIN { $line=""; } if($_=~/^tpm/) { @count=split(/\,/,$F[1]); foreach(@count) { $line.="$F[0]\t"; } } END { $line=~s/\t$//g; print "chr\tstart\tend\tgene\tscore\tstrand\tpromoter_defined\t$line\n"; }') <(cat $OUTDIR/nfrDynAna/NFR_DYNAMICS_SIG.stat) > $OUTDIR/nfrDynAna/$TMP
#mv $OUTDIR/nfrDynAna/$TMP $OUTDIR/nfrDynAna/NFR_DYNAMICS_SIG.stat
echo "done"
COMMENT

## remove temporary file, if exists
if [ ! -z "$OUTDIR/$TMP" ]; then
    rm $OUTDIR/$TMP
fi

echo "All done.. bye"
