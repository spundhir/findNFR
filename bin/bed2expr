#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm9"
AVG=0
CONFIG_FILTER="tpm"
MAPQ=10

#### usage ####
usage() {
	echo Program: "bed2expr (compute read count corresponding to input BED file)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bed2expr -i <file> -j <file(s)>"
	echo "Options:"
	echo " -i <file>   [input file containing genomic coordinate in BED format (can be stdin)]"
    echo " -j <file>   [input mapped reads in BAM format]"
    echo "             [if multiple separate by a comma]"
    echo "             **OR**"
    echo "             [input configuration file containing bam file information]"
    echo "             [<id> <bam file> <bam file (spikeIn: optional)> (id should start with tpm)]"
    echo "[OPTIONS]"
    echo " -s <float>  [normalize expression by input size factor]"
    echo "             [if multiple, seperate them by a comma]"
    echo " -m          [normalize expression by counts per million mapped reads (RPM)]"
    echo " -k          [normalize expression by counts per kilo base per million mapped reads (RPKM)]"
    echo " -d          [remove duplicate reads]"
    echo " -e <int>    [extend 3' end of reads by input number of bases (useful for ChIP-seq data)]"
    echo " -v <int>    [instead of giving expression for each replicate, output only the mean (deafult: 0)]"
    echo "             [assumes that consecutive input files are replicates 1 and 2, respectively]"
    echo " -r          [require same strand]"
    echo " -R          [require opposite strand]"
    echo " -n          [add 1 to all the raw expression counts - useful while taking log]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -f <string> [filter bam files from configuration file based on input indentifier (default: tpm)]"
    echo " -c <file>   [input mapped reads in BAM format for control sample]"
    echo " -M <int>    [minimum MAPQ score of reads to consider as mapped (default: 10)]"
    echo "             [for counting multimapping reads, consider setting it to 0]"
	echo " -h          [help]"
    echo "[NOTE]"
    echo " In case of error: Could not open input BAM files, refer to:"
    echo " https://groups.google.com/forum/#!msg/bedtools-discuss/_LNuoRWHn50/14MaqyzyzXsJ"
    echo " i.e. make sure header of all input bam files is identical"
    echo
    echo " It is important that all input BAM files contain reads mapped using same parameters]"
    echo " for eg., if some samples contain unique while others both unique+multimapped reads]"
    echo " expr. quantification of regions containing multimapped reads would be wrong]"
    echo " even if we set -M 0 parameter]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:s:mkde:v:rRng:f:c:M:h ARG; do
	case "$ARG" in
		i) INPUTBEDFILE=$OPTARG;;
        j) INPUTBAMFILES=$OPTARG;;
        s) INPUTSIZEFACTORS=$OPTARG;; 
        m) CPM=1;;
        k) FPKM=1;;
        d) REMOVE_DUPLICATE=1;;
        e) INPUTEXTENDS=$OPTARG;;
        v) AVG=$OPTARG;;
        r) SAME_STRAND=1;;
        R) OPPOSITE_STRAND=1;;
        n) ADDONE=1;;
        g) GENOME=$OPTARG;;
        f) CONFIG_FILTER=$OPTARG;;
        c) INPUTBAMCONTROL=$OPTARG;;
        M) MAPQ=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INPUTBEDFILE" -o -z "$INPUTBAMFILES" -o "$HELP" ]; then
	>&2 usage
fi

## populating files based on input genome
>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    usage
fi
>&2 echo "done"
# echo $GENOME_FILE; exit

## check if input is BAM files or configuration file containing BAM file information
INPUT=$(echo $INPUTBAMFILES | perl -ane '$_=~s/\,.*//g; print $_;')
if [ "$(samtools view -H $INPUT | wc -l)" -le 0 ]; then
    ## check if input configuration file is in correct format
    if [ "$(cat $INPUTBAMFILES | perl -ane 'if($_=~/^'$CONFIG_FILTER'/) { print scalar(@F)."\n"; }' | sort | uniq | wc -l)" -gt 1 ]; then
        echo
        echo "input bam configuration file is not in correct format"
        echo "possible reason: spikeIn control not provided for each sample"
        usage
    fi

    ## read spikeIn control
    if [ "$(cat $INPUTBAMFILES | perl -ane 'if($_!~/^\s+$/) { print scalar(@F)."\n"; }' | sort | uniq)" -gt 2 ]; then
        INPUT=$(cat $INPUTBAMFILES | perl -ane '
            if($_=~/^'$CONFIG_FILTER'/) {
                $file.="$F[2] ";
            } END {
                $file=~s/\s+$//g;
                print "$file\n";
            }'
        )
        INPUTSPIKEINFILES=($INPUT)

        ## determine spikeIn normalization values
        SCALE_SPIKEIN=""
        for(( i=0; i<${#INPUTSPIKEINFILES[@]}; i++ )); do
            if [ "$(samtools flagstat ${INPUTSPIKEINFILES[$i]} | grep 'properly paired (' | cut -f 1 -d " ")" -gt 0 ]; then
                SCALE=$(samtools flagstat ${INPUTSPIKEINFILES[$i]} | grep "properly paired (" | cut -f 1 -d " " | perl -ane '$_=sprintf("%0.0f", $_/2); printf("%0.6f", 1000000/$_);');
            elif [ "$(samtools flagstat ${INPUTSPIKEINFILES[$i]} | grep 'mapped (' | cut -f 1 -d " ")" -gt 0 ]; then
                SCALE=$(samtools flagstat ${INPUTSPIKEINFILES[$i]} | grep "mapped (" | cut -f 1 -d " " | perl -ane 'printf("%0.6f", 1000000/$_);');
            fi
            SCALE_SPIKEIN="$SCALE_SPIKEIN,$SCALE"
        done
        SCALE_SPIKEIN=$(echo $SCALE_SPIKEIN | perl -ane '$_=~s/^\,//; print $_;')
    fi

    ## read configuration file
    INPUT=$(cat $INPUTBAMFILES | perl -ane '
        if($_=~/^'$CONFIG_FILTER'/) {
            $file.="$F[1],";
        } END {
            $file=~s/\,$//g;
            print "$file\n";
        }'
    )
    INPUTBAMFILES=$INPUT
fi
#echo -e "$SCALE_SPIKEIN"; exit

## parse input bam files in an array
oIFS=$IFS
IFS=","
BAMFILES=($INPUTBAMFILES)
BAMFILES_COUNT=${#BAMFILES[@]}
IFS=$oIFS

## initialize size factors, if both size factors and total reads not provided
if [ -z "$INPUTSIZEFACTORS" -a -z "$CPM" -a -z "$FPKM" -a -z "$SCALE_SPIKEIN" ]; then
    INPUTSIZEFACTORS=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        INPUTSIZEFACTORS="$INPUTSIZEFACTORS,1"
    done
    INPUTSIZEFACTORS=`echo $INPUTSIZEFACTORS | perl -ane '$_=~s/^\,//g; print $_;'`;
fi

## initialize extend parameter, if not provided
if [ -z "$INPUTEXTENDS" ]; then
    INPUTEXTENDS=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        INPUTEXTENDS="$INPUTEXTENDS,0"
    done
    INPUTEXTENDS=`echo $INPUTEXTENDS | perl -ane '$_=~s/^\,//g; print $_;'`;
fi

## parse extend parameter in an array
IFS=","
EXTENDS=($INPUTEXTENDS)
EXTENDS_COUNT=${#EXTENDS[@]}
IFS=$oIFS

## parse bam files in an array
IFS=","
INPUTBAMFILES=$(echo $INPUTBAMFILES | sed 's/\,/ /g')
IFS=$oIFS

## initialize ADDONE based on -n parameter
if [ -z "$ADDONE" ]; then
    ADDONE=0
fi

## create temporary BED file if input is from stdin
if [ "$INPUTBEDFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo ${LINE}
    done | perl -ane '$line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $TMP
    INPUTBEDFILE=$TMP
fi

## compute coverage using control sample
if [ ! -z "$INPUTBAMCONTROL" ]; then
    ARG=""
    ARG_CONTROL=""
    if [ ! -z "$INPUTSIZEFACTORS" ]; then ARG=$(echo $ARG "-s $INPUTSIZEFACTORS "); ARG_CONTROL=$(echo $ARG_CONTROL "-s 1 "); fi
    if [ ! -z "$CPM" ]; then ARG=$(echo $ARG "-m "); ARG_CONTROL=$(echo $ARG_CONTROL "-m "); fi
    if [ ! -z "$FPKM" ]; then ARG=$(echo $ARG "-k "); ARG_CONTROL=$(echo $ARG_CONTROL "-k "); fi
    if [ ! -z "$REMOVE_DUPLICATE" ]; then ARG=$(echo $ARG "-d "); ARG_CONTROL=$(echo $ARG_CONTROL "-d "); fi
    if [ ! -z "$INPUTEXTENDS" ]; then ARG=$(echo $ARG "-e $INPUTEXTENDS "); ARG_CONTROL=$(echo $ARG_CONTROL "-e 0 "); fi
    if [ ! -z "$AVG" ]; then ARG=$(echo $ARG "-v $AVG "); ARG_CONTROL=$(echo $ARG_CONTROL "-v $AVG "); fi
    if [ ! -z "$SAME_STRAND" ]; then ARG=$(echo $ARG "-r "); ARG_CONTROL=$(echo $ARG_CONTROL "-r "); fi
    if [ ! -z "$OPPOSITE_STRAND" ]; then ARG=$(echo $ARG "-R "); ARG_CONTROL=$(echo $ARG_CONTROL "-R "); fi
    if [ "$ADDONE" -eq 1 ]; then ARG=$(echo $ARG "-n "); ARG_CONTROL=$(echo $ARG_CONTROL "-n "); fi
    if [ ! -z "$GENOME" ]; then ARG=$(echo $ARG "-g $GENOME "); ARG_CONTROL=$(echo $ARG_CONTROL "-g $GENOME "); fi
    if [ ! -z "$CONFIG_FILTER" ]; then ARG=$(echo $ARG "-f $CONFIG_FILTER "); ARG_CONTROL=$(echo $ARG_CONTROL "-f $CONFIG_FILTER "); fi

    INPUTBAMFILES=$(echo $INPUTBAMFILES | sed 's/\ /,/g')
    #echo "bed2expr -i $INPUTBEDFILE -j $INPUTBAMFILES $ARG"; exit
    paste <(bed2expr -i $INPUTBEDFILE -j $INPUTBAMFILES $ARG) <(bed2expr -i $INPUTBEDFILE -j $INPUTBAMCONTROL $ARG_CONTROL | perl -ane 'print $F[scalar(@F)-1]."\n";') | perl -ane '
        $field_count=scalar(@F)-'$BAMFILES_COUNT'-1;
        print "$F[0]"; foreach(@F[1..$field_count-1]) { print "\t$_"; }
        foreach(@F[$field_count..scalar(@F)-2]) {
            $_=$_-$F[scalar(@F)-1];
            $sizefactors=sprintf("%d",'$INPUTSIZEFACTORS');
            if($_<0 && $sizefactors==1) { $_=1; }
            elsif($_<0) { $_=0.00001; }
            print "\t$_";
        } print "\n";' 
else
    if [ ! -z "$SCALE_SPIKEIN" -a -z "$INPUTSIZEFACTORS" -a -z "$CPM" -a -z "$FPKM" ]; then
        ## create index of input BAM file, if does not exist
        for(( i=0; i<$BAMFILES_COUNT; i++ )); do
            if [ ! -f "${BAMFILES[$i]}.bai" ]; then
                samtools index ${BAMFILES[$i]}
            fi
        done

        if [ -z "$REMOVE_DUPLICATE" ]; then
            if [ ! -z "$SAME_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D -s
            elif [ ! -z "$OPPOSITE_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D -S
            else
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D
            fi
        else
            if [ ! -z "$SAME_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -s
            elif [ ! -z "$OPPOSITE_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -S
            else
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ
            fi
        fi | perl -ane '@scaleSpikeIn=split(/\,/, "'$SCALE_SPIKEIN'"); $field_count=scalar(@F)-'$BAMFILES_COUNT'; foreach(@F[0..$field_count-1]) { print "$_\t"; } $i=0; foreach(@F[$field_count..scalar(@F)-1]) { printf("%0.5f\t", ($_+'$ADDONE')*$scaleSpikeIn[$i]); $i++; } print "\n";'
    elif [ ! -z "$INPUTSIZEFACTORS" ]; then
        ## check, if number of size factors and extends are equal to the number of input bam files
        IFS=","
        SIZEFACTORS=($INPUTSIZEFACTORS)
        SIZEFACTORS_COUNT=${#SIZEFACTORS[@]}
        IFS=$oIFS

        if [ "$BAMFILES_COUNT" -ne "$SIZEFACTORS_COUNT" -o "$BAMFILES_COUNT" -ne "$EXTENDS_COUNT" ]; then
            >&2 echo
            >&2 echo -n "Please provide size factor and extend parameter for each input bam file";
            >&2 echo
            >&2 usage
        fi

        for(( i=0; i<$BAMFILES_COUNT; i++ )); do
            ## create index of input BAM file, if does not exist
            if [ ! -f "${BAMFILES[$i]}.bai" ]; then
                samtools index ${BAMFILES[$i]}
            fi
        done

        if [ -z "$REMOVE_DUPLICATE" ]; then
            if [ ! -z "$SAME_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D -s
            elif [ ! -z "$OPPOSITE_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D -S
            else
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D
            fi
        else
            if [ ! -z "$SAME_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -s
            elif [ ! -z "$OPPOSITE_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -S
            else
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ
            fi
        fi | perl -ane '@sizeFactors=split(/\,/, "'$INPUTSIZEFACTORS'"); $field_count=scalar(@F)-'$BAMFILES_COUNT'; foreach(@F[0..$field_count-1]) { print "$_\t"; } $i=0; foreach(@F[$field_count..scalar(@F)-1]) { printf("%0.5f\t", ($_+'$ADDONE')/$sizeFactors[$i]); $i++; } print "\n";'
    elif [ ! -z "$FPKM" ]; then
        MAPPEDREADS=""
        for(( i=0; i<$BAMFILES_COUNT; i++ )); do
            ## create index of input BAM file, if does not exist
            if [ ! -f "${BAMFILES[$i]}.bai" ]; then
                samtools index ${BAMFILES[$i]}
            fi

            COUNT=$(samtools idxstats ${BAMFILES[$i]} | grep -wE "^[0-9a-zA-Z]+" | perl -ane '$sum+=$F[2]; END { print "$sum"; }');
            MAPPEDREADS="$MAPPEDREADS,$COUNT"
        done
        MAPPEDREADS=$(echo $MAPPEDREADS | perl -ane '$_=~s/^\,//g; print $_;')

        #echo $MAPPEDREADS
        if [ -z "$REMOVE_DUPLICATE" ]; then
            if [ ! -z "$SAME_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D -s
            elif [ ! -z "$OPPOSITE_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D -S
            else
                #echo "bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D"; exit;
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D
            fi
        else
            if [ ! -z "$SAME_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -s
            elif [ ! -z "$OPPOSITE_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -S
            else
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ
            fi
        fi | perl -ane '@mappedReads=split(/\,/, "'$MAPPEDREADS'"); $field_count=scalar(@F)-'$BAMFILES_COUNT'; foreach(@F[0..$field_count-1]) { print "$_\t"; } $i=0; $line=(); $length=(($F[2]-$F[1])+1)/1000; foreach(@F[$field_count..scalar(@F)-1]) { $line.=sprintf("%0.5f\t", (($_+'$ADDONE')*1000000)/($mappedReads[$i]*$length)); $i++; } $line=~s/\t$//g; print "$line\n";'
        #| perl -ane '@mappedReads=split(/\,/, "'$MAPPEDREADS'"); $field_count=scalar(@F)-'$BAMFILES_COUNT'; foreach(@F[0..$field_count-1]) { print "$_\t"; } $i=0; $line=(); $length=(($F[2]-$F[1])+1)/1000; foreach(@F[$field_count..scalar(@F)-1]) { $line.=sprintf("%0.5f\t", exp(log($_+1) + log(1000000) - log($length) - log($mappedReads[$i]))); $i++; } $line=~s/\t$//g; print "$line\n";'
    else
        MAPPEDREADS=""
        for(( i=0; i<$BAMFILES_COUNT; i++ )); do
            ## create index of input BAM file, if does not exist
            if [ ! -f "${BAMFILES[$i]}.bai" ]; then
                samtools index ${BAMFILES[$i]}
            fi

            COUNT=$(samtools idxstats ${BAMFILES[$i]} | grep -wE "^[0-9a-zA-Z]+" | perl -ane '$sum+=$F[2]; END { print "$sum"; }');
            MAPPEDREADS="$MAPPEDREADS,$COUNT"
        done
        MAPPEDREADS=$(echo $MAPPEDREADS | perl -ane '$_=~s/^\,//g; print $_;')

        #echo $MAPPEDREADS; exit
        if [ -z "$REMOVE_DUPLICATE" ]; then
            if [ ! -z "$SAME_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D -s
            elif [ ! -z "$OPPOSITE_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D -S
            else
                #echo "bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D"; exit;
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -D
            fi
        else
            if [ ! -z "$SAME_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -s
            elif [ ! -z "$OPPOSITE_STRAND" ]; then
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ -S
            else
                bedtools multicov -bams $INPUTBAMFILES -bed $INPUTBEDFILE -q $MAPQ
            fi
        fi | perl -ane '@mappedReads=split(/\,/, "'$MAPPEDREADS'"); $field_count=scalar(@F)-'$BAMFILES_COUNT'; foreach(@F[0..$field_count-1]) { print "$_\t"; } $i=0; $line=(); foreach(@F[$field_count..scalar(@F)-1]) { $line.=sprintf("%0.5f\t", (($_+'$ADDONE')*1000000)/$mappedReads[$i]); $i++; } $line=~s/\t$//g; print "$line\n";'
    fi | perl -ane 'if('$AVG') { $field_count=scalar(@F)-'$BAMFILES_COUNT'; foreach(@F[0..$field_count-1]) { print "$_\t"; } $i=0; $line=(); for($i=$field_count; $i<scalar(@F); $i+=2) { if(!defined($F[$i+1])) { $F[$i+1]=$F[$i]; } $line.=sprintf("%0.5f\t", ($F[$i]+$F[$i+1])/2); } $line=~s/\t$//g; $line=~s/\s+$//g;print "$line\n"; } else { $_=~s/\s+$//g; print "$_\n"; }'
fi

if [ ! -z "$TMP" ]; then
    rm $TMP
fi

exit
