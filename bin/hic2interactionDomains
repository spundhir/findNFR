#!/bin/bash
#PBS -l nodes=1:ppn=4

MERGE_DISTANCE=25000
GENOME="mm10"

#### usage ####
usage() {
	echo Program: "hic2interactionDomains (compute interaction domains from HiC interactions)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: hic2interactionDomains -i <file> [OPTIONS]"
	echo "Options:"
    echo " -i <file>   [promoter capture HiC interaction file in iBED format (can be stdin)]"
    echo "             [chr_bait start_bait end_bait id_bait chr_interaction start_interaction end_interaction score_interaction gene_bait gene_dist_to_bait]"
    echo "[OPTIONS]"
    echo " -d <int>    [distance to merge closesly spaced interactions (default: 25000)]"
    echo " -g <string> [genome (default: mm10)]"
    echo " -a <string> [file containing changes in gene expression (up, down and neutral)]"
    echo "             [input format: <file>,4,38; where 4: gene_name, and 38: expr_class]"
    echo "             [purpose: annotate domains based on target gene expression class]"
    echo "             [ambiguous: if targeting both up and down-regulated genes; up or down otherwise]"
    echo "[OUTPUT]"
    echo "             [stdout: chr_domain start_domain end_domain target_gene log_interaction_score strand interactions_count pValue overlapping_domains domain_class]"
    echo " -h          [help]"
	exit 0
}

#### parse options ####
while getopts i:d:g:a:h ARG; do
    case "$ARG" in
    i) INFILE=$OPTARG;;
    d) MERGE_DISTANCE=$OPTARG;;
    a) ANNO_FILE=$OPTARG;;
    g) GENOME=$OPTARG;;
    h) HELP=1;;
    esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INFILE" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
TSS_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME -t)
if [ ! -f "$GENOME_FILE" -o ! -f "$TSS_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    usage
fi
>&2 echo "done"

## create temporary BED file if input is from stdin
TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
#TMP="6mGBexbmOQfqcW66OqZqLm91nIKta1tG"
if [ "$INFILE" == "stdin" ]; then
    while read LINE; do
        echo "${LINE}"
    done > $TMP
    INFILE=$TMP
fi

## code to determine optimal distance to merge closely spaced interactions
# closestBed -a <(cat hic/chicago/pcHiC_mll_off.ibed | grep -v bait | cut -f 5- | sort -k 5,5 -k 1,1 -k 2n,2 -k 3n,3 | perl -ane 'if($F[4]!~/^\.$/) { print $_; }' | sortBed -i stdin) -b <(cat hic/chicago/pcHiC_mll_off.ibed | grep -v bait | cut -f 5- | sort -k 5,5 -k 1,1 -k 2n,2 -k 3n,3 | perl -ane 'if($F[4]!~/^\.$/) { print $_; }' | sortBed -i stdin) -d -t first -io | cut -f 13 > t

## start analysis
>&2 echo -n "Starting analysis (`date`).. "
echo -e "chr_domain\tstart_domain\tend_domain\ttarget_gene\tlog_interaction_score\tstrand\tinteractions_count\tpValue\toverlapping_domains\tdomain_class"

## merge interactions that target the same gene, if <25KB apart (interaction domains)
for GENE in $(zless ${INFILE} | grep -v start | cut -f 5- | cut -f 5 | sort | uniq | perl -ane 'if($_!~/^\.$/) { print $_; }'); do zless ${INFILE} | grep -v start | cut -f 5- | grep -w ${GENE} | sortBed -i stdin | mergeBed -i stdin -d 25000 -c 4,5,5 -o sum,count_distinct,distinct; done | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[5]\t".log($F[3])."\t.\t$F[4]\n";' | fitDistr.R -i stdin -d lnorm -l 5 > ${TMP}.stat

## count number of times a interaction domain overlaps with other interaction domains (which target same or other gene(s))
intersectBed -a ${TMP}.stat -b <(cut -f 1-3 ${TMP}.stat | sort | uniq) -c > ${TMP}.domains

## if information on the deregulation of interaction domain's target gene is provided, annotate the domain as up, down, neutral or ambiguous
## ambiguous: if the an interaction domain whose target gene is for eg. up-regulated overlaps with an interaction domain whose target genes is for eg. down-regulated
if [ ! -z "$ANNO_FILE" ]; then
    if [ "$(echo $ANNO_FILE | perl -ane 'if($_=~/\,/) { print 1; }')" -eq 1 ]; then
        FILTER_COL=$(echo $ANNO_FILE | perl -ane '$_=~s/^[^,]+\,//g; print $_;')
        ANNO_FILE=$(echo $ANNO_FILE | perl -ane '$_=~s/\,.*$//g; print $_;')
    else
        FILTER_COL="all"
    fi 

    #echo -e "$ANNO_FILE\t$FILTER_COL"; exit
    tabEdit -i $ANNO_FILE -f $FILTER_COL > ${TMP}.geneAnno
    ANNO_FILE=${TMP}.geneAnno

    join -1 4 -2 1 -a 1 <(less ${TMP}.domains | sort -k 4,4) <(less ${ANNO_FILE} | sort -k 1,1) | perl -ane 'if($F[9]=~/^$/) { $F[9]="NA"; } print "$F[1]\t$F[2]\t$F[3]\t$F[0]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\t$F[8]\t$F[9]\n";' | sortBed -i stdin | mergeBed -i stdin -c 4,10 -o collapse | perl -ane '$class="neutral"; if($F[4]=~/up/i && $F[4]=~/down/i) { $class="ambiguous"; } elsif($F[4]=~/up/i && $F[4]!~/down/i) { $class="up"; } elsif($F[4]!~/up/i && $F[4]=~/down/i) { $class="down"; } chomp($_); print "$_\t$class\n";' > ${TMP}.domainsMerged

    intersectBed -a <(join -1 4 -2 1 -a 1 <(less ${TMP}.domains | sort -k 4,4) <(less ${ANNO_FILE} | sort -k 1,1) | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[0]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\t$F[8]\n";') -b ${TMP}.domainsMerged -wao | cut -f 1-9,15 | sort -k 1,1 -k 2n,2 -k 3n,3 -k 5rg,5 | perl -ane '$id="$F[0]_$F[1]_$F[2]_$F[3]"; if(!$seen{$id}) { $seen{$id}{'class'}=$F[scalar(@F)-1]; $seen{$id}{'info'}=$_; } elsif($seen{$id}{'class'}=~/ambiguous/ & $F[scalar(@F)-1]!~/ambiguous/) { $seen{$id}{'class'}=$F[scalar(@F)-1]; $seen{$id}{'info'}=$_; } END { foreach(keys(%seen)) { print "$seen{$_}{'info'}"; } }'

    #grep -v start | sortBed -i stdin | mergeBed -i stdin -c 4,10 -o distinct,distinct | cut -f 5 | sort | uniq -c
else
    cat ${TMP}.domains | perl -ane 'chomp($_); print "$_\tNA\n";'
fi

## approach-2
#echo -e "chr_domain\tstart_domain\tend_domain\ttarget_gene\tlog_interaction_score\tstrand\tinteractions_count\tpValue"
#tabEdit -i ${INFILE} -D | cut -f 5- | sort -k 5,5 -k 1,1 -k 2n,2 -k 3n,3 | perl -ane 'if($F[4]!~/^\.$/) { print $_; }' | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[4]\t$F[3]\t.\t$F[5]\n";' | sortBed -i stdin | mergeBed -i stdin -d 25000 -c 4,4,5,5 -o collapse,count_distinct,collapse,count | perl -ane '@genes=split(/\,/,$F[3]); @scores=split(/\,/,$F[5]); for($i=0; $i<scalar(@scores); $i++) { $gene{$genes[$i]}{'score'}+=$scores[$i]; $gene{$genes[$i]}{'count'}+=1; } foreach(keys(%gene)) { print "$F[0]\t$F[1]\t$F[2]\t$_\t".log($gene{$_}{'score'})."\t.\t$gene{$_}{'count'}\n"; } %gene=();' | fitDistr.R -i stdin -d lnorm -l 5

## approach-3
#echo -e "chr_domain\tstart_domain\tend_domain\tgenes\tgenes_count\ttotal_interaction_score\tinteractions_count\tnorm_interaction_score\tpValue"
#tabEdit -i ${INFILE} -D | cut -f 5- | sort -k 5,5 -k 1,1 -k 2n,2 -k 3n,3 | perl -ane 'if($F[4]!~/^\.$/) { print $_; }' | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[4]\t$F[3]\t.\t$F[5]\n";' | sortBed -i stdin | mergeBed -i stdin -d 25000 -c 4,4,5,5 -o collapse,count_distinct,sum,count | perl -ane '$score=$F[5]/$F[4]; chomp($_); print "$_\t$score\n";' | fitDistr.R -i stdin -d nbinom -l 8
## df_hic_domains_dox <- read.table("~/project/chip-seq-analysis/analysis_mll-af9/mll-af9/hic/chicago/pcHiC_mll_on.domains", header=T)
# df_hic_domains_dox$target_gene <- unlist(lapply(df_hic_domains_dox$genes, function(x) {
#   if(length(unlist(strsplit(x, ","))) > 1) {
#     if(length(which(!is.na(unlist(lapply(unlist(strsplit(x, ",")), function(y) df_promoter[which(df_promoter$name==y),]$log2FoldChange_expr)))))>0) {
#       unlist(strsplit(x, ","))[which.max(unlist(lapply(unlist(strsplit(x, ",")), function(y) df_promoter[which(df_promoter$name==y),]$log2FoldChange_expr)))]
#     } else {
#      unlist(strsplit(x, ","))[1] 
#     }
#   } else {
#     x
#   }
# }))
>&2 echo "done"

## remove temporary file, if exists
rm ${TMP}.stat
rm ${TMP}.domains
if [ ! -z "$ANNO_FILE" ]; then
    rm ${TMP}.geneAnno
    rm ${TMP}.domainsMerged
fi
