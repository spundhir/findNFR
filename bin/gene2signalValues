#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
gene2signalValues: compute signal values at gene promoter and genebody using input bam files
Copyright (C) 2018  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
GENOME="mm9"
WINDOW_TSS=300
WINDOW_TES=3000
CONFIG_FILTER="signal"

#### usage ####
usage() {
	echo Program: "gene2signalValues (compute signal values at gene promoter and genebody using input bam files)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2signalValues -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates of genes in GTF or BED format (can be stdin)]"
    echo "             [source: ftp://ftp.sanger.ac.uk/pub/gencode/]"
    echo " -j <file>   [input mapped reads in BAM format]"
    echo "             [if multiple, separate them by a comma]"
    echo "             **OR**"
    echo "             [input configuration file containing bam file information]"
    echo "             [<id> <bam file> (eg. signal pol2_esc_Rep1.bam)]"
    echo "             [<id> <bam file> (eg. signal_sameStrand groseq_esc_Rep1.bam)]"
    echo "             [<id> <bam file> (eg. signal_oppositeStrand nasseq_esc_Rep1.bam)]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -w <int>    [extend TSS/TES downstream/upstream with input number of bases to define TSSR/TESR (default: 300)]"
    echo " -W <int>    [extend TES downstream with input number of bases to define genebody (default: 3000)]"
    echo " -r          [analyze protein coding genes only (default: all genes; only valid if input is in GTF format)]"
    echo " -c <file>   [input mapped reads in BAM format for control sample]"
    echo " -f <string> [filter bam files from configuration file based on input indentifier (default: signal)]"
    echo " -s          [require same strand (GRO-seq)]"
    echo " -S          [require opposite strand (Nascent-seq)]"
    echo " -a          [output raw read counts (default: RPKM normalized)]"
    echo "[OPTIONS: MODE]"
    echo " -e          [tesr mode: measure signal at TSSR, TESR (default: TSSR, genebody)]"
    echo " -d          [divergent mode: measure signal at NDR_UP, NDR_DOWN, genebody (default: TSSR, genebody)]"
	echo " -h          [help]"
    echo "[NOTE]"
    echo "             [signal (genebody mode): TSSR/genebody]"
    echo "             [signal (tesr mode): TSSR/TESR]"
    echo "             [signal (divergent mode): NDR_UP/NDR_DOWN/genebody]"
    echo "             [TSSR: TSS-50 to TSS+w]"
    echo "             [TESR: TES-w to TES+50]"
    echo "             [NDR: TSS-100 to TSS+10]"
    echo "[OUTPUT]"
    echo "             [chr start end name score strand gene coordinate (TSSR) signal (TSSR) distance (closest_tss) signal (per bam file)]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:g:w:W:rc:f:sSaedh ARG; do
	case "$ARG" in
		i) GTFFILE=$OPTARG;;
        j) BAMFILE=$OPTARG;;
        g) GENOME=$OPTARG;;
        w) WINDOW_TSS=$OPTARG;;
        W) WINDOW_TES=$OPTARG;;
        r) ONLYPROTEINCODING=1;;
        c) BAMFILECONTROL=$OPTARG;;
        f) CONFIG_FILTER=$OPTARG;;
        s) SAME_STRAND=1;;
        S) OPPOSITE_STRAND=1;;
        a) RAW=1;;
        e) TESR_MODE=1;;
        d) DIVERGENT_MODE=1;;
		h) HELP=1;;
	esac
done

>&2 echo
if [ "$HELP" ]; then
    usage
fi

>&2 echo
>&2 echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$GTFFILE" -o -z "$BAMFILE" ]; then
    >&2 echo
    >&2 echo "Error: one or more required paramter values not provided"
    >&2 echo
	>&2 usage
fi
>&2 echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    >&2 usage
fi
>&2 echo "done"

## check if input is BAM files or configuration file containing BAM file information
INPUT=$(echo $BAMFILE | perl -ane '$_=~s/\,.*//g; print $_;')
if [ "$(samtools view -H $INPUT | wc -l)" -le 0 ]; then
    ## read configuration file for same strand transcription data (gro-seq, cage etc)
    INPUT=$(cat $BAMFILE | perl -ane '
        if($_=~/^'$CONFIG_FILTER'_sameStrand/) {
            $file.="$F[1],";
        } END {
            $file=~s/\,$//g;
            print "$file\n";
        }'
    )
    BAMFILE_SAMESTRAND=$INPUT

    ## read configuration file for opposite strand transcription data (nas-seq etc)
    INPUT=$(cat $BAMFILE | perl -ane '
        if($_=~/^'$CONFIG_FILTER'_oppositeStrand/) {
            $file.="$F[1],";
        } END {
            $file=~s/\,$//g;
            print "$file\n";
        }'
    )
    BAMFILE_OPPOSITESTRAND=$INPUT

    ## read configuration file
    INPUT=$(cat $BAMFILE | perl -ane '
        if($_=~/^'$CONFIG_FILTER'/ && $_!~/sameStrand/ && $_!~/oppositeStrand/) {
            $file.="$F[1],";
        } END {
            $file=~s/\,$//g;
            print "$file\n";
        }'
    )
    BAMFILE=$INPUT
fi
#echo -e "$BAMFILE\t$BAMFILE_SAMESTRAND\t$BAMFILE_OPPOSITESTRAND"; exit

## create temporary BED file if input is from stdin
<<"COMMENT"
COMMENT
TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
#TMP="VAmpr2lzRjsXS3gZG4fs1i9L4qryUvWH"
if [ "$GTFFILE" == "stdin" ]; then
    while read LINE; do
        echo "${LINE}"
    done > $TMP.gtf
    GTFFILE=$TMP.gtf
fi

## check, if input genomic coordinates are in BED format, and convert to GTF
IS_BED=$(zless $GTFFILE | cut -f 2 | head -n 2 | tail -n 1 | perl -ane 'if($_=~/^[0-9]+$/) { print $_; }' | wc -l);

if [ "$IS_BED" -gt 0 -a ! -s "$TMP.mostActiveTSS" ]; then
    ## reformat BED file so as it has similar format as in case of GTF file
    WIDTH=$(zless $GTFFILE | perl -ane 'print $F[2]-$F[1]."\n";' | sort | head -n 1)
    if [ "$WIDTH" -le 1 ]; then
        bedtools slop -i $GTFFILE -g $GENOME_FILE -l 0 -r $WINDOW_TES -s
    else
        zless $GTFFILE
    fi | tabEdit -i stdin -n 9 | sortBed -i stdin > $TMP.mostActiveTSS
    NCOL=$(zless $TMP.mostActiveTSS | perl -ane 'print scalar(@F)."\n";' | sort -k 1r,1 | head -n 1)
    closestBed -a $TMP.mostActiveTSS -b $TMP.mostActiveTSS -d -t first -io | cut -f 1-$NCOL,$((NCOL*2+1)) > $TMP
    mv $TMP $TMP.mostActiveTSS
elif [ ! -s "$TMP.mostActiveTSS" ]; then
    ## determine most active TSS for each gene
    ARG=""
    if [ ! -z "$ONLYPROTEINCODING" ]; then ARG=$(echo $ARG "-r "); fi
    if [ ! -z "$BAMFILECONTROL" ]; then ARG=$(echo $ARG "-c $BAMFILECONTROL "); fi
    if [ ! -z "$SAME_STRAND" ]; then ARG=$(echo $ARG "-s "); fi
    if [ ! -z "$OPPOSITE_STRAND" ]; then ARG=$(echo $ARG "-S "); fi

    gene2mostActiveTSS -i $GTFFILE -j $BAMFILE -g $GENOME -w $WINDOW_TSS $ARG | sortBed -i stdin > $TMP.mostActiveTSS
fi

## check if input gene file is in proper format
NCOL=$(zless $TMP.mostActiveTSS | perl -ane 'print scalar(@F)."\n";' | sort -k 1r,1 | head -n 1)
if [ "$NCOL" -lt "6" ]; then
    >&2 echo
    >&2 echo "input gene file is not in correct format"
    >&2 echo
    >&2 usage
fi

## measure signal values using same strand data (eg. GRO-seq, CAGE etc)
touch $TMP.signalValuesSameStrand
if [ ! -z "$BAMFILE_SAMESTRAND" ]; then
    ## parse input bam files in an array
    oIFS=$IFS
    IFS=","
    BAMFILES_SAMESTRAND=($BAMFILE_SAMESTRAND)
    BAMFILES_SAMESTRAND_COUNT=${#BAMFILES_SAMESTRAND[@]}
    IFS=$oIFS

    >&2 echo -n "Start measuring signal values for genes using input BAM files (`date`).. "
    LAST_COL=$(perl -e '$col='$NCOL'+'$BAMFILES_SAMESTRAND_COUNT'; print "$col";')

    ARG=""
    if [ ! -z "$BAMFILECONTROL" ]; then ARG=$(echo $ARG "-c $BAMFILECONTROL "); fi
    if [ -z "$RAW" ]; then ARG=$(echo $ARG "-k "); fi
    ARG=$(echo $ARG "-r ");

    if [ ! -z "$TESR_MODE" ]; then
        paste <(zless $TMP.mostActiveTSS) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -S | bed2expr -i stdin -j $BAMFILE_SAMESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -E | bed2expr -i stdin -j $BAMFILE_SAMESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) | perl -ane 'print "$F[0]"; for($i=1; $i<'$NCOL'; $i++) { print "\t$F[$i]"; } for($i=0; $i<'$BAMFILES_SAMESTRAND_COUNT'; $i++) { $tssr_col=$i+'$NCOL'; $tesr_col=$tssr_col+'$BAMFILES_SAMESTRAND_COUNT'; print "\t$F[$tssr_col]/$F[$tesr_col]"; } print "\n";' 
    elif [ ! -z "$DIVERGENT_MODE" ]; then
        paste <(zless $TMP.mostActiveTSS) <(zless $TMP.mostActiveTSS | bed2window -i stdin -N | bed2window -i stdin -w $WINDOW_TSS -l -s -m | bed2expr -i stdin -j $BAMFILE_SAMESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $TMP.mostActiveTSS | bed2window -i stdin -N | bed2window -i stdin -w $WINDOW_TSS -r -s -m | bed2expr -i stdin -j $BAMFILE_SAMESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -v | bed2expr -i stdin -j $BAMFILE_SAMESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) | perl -ane '
        print "$F[0]"; 
        for($i=1; $i<'$NCOL'; $i++) { print "\t$F[$i]"; } 
        for($i=0; $i<'$BAMFILES_SAMESTRAND_COUNT'; $i++) { 
            $tss_neg_col=$i+'$NCOL'; 
            $tss_pos_col=$tss_neg_col+'$BAMFILES_SAMESTRAND_COUNT'; 
            $genebody_col=$tss_neg_col+'$BAMFILES_SAMESTRAND_COUNT'*2; 
            if($F[5]=~/^-$/) { 
                print "\t$F[$tss_pos_col]/$F[$tss_neg_col]/$F[$genebody_col]";
            } else {
                print "\t$F[$tss_neg_col]/$F[$tss_pos_col]/$F[$genebody_col]";
            }
        }
        print "\n";' 
    else
        paste <(zless $TMP.mostActiveTSS) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -S | bed2expr -i stdin -j $BAMFILE_SAMESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -v | bedtools slop -i stdin -g $GENOME_FILE -l 0 -r $WINDOW_TES -s | bed2expr -i stdin -j $BAMFILE_SAMESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) | perl -ane 'print "$F[0]"; for($i=1; $i<'$NCOL'; $i++) { print "\t$F[$i]"; } for($i=0; $i<'$BAMFILES_SAMESTRAND_COUNT'; $i++) { $tssr_col=$i+'$NCOL'; $genebody_col=$tssr_col+'$BAMFILES_SAMESTRAND_COUNT'; print "\t$F[$tssr_col]/$F[$genebody_col]"; } print "\n";' 
    fi | perl -ane 'print "$F['$NCOL']"; foreach(@F['$NCOL'+1..scalar(@F)-1]) { print "\t$_"; } print "\n";' > $TMP.signalValuesSameStrand
fi

## measure signal values using opposite strand data (eg. Nas-seq etc)
touch $TMP.signalValuesOppositeStrand
if [ ! -z "$BAMFILE_OPPOSITESTRAND" ]; then
    ## parse input bam files in an array
    oIFS=$IFS
    IFS=","
    BAMFILES_OPPOSITESTRAND=($BAMFILE_OPPOSITESTRAND)
    BAMFILES_OPPOSITESTRAND_COUNT=${#BAMFILES_OPPOSITESTRAND[@]}
    IFS=$oIFS

    >&2 echo -n "Start measuring signal values for genes using input BAM files (`date`).. "
    LAST_COL=$(perl -e '$col='$NCOL'+'$BAMFILES_OPPOSITESTRAND_COUNT'; print "$col";')

    ARG=""
    if [ ! -z "$BAMFILECONTROL" ]; then ARG=$(echo $ARG "-c $BAMFILECONTROL "); fi
    if [ -z "$RAW" ]; then ARG=$(echo $ARG "-k "); fi
    ARG=$(echo $ARG "-R ");

    if [ ! -z "$TESR_MODE" ]; then
        paste <(zless $TMP.mostActiveTSS) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -S | bed2expr -i stdin -j $BAMFILE_OPPOSITESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -E | bed2expr -i stdin -j $BAMFILE_OPPOSITESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) | perl -ane 'print "$F[0]"; for($i=1; $i<'$NCOL'; $i++) { print "\t$F[$i]"; } for($i=0; $i<'$BAMFILES_OPPOSITESTRAND_COUNT'; $i++) { $tssr_col=$i+'$NCOL'; $tesr_col=$tssr_col+'$BAMFILES_OPPOSITESTRAND_COUNT'; print "\t$F[$tssr_col]/$F[$tesr_col]"; } print "\n";' 
    elif [ ! -z "$DIVERGENT_MODE" ]; then
        paste <(zless $TMP.mostActiveTSS) <(zless $TMP.mostActiveTSS | bed2window -i stdin -N | bed2window -i stdin -w $WINDOW_TSS -l -s -m | bed2expr -i stdin -j $BAMFILE_OPPOSITESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $TMP.mostActiveTSS | bed2window -i stdin -N | bed2window -i stdin -w $WINDOW_TSS -r -s -m | bed2expr -i stdin -j $BAMFILE_OPPOSITESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -v | bed2expr -i stdin -j $BAMFILE_OPPOSITESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) | perl -ane '
        print "$F[0]"; 
        for($i=1; $i<'$NCOL'; $i++) { print "\t$F[$i]"; } 
        for($i=0; $i<'$BAMFILES_OPPOSITESTRAND_COUNT'; $i++) { 
            $tss_neg_col=$i+'$NCOL'; 
            $tss_pos_col=$tss_neg_col+'$BAMFILES_OPPOSITESTRAND_COUNT'; 
            $genebody_col=$tss_neg_col+'$BAMFILES_OPPOSITESTRAND_COUNT'*2; 
            if($F[5]=~/^-$/) { 
                print "\t$F[$tss_pos_col]/$F[$tss_neg_col]/$F[$genebody_col]";
            } else {
                print "\t$F[$tss_neg_col]/$F[$tss_pos_col]/$F[$genebody_col]";
            }
        }
        print "\n";' 
    else
        paste <(zless $TMP.mostActiveTSS) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -S | bed2expr -i stdin -j $BAMFILE_OPPOSITESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -v | bedtools slop -i stdin -g $GENOME_FILE -l 0 -r $WINDOW_TES -s | bed2expr -i stdin -j $BAMFILE_OPPOSITESTRAND -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) | perl -ane 'print "$F[0]"; for($i=1; $i<'$NCOL'; $i++) { print "\t$F[$i]"; } for($i=0; $i<'$BAMFILES_OPPOSITESTRAND_COUNT'; $i++) { $tssr_col=$i+'$NCOL'; $genebody_col=$tssr_col+'$BAMFILES_OPPOSITESTRAND_COUNT'; print "\t$F[$tssr_col]/$F[$genebody_col]"; } print "\n";' 
    fi | perl -ane 'print "$F['$NCOL']"; foreach(@F['$NCOL'+1..scalar(@F)-1]) { print "\t$_"; } print "\n";' > $TMP.signalValuesOppositeStrand
fi

## measure signal values using strand unaware data (eg. Pol2, histone etc)
if [ ! -z "$BAMFILE" ]; then
    ## parse input bam files in an array
    oIFS=$IFS
    IFS=","
    BAMFILES=($BAMFILE)
    BAMFILES_COUNT=${#BAMFILES[@]}
    IFS=$oIFS

    >&2 echo -n "Start measuring signal values for genes using input BAM files (`date`).. "
    LAST_COL=$(perl -e '$col='$NCOL'+'$BAMFILES_COUNT'; print "$col";')

    ARG=""
    if [ ! -z "$BAMFILECONTROL" ]; then ARG=$(echo $ARG "-c $BAMFILECONTROL "); fi
    if [ -z "$RAW" ]; then ARG=$(echo $ARG "-k "); fi
    if [ ! -z "$SAME_STRAND" ]; then ARG=$(echo $ARG "-r "); fi
    if [ ! -z "$OPPOSITE_STRAND" ]; then ARG=$(echo $ARG "-R "); fi

    if [ ! -z "$TESR_MODE" ]; then
        paste <(zless $TMP.mostActiveTSS) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -S | bed2expr -i stdin -j $BAMFILE -d -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -E | bed2expr -i stdin -j $BAMFILE -d -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) | perl -ane 'print "$F[0]"; for($i=1; $i<'$NCOL'; $i++) { print "\t$F[$i]"; } for($i=0; $i<'$BAMFILES_COUNT'; $i++) { $tssr_col=$i+'$NCOL'; $tesr_col=$tssr_col+'$BAMFILES_COUNT'; print "\t$F[$tssr_col]/$F[$tesr_col]"; } print "\n";' 
    elif [ ! -z "$DIVERGENT_MODE" ]; then
        paste <(zless $TMP.mostActiveTSS) <(zless $TMP.mostActiveTSS | bed2window -i stdin -N | bed2window -i stdin -w $WINDOW_TSS -l -s -m | bed2expr -i stdin -j $BAMFILE -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $TMP.mostActiveTSS | bed2window -i stdin -N | bed2window -i stdin -w $WINDOW_TSS -r -s -m | bed2expr -i stdin -j $BAMFILE -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -v | bed2expr -i stdin -j $BAMFILE -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) | perl -ane '
        print "$F[0]"; 
        for($i=1; $i<'$NCOL'; $i++) { print "\t$F[$i]"; } 
        for($i=0; $i<'$BAMFILES_COUNT'; $i++) { 
            $tss_neg_col=$i+'$NCOL'; 
            $tss_pos_col=$tss_neg_col+'$BAMFILES_COUNT'; 
            $genebody_col=$tss_neg_col+'$BAMFILES_COUNT'*2; 
            if($F[5]=~/^-/) { 
                print "\t$F[$tss_pos_col]/$F[$tss_neg_col]/$F[$genebody_col]";
            } else {
                print "\t$F[$tss_neg_col]/$F[$tss_pos_col]/$F[$genebody_col]";
            }
        }
        print "\n";' 
    else
        paste <(zless $TMP.mostActiveTSS) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -S | bed2expr -i stdin -j $BAMFILE -d -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $TMP.mostActiveTSS | bed2window -i stdin -w $WINDOW_TSS -v | bedtools slop -i stdin -g $GENOME_FILE -l 0 -r $WINDOW_TES -s | bed2expr -i stdin -j $BAMFILE -d -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) | perl -ane 'print "$F[0]"; for($i=1; $i<'$NCOL'; $i++) { print "\t$F[$i]"; } for($i=0; $i<'$BAMFILES_COUNT'; $i++) { $tssr_col=$i+'$NCOL'; $genebody_col=$tssr_col+'$BAMFILES_COUNT'; print "\t$F[$tssr_col]/$F[$genebody_col]"; } print "\n";' 
    fi > $TMP.signalValues
else
    zless $TMP.mostActiveTSS > $TMP.signalValues
fi

## print results to STDOUT
paste $TMP.signalValues $TMP.signalValuesSameStrand $TMP.signalValuesOppositeStrand | sortBed -i stdin | perl -ane '$F[3]=~s/\-[0-9]+$//g; print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { print "\t$_"; } print "\n";' | sort -k 4,4 -k 9rg,9 -k 10rn,10 | perl -ane 'if(!$seen{$F[3]}) { print $_; $seen{$F[3]}=1; }'

## remove temporary file, if exists
if [ "$GTFFILE" == "stdin" ]; then
    rm $TMP.gtf
fi

rm $TMP.mostActiveTSS
rm $TMP.signalValues
rm $TMP.signalValuesSameStrand
rm $TMP.signalValuesOppositeStrand

>&2 echo "All done.. bye"
