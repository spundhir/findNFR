#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm10"
CONFIG_FILTER="RP"

#### usage ####
usage() {
	echo Program: "gene2regulatorySignal (compute regulatory signal for input genes in BED format)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2regulatorySignal -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input gene coordinates in BED format (eg. gene2promoter)]"
    echo "             [format: chr start end name score strand (..)]"
	echo " -j <file>   [input CRE coordinates in BED format (can be stdin)]"
    echo "             [format: output from linkDHS2genes]"
    echo " -k <file>   [configuration file containing list of BAM/BED files used to compute regulatory signal]"
    echo "             [<id> <bamfile> (eg. RP h3k27me3_esc_Rep1.bam)]"
    echo "             [<id> <bedfile> (eg. RP h3k4me3_esc_Rep1.bed)]"
    echo " -o <dir>    [output directory]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm10)]"
    echo " -f <string> [filter bam files from configuration file based on input indentifier (default: RP)]"
    echo " -r          [output raw read counts (default: TPKM at promoter and TPM at CRE)]"
    echo " -b          [use class information to compute TF binding or class present information]"
	echo " -h          [help]"
    echo "[OUTPUT]"
    echo "             [chr start end gene_name score strand (..) promoter_signal (..) total_distal_signal (..) weighted_distal_signal (..) enhancer_count class_frequencies]"
    echo "             [computed for each input peak: promoter_signal, total_distal_signal, weighted_distal_signal]"
    echo "[NOTE]"
    echo "             [if -k enlist BED file(s), column 4 is assumed as containing score column]"
    echo "             [if different or multiple score columns, provide this information in -k file in following format]"
    echo "             [<id> <bedfile>,6]"
    echo "             [<id> <bedfile>,6,7,8,9]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:k:o:g:f:rbh ARG; do
    case "$ARG" in
    i) PROMOTER_FILE=$OPTARG;;
    j) CRE_FILE=$OPTARG;;
    k) CONFIG_FILE=$OPTARG;;
    o) OUTDIR=$OPTARG;;
    g) GENOME=$OPTARG;;
    f) CONFIG_FILTER=$OPTARG;;
    r) RAW=1;;
    b) SEGMENT_COL_BINARY=1;;
    h) HELP=1;;
    esac
done

## usage, if necessary file and directories are given/exist
if [ ! -f "$PROMOTER_FILE" -o -z "$CRE_FILE" -o -z "$CONFIG_FILE" -o -z "$OUTDIR" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
if [ ! -f "$GENOME_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    usage
fi
>&2 echo "done"

#####################################
## create output directory
#####################################
mkdir -p $OUTDIR

#####################################
## check, if BED file(s) exist in input config file
#####################################
BEDFILES=()
while read LINE; do
    if [ "$(echo $LINE | tr '/,/' '/\n/' | wc -l)" -gt 1 ]; then
        mkdir -p $OUTDIR/bed_files
        FILE=$(echo $LINE | sed -E 's/\,.*//g')
        for i in $(echo $LINE | sed -E 's/^[^,]+\,//g' | tr '/\,/' '/ /'); do
            NAME=$(tabEdit -i $FILE -d | tabEdit -i stdin -f ${i})
            if [ ! -s "$OUTDIR/bed_files/${NAME}.bed" ]; then
                tabEdit -i $FILE -f 1-4,${i} > $OUTDIR/bed_files/${NAME}.bed
            fi
            BEDFILES+=($OUTDIR/bed_files/$NAME.bed)
        done
    elif [ "$(isBed -i $LINE)" -eq "0" ]; then
        BEDFILES+=($LINE)
    fi
done < <(zless $CONFIG_FILE  | perl -ane 'if($F[0]=~/^'$CONFIG_FILTER'/) { print "$F[1]\n"; }')

#####################################
## create configuration file containing only BAM files
#####################################
if [ ! -s "$OUTDIR/BAM.CONFIG" ]; then
    while read LINE; do
        if [ "$(isBam -i $LINE)" -eq "0" ]; then
            echo -e "$CONFIG_FILTER\t$LINE"
        fi;
    done < <(zless $CONFIG_FILE  | perl -ane 'if($F[0]=~/^'$CONFIG_FILTER'/) { print "$F[1]\n"; }') > $OUTDIR/BAM.CONFIG
fi 
CONFIG_FILE="$OUTDIR/BAM.CONFIG"

#####################################
## define gene promoters
#####################################
if [ ! -s "$OUTDIR/PROMOTER.BED" ]; then
    if [ "$(zless $PROMOTER_FILE | cut -f 8 | grep -E '\:[0-9]+\-[0-9]+' | wc -l)" -ge "1" -a "$(zless $PROMOTER_FILE | cut -f 7 | grep 'Y\|N' | wc -l)" -ge "1" ]; then
        if [ "$RAW" ]; then
            #bed2longestRegion -i $PROMOTER_FILE | sort -k 4,4 | bed2window -i stdin -x -w 500 > $OUTDIR/PROMOTER.BED
            ## better to use this option, Hox9 issue in mll-af9 project
            bed2longestRegion -i $PROMOTER_FILE | sort -k 4,4 | perl -ane '@t=split(/[\:\-]/,$F[7]); print "$t[0]\t$t[1]\t$t[2]\t$F[3]\t$F[4]\t$F[5]\t$F[6]\t$F[0]:$F[1]-$F[2]\t$F[8]\t$F[9]\n";' > $OUTDIR/PROMOTER.BED
        else
            bed2longestRegion -i $PROMOTER_FILE | sort -k 4,4 | perl -ane '@t=split(/[\:\-]/,$F[7]); print "$t[0]\t$t[1]\t$t[2]\t$F[3]\t$F[4]\t$F[5]\t$F[6]\t$F[0]:$F[1]-$F[2]\t$F[8]\t$F[9]\n";' > $OUTDIR/PROMOTER.BED
        fi
    else
        bed2longestRegion -i $PROMOTER_FILE | bed2window -i stdin -x -w 500 > $OUTDIR/PROMOTER.BED
    fi
fi

#####################################
## organize peaks file
#####################################
if [ ! -s "$OUTDIR/CRE.BED" ]; then
    if [ "$CRE_FILE" == "stdin" ]; then
        while read LINE; do
            echo -e "${LINE}"
        done
    else
        zless $CRE_FILE 
    fi | grep -v 'chr.*start.*end\|seqnames.*start.*end' | bed2window -i stdin -w 250 > $OUTDIR/CRE.BED
fi

#####################################
## compute signal at promoters using BAM and BED files
#####################################
if [ ! -s "$OUTDIR/PROMOTER.BED.tpm" ]; then
    ARG=""
    if [ -z "$RAW" ]; then
        ARG="-k";
    fi

    ## tags per kilobase per million mapped reads (TPKM) unless 'RAW' is defined
    bed2expr -i $OUTDIR/PROMOTER.BED -j $CONFIG_FILE -d -n -g $GENOME -f $CONFIG_FILTER -N $ARG > $OUTDIR/PROMOTER.BED.tpm

    if [ "${#BEDFILES[@]}" -gt 0 ]; then
        for (( i=0; i<${#BEDFILES[@]}; i++ )); do
            NCOL=$(head -n 1 $OUTDIR/PROMOTER.BED.tpm | perl -ane 'print scalar(@F);')
            intersectBed -a $OUTDIR/PROMOTER.BED.tpm -b <(zless ${BEDFILES[$i]} | perl -ane 'if($_!~/^#/) { print $_; }' | grep -v 'chr.*start.*end\|seqnames.*start.*end' | perl -ane '$j++; if($F[4]!~/^[0-9\.]+$/ || $F[4]<=0) { print "$F[0]\t$F[1]\t$F[2]\tpeak_$j\t1\t.\n"; } else { print "$F[0]\t$F[1]\t$F[2]\tpeak_$j\t$F[4]\t.\n"; }') -wao | intersectBed2uniq -i stdin -c $((NCOL+5)) -o sum -n $NCOL > $OUTDIR/PROMOTER.BED.tpm.tmp
            mv $OUTDIR/PROMOTER.BED.tpm.tmp $OUTDIR/PROMOTER.BED.tpm
        done
    fi
fi

## organize file header
if [ "$(grep 'chr.*start.*end\|seqnames.*start.*end' $OUTDIR/PROMOTER.BED.tpm | wc -l)" -eq 0 ]; then
    HEADER_PROXIMAL=$(tabEdit -i $PROMOTER_FILE -d)
    HEADER_PROXIMAL="$HEADER_PROXIMAL $(zless $CONFIG_FILE | perl -ane '$F[1]=~s/^.*\///g; $F[1]=~s/\.bam$//g; $F[1]=~s/[\-\.]+/\_/g; print "$F[1]\t";')"
    for(( i=0; i<${#BEDFILES[@]}; i++ )); do
        HEADER_PROXIMAL="$HEADER_PROXIMAL $(echo ${BEDFILES[$i]} | perl -ane '$_=~s/^.*\///g; $_=~s/\.bed$/_peak/g; $_=~s/[\-\.]+/\_/g; print $_;')"
    done

    cat <(echo "$HEADER_PROXIMAL" | tabEdit -i stdin -t | perl -ane 'print lc $_;') $OUTDIR/PROMOTER.BED.tpm > $OUTDIR/PROMOTER.BED.tpm.tmp
    mv $OUTDIR/PROMOTER.BED.tpm.tmp $OUTDIR/PROMOTER.BED.tpm
fi

#####################################
## compute signal at CRE using BAM and BED files
#####################################
if [ ! -s "$OUTDIR/CRE.BED.tpm" ]; then
    ARG=""
    if [ -z "$RAW" ]; then
        ARG="-m";
    fi

    ## tags per million mapped reads (TPM) unless 'RAW' is defined
    bed2expr -i $OUTDIR/CRE.BED -j $CONFIG_FILE -d -n -g $GENOME -f $CONFIG_FILTER -N $ARG > $OUTDIR/CRE.BED.tpm

    if [ "${#BEDFILES[@]}" -gt 0 ]; then
        for (( i=0; i<${#BEDFILES[@]}; i++ )); do
            NCOL=$(head -n 1 $OUTDIR/CRE.BED.tpm | perl -ane 'print scalar(@F);')
            intersectBed -a $OUTDIR/CRE.BED.tpm -b <(zless ${BEDFILES[$i]} | perl -ane 'if($_!~/^#/) { print $_; }' | grep -v 'chr.*start.*end\|seqnames.*start.*end' | perl -ane '$j++; if($F[4]!~/^[0-9\.]+$/ || $F[4]<=0) { print "$F[0]\t$F[1]\t$F[2]\tpeak_$j\t1\t.\n"; } else { print "$F[0]\t$F[1]\t$F[2]\tpeak_$j\t$F[4]\t.\n"; }') -wao | intersectBed2uniq -i stdin -c $((NCOL+5)) -o sum -n $NCOL > $OUTDIR/CRE.BED.tpm.tmp
            mv $OUTDIR/CRE.BED.tpm.tmp $OUTDIR/CRE.BED.tpm
        done
    fi
fi

## organize file header
if [ "$(grep 'chr.*start.*end\|seqnames.*start.*end' $OUTDIR/CRE.BED.tpm | wc -l)" -eq 0 ]; then
    HEADER_DISTAL=$(tabEdit -i $CRE_FILE -d)
    HEADER_DISTAL="$HEADER_DISTAL $(zless $CONFIG_FILE | perl -ane '$F[1]=~s/^.*\///g; $F[1]=~s/\.bam$//g; $F[1]=~s/[\-\.]+/\_/g; print "$F[1]\t";')"
    for(( i=0; i<${#BEDFILES[@]}; i++ )); do
        HEADER_DISTAL="$HEADER_DISTAL $(echo ${BEDFILES[$i]} | perl -ane '$_=~s/^.*\///g; $_=~s/\.bed$/_peak/g; $_=~s/[\-\.]+/\_/g; print $_;')"
    done

    cat <(echo "$HEADER_DISTAL" | tabEdit -i stdin -t | perl -ane 'print lc $_;') $OUTDIR/CRE.BED.tpm > $OUTDIR/CRE.BED.tpm.tmp
    mv $OUTDIR/CRE.BED.tpm.tmp $OUTDIR/CRE.BED.tpm
fi

#####################################
## compute regulatory signal at promoters and distal elements of genes
#####################################
if [ ! -s "$OUTDIR/GENES.DistalSignal" ]; then
    NCOL_CRE_FILE=$(head -n 1 $CRE_FILE | perl -ane 'print scalar(@F);')
    DIST_COL=2
    HIC_SCORE_COL=3
    SEGMENT_COL=4
    SIGNAL_SCORE_COL=$(zless $OUTDIR/CRE.BED.tpm | grep -v start | head -n 1 | perl -ane '$j=5; for($i='$((NCOL_CRE_FILE+1))'; $i<=scalar(@F); $i++) { $col.="$j,"; $j++; } $col=~s/\,$//g; print $col;')

    ## define header for DistalSignal file
    HEADER_SIGNAL="HiC_score $(zless $CONFIG_FILE | perl -ane '$F[1]=~s/^.*\///g; $F[1]=~s/\.bam$//g; print "$F[1]\t";')"
    for(( i=0; i<${#BEDFILES[@]}; i++ )); do
        HEADER_SIGNAL="$HEADER_SIGNAL $(echo ${BEDFILES[$i]} | perl -ane '$_=~s/^.*\///g; $_=~s/\.bed$/_peak/g; print $_;')"
    done
    HEADER_SIGNAL=$(echo "$HEADER_SIGNAL" | perl -ane '$tds=""; $wds=""; foreach(@F) { $_=~s/[\-\.]+/\_/g; $tds.="TDS_$_\t"; $wds.="WDS_$_\t"; } END { $tds=~s/\s+$//g; $wds=~s/\s+$//g; print "$tds"; }')
    HEADER_SIGNAL=$(echo -e "$HEADER_SIGNAL" | sed -E 's/TDS\_//g' | tr '\t+' ',' | perl -ane 'print lc $_;')

    ## select CRE not overlapping with promoter; select hic gene as target, if defined; compute total (tds) and weighted (wds) distal signal for each gene.
    #echo -e "$DIST_COL\n$HIC_SCORE_COL\n$SEGMENT_COL\n$SIGNAL_SCORE_COL\n$HEADER_SIGNAL"; exit
    #bed2weightedSignal.R -i t -s 3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34 -d 2 -t 4 -r hic_score,cebpa_dox_rep1_filtered,cebpa_dox_rep2_filtered,cebpa_dox_rep3_filtered,h3k27ac_dox_rep1_filtered,h3k27ac_dox_rep2_filtered,h3k27ac_dox_rep3_filtered,h3k27me3_dox_rep1_filtered,h3k27me3_dox_rep2_filtered,h3k27me3_dox_rep3_filtered,h3k4me1_dox_rep1_filtered,h3k4me1_dox_rep2_filtered,h3k4me1_dox_rep3_filtered,h3k4me3_dox_rep1_filtered,h3k4me3_dox_rep2_filtered,h3k4me3_dox_rep3_filtered,h3k79me2_dox_rep1_filtered,h3k79me2_dox_rep2_filtered,h3k79me2_dox_rep3_filtered,mll1_dox_rep1_batch2_filtered,mll1_dox_rep2_batch2_filtered,mll1_dox_rep3_batch2_filtered,atac_dox_rep1_filtered,atac_dox_rep2_filtered,atac_dox_rep3_filtered,mll1_dox_rep1_batch2_filtered_peak,mll1_dox_rep2_batch2_filtered_peak,mll1_dox_rep3_batch2_filtered_peak,cebpa_dox_rep1_filtered_peak,cebpa_dox_rep2_filtered_peak,cebpa_dox_rep3_filtered_peak
    if [ "$(initialize_genome -g $GENOME -t)" ]; then
        TSS_FILE=$(initialize_genome -g $GENOME -t)
        intersectBed -a <(grep -v start $OUTDIR/CRE.BED.tpm) -b <(grep -v start $TSS_FILE | grep 'protein_coding\|gene' | bed2window -i stdin -w 500 -x) -v | perl -ane '$gene=$F[7]; $dist=$F[8]; if($F[13]!~/noHiCinteraction/) { $gene=$F[9]; $dist=$F[10]; } $hic_score=1; if($F[11]!~/^\.$/ && $F[11]!~/^NA$/) { $hic_score=$F[11]; } print "$gene\t$dist\t$hic_score"; foreach(@F[13..scalar(@F)-1]) { print "\t$_"; } print "\n";' | sort -k 1,1 | perl -ane 'if($F[0]!~/^\.$/) { print $_; }' | groupBy -g 1 -c $DIST_COL,$HIC_SCORE_COL,$SEGMENT_COL,$SIGNAL_SCORE_COL -o collapse | bed2weightedSignal.R -i stdin -s $HIC_SCORE_COL,$SIGNAL_SCORE_COL -d $DIST_COL -t $SEGMENT_COL -r $HEADER_SIGNAL | cut -f 1,3- | sed -E 's/^V1\t/name\t/' > $OUTDIR/GENES.DistalSignal
        
        cat <(grep -w start $OUTDIR/CRE.BED.tpm | sed -E 's/closest_/target_/g') <(intersectBed -a <(grep -v start $OUTDIR/CRE.BED.tpm) -b <(grep -v start $TSS_FILE | grep 'protein_coding\|gene' | bed2window -i stdin -w 500 -x) -v | perl -ane '$gene=$F[7]; $dist=$F[8]; if($F[13]!~/noHiCinteraction/) { $F[7]=$F[9]; $F[8]=$F[10]; } if($F[11]=~/^\.$/ && $F[11]=~/^NA$/) { $F[11]=1; } print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { print "\t$_"; } print "\n";' | sortBed -i stdin) > $OUTDIR/ENHANCERS.BED.tpm
    else
        intersectBed -a <(grep -v start $OUTDIR/CRE.BED.tpm) -b <(grep -v start $OUTDIR/PROMOTER.BED) -v | perl -ane '$gene=$F[7]; $dist=$F[8]; if($F[13]!~/noHiCinteraction/) { $gene=$F[9]; $dist=$F[10]; } $hic_score=1; if($F[11]!~/^\.$/ && $F[11]!~/^NA$/) { $hic_score=$F[11]; } print "$gene\t$dist\t$hic_score"; foreach(@F[13..scalar(@F)-1]) { print "\t$_"; } print "\n";' | sort -k 1,1 | perl -ane 'if($F[0]!~/^\.$/) { print $_; }' | groupBy -g 1 -c $DIST_COL,$HIC_SCORE_COL,$SEGMENT_COL,$SIGNAL_SCORE_COL -o collapse | bed2weightedSignal.R -i stdin -s $HIC_SCORE_COL,$SIGNAL_SCORE_COL -d $DIST_COL -t $SEGMENT_COL -r $HEADER_SIGNAL | cut -f 1,3- | sed -E 's/^V1\t/name\t/' > $OUTDIR/GENES.DistalSignal
        
        cat <(grep -w start $OUTDIR/CRE.BED.tpm | sed -E 's/closest_/target_/g') <(intersectBed -a <(grep -v start $OUTDIR/CRE.BED.tpm) -b <(grep -v start $OUTDIR/PROMOTER.BED) -v | perl -ane '$gene=$F[7]; $dist=$F[8]; if($F[13]!~/noHiCinteraction/) { $F[7]=$F[9]; $F[8]=$F[10]; } if($F[11]=~/^\.$/ && $F[11]=~/^NA$/) { $F[11]=1; } print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { print "\t$_"; } print "\n";' | sortBed -i stdin) > $OUTDIR/ENHANCERS.BED.tpm
    fi
fi

#####################################
## arrange final output
#####################################

## join 'proximal' and 'distal' signal information
TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
cat <(join -1 4 -2 1 -a 1 <(sort -k 4,4 $OUTDIR/PROMOTER.BED.tpm) <(sort -k 1,1 $OUTDIR/GENES.DistalSignal) | grep 'chr.*start.*end\|seqnames.*start.*end' | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[0]"; foreach(@F[4..scalar(@F)-1]) { print "\t$_"; } print "\n";' | tabEdit -i stdin -t) <(join -1 4 -2 1 -a 1 -e NA <(sort -k 4,4 $OUTDIR/PROMOTER.BED.tpm) <(sort -k 1,1 $OUTDIR/GENES.DistalSignal) | grep -v 'chr.*start.*end\|seqnames.*start.*end' | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[0]"; foreach(@F[4..scalar(@F)-1]) { print "\t$_"; } print "\n";' | tabEdit -i stdin -t) > $TMP

## replace missing fields with 'NA'
NCOL=$(tabEdit -i $TMP  | cut -f 2,2 -d " " | sort -k 1rn,1 | head -n 1)
tabEdit -i $TMP -n $NCOL

#####################################
## remove temporary file
#####################################
rm $TMP
#if [ ! -z "$OUTDIR" ]; then
#    rm -r $OUTDIR
#fi

