#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
bed2nfrdipControl: determine nfr dip for control experiments using input coordinates in BED format
Copyright (C) 2015  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

GENOME="mm9"

#### usage ####
usage() {
    echo
	echo Program: "bed2nfrdipControl (determine nfr dip for control experiments using input coordinates in BED format)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bed2nfrdipControl -i <file> -j <file> [OPTIONS]"
	echo "Options:"
    echo " -i <file>   [input genomic coordinates in BED format]"
    echo " -j <file>   [input mapped reads in BAM format]"
    echo "             [if multiple seperate by a comma]"
    echo "[OPTIONS]"
    echo " -k <float>  [size factor to normalize the expression of read block]"
    echo "             [if multiple seperate by a comma]"
    echo " -e <int>    [extend 3' end of reads by input number of bases]"
    echo "             [if multiple seperate by a comma]"
    echo " -g <string> [genome (default: mm9)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:k:e:g:h ARG; do
	case "$ARG" in
		i) BEDFILE=$OPTARG;;
		j) BAMFILE=$OPTARG;;
		k) SIZEFACTOR=$OPTARG;;
        e) EXTEND=$OPTARG;;
        g) GENOME=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ ! -f "$BEDFILE" -o -z "$BAMFILE" -o "$HELP" ]; then
	usage
fi

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

## check if input genome option is suitable
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    echo
    echo "computation for $GENOME is not feasible yet"
    echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    echo
    usage
fi

## parse input bam files in an array
IFS=","
BAMFILES=($BAMFILE)
BAMFILES_COUNT=${#BAMFILES[@]}
IFS=""

## initialize size factors, if both size factors are not provided
if [ -z "$SIZEFACTOR" ]; then
    SIZEFACTOR=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        SIZEFACTOR="$SIZEFACTOR,1"
    done
    SIZEFACTOR=`echo $SIZEFACTOR | perl -ane '$_=~s/^\,//g; print $_;'`;
fi

## parse input size factors in an array
IFS=","
SIZEFACTORS=($SIZEFACTOR)
SIZEFACTORS_COUNT=${#SIZEFACTORS[@]}
IFS=""

## initialize extend parameter, if not provided
if [ -z "$EXTEND" ]; then
    EXTEND=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        EXTEND="$EXTEND,0"
    done
    EXTEND=`echo $EXTEND | perl -ane '$_=~s/^\,//g; print $_;'`;
fi

## parse input size factors in an array
IFS=","
EXTENDS=($EXTEND)
EXTENDS_COUNT=${#EXTENDS[@]}
IFS=""

## create index of input BAM file, if does not exist
for(( i=0; i<$BAMFILES_COUNT; i++ )); do
    if [ ! -f "${BAMFILES[$i]}.bai" ]; then
        samtools index ${BAMFILES[$i]}
    fi  
done

if [ "$BAMFILES_COUNT" -ne "$SIZEFACTORS_COUNT" -o "$BAMFILES_COUNT" -ne "$EXTENDS_COUNT" ]; then
    echo -n "Please provide size factor and extend parameter for each input bam file";
    usage
fi

#compute nfr dip for input regions
readarray -t NFRREGION < $BEDFILE;

for (( i=0; i<${#NFRREGION[@]}; i++ )); do
    COOR=`echo ${NFRREGION[$i]} | perl -ane 'print "$F[0]:$F[1]-$F[2]";'`;
    COLUMN=`echo ${NFRREGION[$i]} | perl -ane 'print scalar(@F);'`;
    FLANK_WIN_UP=`echo ${NFRREGION[$i]} | perl -ane 'print "$F[9]";'`;
    FLANK_WIN_DOWN=`echo ${NFRREGION[$i]} | perl -ane 'print "$F[11]";'`;

    CHR=`echo ${NFRREGION[$i]} | perl -ane 'print "$F[0]";'`;
    START=`echo ${NFRREGION[$i]} | perl -ane 'print "$F[1]";'`;
    END=`echo ${NFRREGION[$i]} | perl -ane 'print "$F[2]";'`;
    if [ "$START" -gt 0 -a "$END" -gt 0 ]; then
        SCORE=`coor2nfrdip -i $COOR -j $BAMFILE -k $SIZEFACTOR -l $FLANK_WIN_UP -m $FLANK_WIN_DOWN -e $EXTEND -g $GENOME`
        #echo "coor2nfrdip -i $COOR -j $BAMFILE -k $SIZEFACTOR -l $FLANK_WIN_UP -m $FLANK_WIN_DOWN -e $EXTEND -g $GENOME"
        echo -e "$CHR\t$START\t$END\t$SCORE"
    fi
done
