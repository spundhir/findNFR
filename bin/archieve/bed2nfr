#!/bin/bash
#PBS -l nodes=1:ppn=4

OUTDIR="fitDistr"
PVALUE=0.05
DISTRIBUTION="pois"
MINCLUSTERHEIGHT=2
MINBLOCKHEIGHT=2
DISTANCE=70
SCALE="0.6"
BLOCKHEIGHT="abs"
GENOME="mm9"
MINNFRLENGTH=20
MAXNFRLENGTH=1000
DISTANCE_PEAKS=$MINNFRLENGTH
SUFFIX=""
NFR_READ_THRESHOLD=10

#### usage ####
usage() {
	echo Program: "bed2nfr (determine NFR positions for input genomic regions)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bed2nfr -i <file> -b <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>     [input file containing genomic regions in BED format (can be stdin)]"
    echo " -b <file>     [input bam file]"
    echo "[OPTIONS]"
    echo " -o <dir>      [output directory to keep fitDistr.R results (default: fitDistr)]"
    echo " -p <float>    [pvalue for read enrichment (default: 0.05)]"
    echo " -d <string>   [distribution to use for data fit (pois or nbinom) (default: pois)]"
    echo " -m <int>      [minimum uniquely mapped reads to analyze a region for NFR (default: 10)]"
    echo " -c <int>      [minimum number of read in the block group (default: 2)]"
    echo " -e <int>      [minimum number of read in the block (default: 2)]"
    echo " -x <int>      [maximum distance between the blocks (default: 70)]"
    echo " -s <float>    [scale to define blocks (default: 0.6)]"
    echo " -g <int>      [block height (abs or rel) (default: abs)]"
    echo " -w <int>      [merge blocks (peaks) separated by given distance (default: -n parameter value)]"
    echo " -y <string>   [genome (default: mm9)]"
    echo " -z <float>    [size factor to normalize read count]"
    echo " -q <int>      [extend 3' end of reads by input number of bases (useful for ChIP-seq data)]"
    echo " -n <int>      [minimum width of nucleosome free region (default: 20)]"
    echo " -v <int>      [maximum width of nucleosome free region (default: 1000)]"
    echo " -f <string>   [a string added at the end of output files. useful when running in parallel]"
    echo " -u            [output one NFR having highest nfrDip score corresponding to each region]"
    echo " -h            [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:b:o:p:d:m:c:e:x:s:g:w:y:z:q::n:v:f:uh ARG; do
	case "$ARG" in
		i) REGIONFILE=$OPTARG;;
        b) BAMFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        p) PVALUE=$OPTARG;;
        d) DISTRIBUTION=$OPTARG;;
        m) NFR_READ_THRESHOLD=$OPTARG;;
        c) MINCLUSTERHEIGHT=$OPTARG;;
        e) MINBLOCKHEIGHT=$OPTARG;;
        x) DISTANCE=$OPTARG;;
        s) SCALE=$OPTARG;;
        g) BLOCKHEIGHT=$OPTARG;;
        w) DISTANCE_PEAKS=$OPTARG;;
        y) GENOME=$OPTARG;;
        z) SIZEFACTOR=$OPTARG;;
        q) EXTEND=$OPTARG;;
        n) MINNFRLENGTH=$OPTARG;;
        v) MAXNFRLENGTH=$OPTARG;;
        f) SUFFIX=$OPTARG;;
        u) ONENFR=1;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are not given/exist
if [ -z "$REGIONFILE" -o -z "$BAMFILE" -o "$HELP" ]; then
	usage
fi

## create temporary BED file if input is from stdin
if [ "$REGIONFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo ${LINE}
    done | perl -ane '$line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $TMP
    REGIONFILE=$TMP
fi

## create output directory, if does not exist"
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi

## parse input bam files in an array
oIFS=$IFS
IFS=","
BAMFILES=($BAMFILE)
BAMFILES_COUNT=${#BAMFILES[@]}
IFS=$oIFS

## initialize size factors, if both size factors are not provided
if [ -z "$SIZEFACTOR" ]; then
    SIZEFACTOR=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        SIZEFACTOR="$SIZEFACTOR,1"
    done
    SIZEFACTOR=`echo $SIZEFACTOR | perl -ane '$_=~s/^\,//g; print $_;'`;
fi

## initialize extend parameter, if not provided
if [ -z "$EXTEND" ]; then
    EXTEND=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        EXTEND="$EXTEND,0"
    done
    EXTEND=`echo $EXTEND | perl -ane '$_=~s/^\,//g; print $_;'`;
fi

## create index of input BAM file, if does not exist
for(( i=0; i<$BAMFILES_COUNT; i++ )); do
    if [ ! -f "${BAMFILES[$i]}.bai" ]; then
        samtools index ${BAMFILES[$i]}
    fi
done

## parse through each input region
while read LINE; do
    ## continue to next line, if malformed BED entry is observed
    if [ "$(echo ${LINE} | perl -ane 'if($_=~/#/ || $F[1]!~/^[0-9]+$/ || $F[2]!~/^[0-9]+$/) { print 0; } else { print 1; }')" -eq 0 ]; then
        continue
    fi

    ## extract genomic coordinate
    COOR=$(echo ${LINE} | perl -ane 'print "$F[0]:$F[1]-$F[2]";')

    ## extract reads corresponding to genomic coordinate
    coor2reads -c $COOR -b $BAMFILE -s $SIZEFACTOR -e $EXTEND -g $GENOME -d | perl -ane '$F[5]=~s/\-$/+/g; print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[5]\n";' > $REGIONFILE.tmp$SUFFIX

    ## determine significant peaks, if total number of input reads are >=10
    COUNT=$(cat $REGIONFILE".tmp$SUFFIX" | wc -l)
    if [ "$COUNT" -ge "$NFR_READ_THRESHOLD" ]; then
        reads2peaks -i $REGIONFILE".tmp$SUFFIX" -o $OUTDIR/chr$SUFFIX -p $PVALUE -d $DISTRIBUTION -x $DISTANCE -w $DISTANCE_PEAKS -a | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t'$COOR'\t$F[4]\t$F[5]\t$F[6]\n"' | sort -k 1,1 -k 2n,2 -k 3n,3 > $REGIONFILE.bg$SUFFIX

        COUNT_SIG=$(cat $REGIONFILE".bg$SUFFIX" | perl -ane 'if($F[6]=~/Y/) { print $_; }' | wc -l)
        COUNT=$(cat $REGIONFILE".bg$SUFFIX" | wc -l)

        ## determine NFRs, if total number of peaks >=2
        if [ "$COUNT_SIG" -ge 2 ]; then
            cat $REGIONFILE".bg$SUFFIX" | perl -ane 'if($F[6]=~/Y/) { print $_; }' | peaks2NFR.pl -i stdin -b $BAMFILE -z $SIZEFACTOR -n $MINNFRLENGTH -v $MAXNFRLENGTH -e $EXTEND -y $GENOME -f $SUFFIX | perl -ane '$F[3]="'$COOR'"; $line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\tSIG_PEAKS\n";' 
        elif [ "$COUNT" -ge 2 ]; then
            cat $REGIONFILE".bg$SUFFIX" | peaks2NFR.pl -i stdin -b $BAMFILE -z $SIZEFACTOR -n $MINNFRLENGTH -v $MAXNFRLENGTH -e $EXTEND -y $GENOME -f $SUFFIX | perl -ane '$F[3]="'$COOR'"; $line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\tNONSIG_PEAKS\n";' 
        else
            echo $COOR | perl -ane '@t=split(/[\:\-]+/, $_); print "$t[0]\t-1\t-1\t'$COOR'\tNA\tNA\tNA\tNA\tNA\tNA\tNA\tNA\tNA\tNA\tNA\n";'
        fi
    else
        echo $COOR | perl -ane '@t=split(/[\:\-]+/, $_); print "$t[0]\t-1\t-1\t'$COOR'\tNA\tNA\tNA\tNA\tNA\tNA\tNA\tNA\tNA\tNA\tNA\n";'
    fi 
done < $REGIONFILE

## remove temporary files
rm $REGIONFILE".tmp$SUFFIX"
if [ -f "$REGIONFILE.bg$SUFFIX" ]; then
    rm $REGIONFILE".bg$SUFFIX"
fi

exit
