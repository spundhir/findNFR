#!/bin/bash
#PBS -l nodes=1:ppn=4

PVALUE=0.05
DISTRIBUTION="pois"
DISTANCE_PEAKS=0

#### usage ####
usage() {
	echo Program: "bg2peaks (determine peaks using blockbuster defined block groups)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bg2peaks -i <file> -o <dir>"
	echo "Options:"
	echo " -i <file>   [input file containing block groups in BED format (can be stdin)]"
    echo " -o <dir>    [output directory to keep fitDistr.R results]"
    echo "[OPTIONS]"
    echo " -p <float>  [pvalue for read enrichment (default: 0.05)]"
    echo " -d <string> [distribution to use for data fit (pois or nbinom) (default: pois)]"
    echo " -w <int>    [merge blocks (peaks) separated by given distance (default: 0)]"
    echo " -a          [output all peaks (default: only statistically significant)]"
    echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:o:p:d:w:ah ARG; do
	case "$ARG" in
		i) INPUTFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        p) PVALUE=$OPTARG;;
        d) DISTRIBUTION=$OPTARG;;
        w) DISTANCE_PEAKS=$OPTARG;;
        a) ALL=1;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INPUTFILE" -o -z "$OUTDIR" -o "$HELP" ]; then
	usage
fi

## create temporary BED file if input is from stdin
if [ "$INPUTFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo ${LINE}
    done | perl -ane '$line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $TMP
    INPUTFILE=$TMP
fi

## create output directory, if it does not exist
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi

## fit distribution to the input block groups
if [ ! -f "$OUTDIR/INPUT.BG.P_VALUE" ]; then
    cat $INPUTFILE | sortBed -i stdin | bedtools merge -c 4 -o sum -d $DISTANCE_PEAKS | perl -ane 'print "$F[3]\t$F[0]\t$F[1]\t$F[2]\n";' | $FINDNFRPATH/share/R/fitDistr.R -i stdin -o $OUTDIR/INPUT.BG.P_VALUE -d $DISTRIBUTION 2>&1 >/dev/null
fi

## filter out significant block groups
if [ ! -z "$ALL" ]; then
    cat $OUTDIR/INPUT.BG.P_VALUE | perl -ane '$sig="N"; if($F[4]<'$PVALUE') { $sig="Y"; } print "$F[1]\t$F[2]\t$F[3]\t$F[1]:$F[2]-$F[3]\t$F[0]\t.\t$F[4]\t$sig\n";'
else
    cat $OUTDIR/INPUT.BG.P_VALUE | perl -ane 'if($F[4]<'$PVALUE') { print "$F[1]\t$F[2]\t$F[3]\t$F[1]:$F[2]-$F[3]\t$F[0]\t.\t$F[4]\tY\n"; }'
fi

## remove temporary file, if exists
if [ ! -z "$TMP" ]; then
    rm $TMP
fi

exit
