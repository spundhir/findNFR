#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
bam2peaks: predict stretches of regions enriched for a given histone mark
Copyright (C) 2017  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
OUTDIR="peaks";
CONTROLDIR="peaks_control";
DISTANCE=70
SCALE="0.6"
MINCLUSTERHEIGHT=2
MINBLOCKHEIGHT=2
BLOCKHEIGHT="abs"
PVALUE="0.05"
GENOME="mm9"
MERGEDISTANCE=0
DISTRIBUTION="nbinom"

#### usage ####
usage() {
	echo Program: "bam2peaks (predict stretches of regions enriched for a given histone mark)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bam2peaks -i <file(s)> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [mapped read file(s) in BAM format]"
    echo "             [if multiple, please separate them by a comma]"
    echo "[NOTE]"
    echo "             [all the required input files should be provided as ABSOLUTE path]"
    echo "[OPTIONS]"
    echo " -o <dir>    [output directory to store results (default: peaks)"
    echo " -m <string> [genome (default: mm9)]"
    echo " -p <int>    [number of processors to use (run in parallel)]"
    echo " -c <int>    [minimum number of read in the block group (default: 2)]"
    echo " -e <int>    [minimum number of read in the block (default: 2)]"
    echo " -x <int>    [maximum distance between the blocks (default: 70)]"
    echo " -s <float>  [scale to define blocks (default: 0.6)]"
    echo " -g <int>    [block height (abs or rel) (default: abs)]"
    echo " -t <float>  [FDR at which to consider a peak as significant (default: 0.05)]"
    echo " -l <file>   [mapped reads in BAM format (control)]"
    echo "             [if multiple, please separate them by a comma]"
    echo " -v <int>    [merge peaks separated by input distance (default: 0)]"
    echo " -d <int>    [distribution to use for data fit (pois or nbinom) (default: nbinom)]"
    echo " -b          [predict broad peaks]" 
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:o:m:p:c:e:x:s:g:t:l:v:d:bh ARG; do
	case "$ARG" in
		i) BAMFILEs=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        m) GENOME=$OPTARG;;
        p) PARALLEL=$OPTARG;;
        c) MINCLUSTERHEIGHT=$OPTARG;;
        e) MINBLOCKHEIGHT=$OPTARG;;
        x) DISTANCE=$OPTARG;;
        s) SCALE=$OPTARG;;
        g) BLOCKHEIGHT=$OPTARG;;
        t) PVALUE=$OPTARG;;
        l) CONTROLFILEs=$OPTARG;;
        v) MERGEDISTANCE=$OPTARG;;
        d) DISTRIBUTION=$OPTARG;;
        b) BROAD=1;;
		h) HELP=1;;
	esac
done

echo
if [ "$HELP" ]; then
    usage
fi

echo
echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$BAMFILEs" ]; then
    echo
    echo "Error: one or more required paramter values not provided"
    echo
	usage
fi
echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

echo -n "Determine number of input bam files (`date`).. "
oIFS=$IFS
IFS=","
BAMFILEa=($BAMFILEs)
IFS=$oIFS
echo "done"

echo -n "Create directory structure (`date`).. "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi

if [ ! -d "$OUTDIR/rep0" ]; then
    for(( i=0; i<${#BAMFILEa[@]}; i++ )); do
        mkdir $OUTDIR/rep$i
    done
    mkdir $OUTDIR/logs/
    mkdir $OUTDIR/$CONTROLDIR
    mkdir $OUTDIR/bw_files/
fi
echo "done"

echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    echo
    echo "computation for $GENOME is not available yet"
    echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    echo
    usage
fi

if [ "$GENOME" == "mm9" ]; then
    GENOME_MACS2="mm"
    GENOME_BLACKLIST="$FINDNFRPATH/data/annotations/mm9_blacklist.bed.gz"
elif [ "$GENOME" == "mm10" ]; then
    GENOME_MACS2="mm"
    GENOME_BLACKLIST="$FINDNFRPATH/data/annotations/mm10_blacklist.bed.gz"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_MACS2="hs"
    GENOME_BLACKLIST="$FINDNFRPATH/data/annotations/hg19_blacklist.bed.gz"
elif [ "$GENOME" == "hg38" ]; then
    GENOME_MACS2="hs"
    GENOME_BLACKLIST="$FINDNFRPATH/data/annotations/hg38_blacklist.bed.gz"
fi
echo done

echo -n "Copy and rename input BAM files (`date`).. "
BAMFILEs=""
for(( i=0; i<${#BAMFILEa[@]}; i++ )); do
    if [ ! -f "$OUTDIR/bw_files/histone_Rep$i.bam" ]; then
        scp ${BAMFILEa[$i]} $OUTDIR/bw_files/histone_Rep$i.bam
    fi
    BAMFILEs="$BAMFILEs,$OUTDIR/bw_files/histone_Rep$i.bam"
done
BAMFILEs=$(echo $BAMFILEs | perl -ane '$_=~s/^\,//g; print $_;')
oIFS=$IFS
IFS=","
BAMFILEa=($BAMFILEs)
IFS=$oIFS
echo "done"

echo -n "Determine number of bases by which to extend the 3' end of reads (`date`).. "
if [ ! -s "$OUTDIR/extendReads" ]; then
    if [ ! -z "$GENOME_MACS2" ]; then
        for(( i=0; i<${#BAMFILEa[@]}; i++ )); do
            macs2 predictd -i ${BAMFILEa[$i]} -g $GENOME_MACS2 --outdir $OUTDIR/logs/ 2>$OUTDIR/logs/predictd.rep$i &
        done
    else
        for(( i=0; i<${#BAMFILEa[@]}; i++ )); do
            macs2 predictd -i ${BAMFILEa[$i]} --outdir $OUTDIR/logs/ 2>$OUTDIR/logs/predictd.rep$i &
        done
    fi

    wait

    EXTENDs=""
    for(( i=0; i<${#BAMFILEa[@]}; i++ )); do
        FRAGMENTLENGTH=$(cat $OUTDIR/logs/predictd.rep$i | grep "predicted fragment length" | perl -ane 'print $F[scalar(@F)-2];')
        EXTENDs="$EXTENDs,$(echo $FRAGMENTLENGTH | perl -ane 'printf("%0.0f", $_/2);')"
    done
    EXTENDs=$(echo $EXTENDs | perl -ane '$_=~s/^\,//g; print $_;')

    IFS=","
    EXTENDa=($EXTENDs)
    IFS=$oIFS

    echo $EXTENDs > $OUTDIR/extendReads
else
    echo -n "initialize extend parameters ($OUTDIR/extendReads exists).. "
    EXTENDs=$(head -n 1 $OUTDIR/extendReads)
    IFS=","
    EXTENDa=($EXTENDs)
    IFS=$oIFS
fi
echo "done"

## check, if extension parameter is computed properly
if [ ! -s "$OUTDIR/extendReads" ]; then
    echo
    echo "Error: Extension parameter is not computed properly.";
    echo
    exit 1
fi

<<"COMMENT"
COMMENT
## index bam files and estimate size factors
echo -n "Create index of input BAM files (`date`).. "
for(( i=0; i<${#BAMFILEa[@]}; i++ )); do
    if [ ! -e "${BAMFILEa[$i]}.bai" ]; then
        samtools index ${BAMFILEa[$i]}
    fi
done
echo "done"

echo -n "Compute size factor for each replicate (`date`).. "
if [ ${#BAMFILEa[@]} -gt 1 ]; then
    if [ ! -e "$OUTDIR/sizeFactor" ]; then
        estimateSizeFactor.pl -o b -b $BAMFILEs -x $PEAKREGION -r $OUTDIR/sizeFactorCount -e $EXTENDs -g $GENOME -p $FINDNFRPATH/share/R/
        estimateSizeFactor.pl -o c -r $OUTDIR/sizeFactorCount -p $FINDNFRPATH/share/R/ > $OUTDIR/sizeFactor
    fi
else
    touch $OUTDIR/sizeFactorCount
    perl -e 'print "'${BAMFILEa[0]}'\t1\n";' > $OUTDIR/sizeFactor
fi
echo "done"

## check, if size factor is computed properly
if [ ! -s $OUTDIR/sizeFactor ]; then
    echo
    echo "Error: Size factor is not computed properly.";
    echo
    exit 1
fi

echo -n "Retrieve size factors to normalize the expression of reads... "
SIZEFACTORa=($(cut -f 2 $OUTDIR/sizeFactor));
SIZEFACTORs=$(printf ",%s" "${SIZEFACTORa[@]}");
SIZEFACTORs=$(echo $SIZEFACTORs | perl -ane '$_=~s/^\,//g; print $_;')
echo "done"

## convert input bam file into bed
echo -n "Convert input bam file into bed (`date`).. "
BEDFILEs=""
for(( i=0; i<${#BAMFILEa[@]}; i++ )); do
    ID=`echo ${BAMFILEa[$i]} | perl -ane '$_=~s/^.*\///g; $_=~s/\.gz$//g; print $_;'`;

    if [ ! -s "$OUTDIR/$ID.bed" ]; then
        bam2bedForChIP -i ${BAMFILEa[$i]} -s ${SIZEFACTORa[$i]} -d -e -g $GENOME > $OUTDIR/$ID.bed
    else
        echo -n "($OUTDIR/$ID.bed already exists).. "
    fi
    BEDFILEs="$BEDFILEs,$OUTDIR/$ID.bed"
done
wait_for_jobs_to_finish "convert input bam file into bed"

BEDFILEs=$(echo $BEDFILEs | perl -ane '$_=~s/^\,//g; print $_;')

IFS=","
BEDFILEa=($BEDFILEs)
IFS=$oIFS
echo "done"

<<"COMMENT"
## check, if BED files are created properly
echo -n "Check, if BED files are created properly (`date`).. "
for(( i=0; i<${#BEDFILEa[@]}; i++ )); do
    if [ ! -s "${BEDFILEa[$i]}" ]; then
        echo
        echo "Error: bed file ${BEDFILEa[$i]} not created properly"
        exit 1
    else
        NCOL=$(awk -F'\t' '{print NF;}' ${BEDFILEa[$i]} | uniq | wc -l)
        if [ "$NCOL" -gt 1 ]; then
            echo
            echo "Error: bed file ${BEDFILEa[$i]} not created properly"
            exit 1
        fi
    fi
done
echo "done"
COMMENT

## print chosen parameters to file
DATE=`date`
echo "#timestamp: $DATE
#version: $VERSION
#input BAM file(s): $BAMFILEs
#output directory: $OUTDIR
#output directory for control peaks: $OUTDIR/$CONTROLDIR
#minimum reads in block group: $MINCLUSTERHEIGHT
#minimum reads in block: $MINBLOCKHEIGHT
#minimum distance between the blocks: $DISTANCE
#scale to define blocks: $SCALE
#block height: $BLOCKHEIGHT
#FDR at which to select significant peaks: $PVALUE
#reference genome: $GENOME
#extend 3' end of reads: $EXTENDs
#merge peaks separated by input distance: $MERGEDISTANCE
#distribution to use for data fit: $DISTRIBUTION
#size factors: $SIZEFACTORs
#broad: $BROAD" > $OUTDIR/PARAMETERS

<<"COMMENT"
COMMENT
## input parameters are ready. start peak analysis
if [ -z "$PARALLEL" ]; then
    echo -n "Predict peaks for each replicate (`date`).. "
    PEAKFILEs=""
    ALLPEAKFILEs=""
    for(( i=0; i<${#BEDFILEa[@]}; i++ )); do
        if [ ! -d "$OUTDIR/rep$i/fitDistr/" ]; then
            mkdir $OUTDIR/rep$i/fitDistr/
        fi
        ID=$(echo ${BEDFILEa[$i]} | perl -ane '$_=~s/^.*\///g; $_=~s/\.gz$//g; print $_;')

        reads2peaks -i ${BEDFILEa[$i]} -o $OUTDIR/rep$i/fitDistr -p $PVALUE -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -d $DISTRIBUTION -w $MERGEDISTANCE > $OUTDIR/rep$i/$ID.peaks

        PEAKFILEs="$PEAKFILEs,$OUTDIR/rep$i/$ID.peaks"

        ## now also analyze peaks which are above threshold pvalue ($PVALUE), however are <0.2
        #intersectBed -a <(cat $OUTDIR/$i/fitDistr/INPUT.BG.P_VALUE | perl -ane 'if($F[6]<1) { print "$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[0]\t.\tN\n"; }') -b $OUTDIR/rep$i/$ID.peaks -v | sortBed -i stdin | bedtools merge -c 4,5,6,7 -o distinct,sum,distinct,distinct -d $MERGEDISTANCE > $OUTDIR/rep$i/$ID.allPeaks
        cat $OUTDIR/$i/fitDistr/INPUT.BG.P_VALUE | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[0]\t.\tA\n";' | sortBed -i stdin | bedtools merge -c 4,5,6,7 -o distinct,sum,distinct,distinct -d $MERGEDISTANCE > $OUTDIR/rep$i/$ID.allPeaks
        ALLPEAKFILEs="$ALLPEAKFILEs,$OUTDIR/rep$i/$ID.allPeaks"
    done
    echo "done"
    PEAKFILEs=$(echo $PEAKFILEs | perl -ane '$_=~s/^\,//g; print $_;')
    ALLPEAKFILEs=$(echo $ALLPEAKFILEs | perl -ane '$_=~s/^\,//g; print $_;')

    if [ ${#BEDFILEa[@]} -gt 1 ]; then
        echo -n "Determine common peaks between replicates (`date`).. "
        multiIntersectBed.sh -i $PEAKFILEs | perl -ane 'if($F[3]>=2) { print $_; }' | cut -f 1-3 | bed2expr -i stdin -j $BAMFILEs -d -g $GENOME | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[0]:$F[1]-$F[2]\t"; $sum=0; $count=0; foreach(@F[3..scalar(@F)-1]) { $sum+=$_; $count++; } $mean=sprintf("%d", $sum/$count); print "$mean\t.\tY\n";' | sort -k 1,1 -k 2n,2 -k 3n,3 > $OUTDIR/PEAKS.BED
        multiIntersectBed.sh -i $ALLPEAKFILEs | perl -ane 'if($F[3]>=2) { print $_; }' | cut -f 1-3 | bed2expr -i stdin -j $BAMFILEs -d -g $GENOME | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[0]:$F[1]-$F[2]\t"; $sum=0; $count=0; foreach(@F[3..scalar(@F)-1]) { $sum+=$_; $count++; } $mean=sprintf("%d", $sum/$count); print "$mean\t.\tA\n";' | sort -k 1,1 -k 2n,2 -k 3n,3 > $OUTDIR/ALLPEAKS.BED
        echo "done"
    else
        ID=`echo $BEDFILEs | perl -ane '$_=~s/^.*\///g; $_=~s/Rep.*$//g; $_=~s/\_$//g; print $_;'`;
        scp $OUTDIR/rep0/$ID.peaks $OUTDIR/PEAKS.BED
        scp $OUTDIR/rep0/$ID.allPeaks $OUTDIR/ALLPEAKS.BED
    fi
else
    echo -n "Split summit file(s) into multiple smaller files (`date`).. "
    if [ ! -d "$OUTDIR/parallel" ]; then
        mkdir $OUTDIR/parallel
        for(( i=0; i<${#BEDFILEa[@]}; i++ )); do
            mkdir $OUTDIR/parallel/rep$i
            indexBed.sh -i ${BEDFILEa[$i]} -o $OUTDIR/parallel/rep$i -x x
        done
        mkdir $OUTDIR/common/
    fi
    echo "done"

    echo -n "Predict peaks for each replicate (`date`).. "
    for(( i=0; i<${#BEDFILEa[@]}; i++ )); do
        if [ ! -s "$OUTDIR/rep$i/fitDistr/INPUT.BG" ]; then
            if [ ! -d "$OUTDIR/rep$i/fitDistr/" ]; then
                mkdir $OUTDIR/rep$i/fitDistr/
            fi
            
            ## check if block group files already exist
            COUNT=$(for file in $(ls $OUTDIR/parallel/rep$i/xchr*); do file=$(echo $file | perl -ane '$_=~s/.*\///g; print $_;'); if [ ! -f "$OUTDIR/rep$i/fitDistr/INPUT.BG$file" ]; then echo $file; fi done | wc -l)

            if [ "$COUNT" -gt 0 ]; then
                ls $OUTDIR/parallel/rep$i/x* | parallel --no-notice -j $PARALLEL 'reads2bg -i {} -c '$MINCLUSTERHEIGHT' -e '$MINBLOCKHEIGHT' -x '$DISTANCE' -s '$SCALE' -g '$BLOCKHEIGHT' > '$OUTDIR'/rep'$i'/fitDistr/INPUT.BG{/.}'
            fi
            cat $OUTDIR/rep$i/fitDistr/INPUT.BGx* > $OUTDIR/rep$i/fitDistr/INPUT.BG
        fi
    done
    echo "done"

    PEAKFILEs=""
    ALLPEAKFILEs=""
    echo -n "Merge all block groups files into one, and predict peaks (`date`).. "
    for(( i=0; i<${#BEDFILEa[@]}; i++ )); do
        ID=$(echo ${BEDFILEa[$i]} | perl -ane '$_=~s/^.*\///g; $_=~s/\.gz$//g; print $_;')
        bg2peaks -i $OUTDIR/rep$i/fitDistr/INPUT.BG -o $OUTDIR/rep$i/fitDistr -p $PVALUE -d $DISTRIBUTION -w $MERGEDISTANCE > $OUTDIR/rep$i/$ID.peaks

        PEAKFILEs="$PEAKFILEs,$OUTDIR/rep$i/$ID.peaks"

        ## now also analyze peaks which are above threshold pvalue ($PVALUE), however are <0.2
        #intersectBed -a <(cat $OUTDIR/rep$i/fitDistr/INPUT.BG.P_VALUE | perl -ane 'if($F[6]<0.2) { print "$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[0]\t.\tN\n"; }') -b $OUTDIR/rep$i/$ID.peaks -v | sortBed -i stdin | bedtools merge -c 4,5,6,7 -o distinct,sum,distinct,distinct -d $MERGEDISTANCE > $OUTDIR/rep$i/$ID.allPeaks
        cat $OUTDIR/rep$i/fitDistr/INPUT.BG.P_VALUE | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[0]\t.\tA\n";' | sortBed -i stdin | bedtools merge -c 4,5,6,7 -o distinct,sum,distinct,distinct -d $MERGEDISTANCE > $OUTDIR/rep$i/$ID.allPeaks
        ALLPEAKFILEs="$ALLPEAKFILEs,$OUTDIR/rep$i/$ID.allPeaks"
    done
    echo "done"
    PEAKFILEs=$(echo $PEAKFILEs | perl -ane '$_=~s/^\,//g; print $_;')
    ALLPEAKFILEs=$(echo $ALLPEAKFILEs | perl -ane '$_=~s/^\,//g; print $_;')

    if [ ${#BEDFILEa[@]} -gt 1 ]; then
        echo -n "Determine common peaks between replicates (`date`).. "
        ID=`echo $BEDFILEs | perl -ane '$_=~s/^.*\///g; $_=~s/Rep.*$//g; $_=~s/\_$//g; print $_;'`;
        multiIntersectBed.sh -i $PEAKFILEs | perl -ane 'if($F[3]>=2) { print $_; }' | cut -f 1-3 | bed2expr -i stdin -j $BAMFILEs -d -g $GENOME | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[0]:$F[1]-$F[2]\t"; $sum=0; $count=0; foreach(@F[3..scalar(@F)-1]) { $sum+=$_; $count++; } $mean=sprintf("%d", $sum/$count); print "$mean\t.\tY\n";' | sort -k 1,1 -k 2n,2 -k 3n,3 > $OUTDIR/PEAKS.BED
        multiIntersectBed.sh -i $ALLPEAKFILEs | perl -ane 'if($F[3]>=2) { print $_; }' | cut -f 1-3 | bed2expr -i stdin -j $BAMFILEs -d -g $GENOME | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[0]:$F[1]-$F[2]\t"; $sum=0; $count=0; foreach(@F[3..scalar(@F)-1]) { $sum+=$_; $count++; } $mean=sprintf("%d", $sum/$count); print "$mean\t.\tA\n";' | sort -k 1,1 -k 2n,2 -k 3n,3 > $OUTDIR/ALLPEAKS.BED
        echo "done"
    else
        scp $OUTDIR/rep0/$ID.peaks $OUTDIR/PEAKS.BED
        scp $OUTDIR/rep0/$ID.allPeaks $OUTDIR/ALLPEAKS.BED
    fi
fi

echo -n "Check if peak file is created properly (`date`).. "
if [ ! -s "$OUTDIR/PEAKS.BED" ]; then
    echo
    echo "Error: file $OUTDIR/PEAKS.BED not created properly"
    exit 1
fi

if [ ! -s "$OUTDIR/ALLPEAKS.BED" ]; then
    echo
    echo "Error: file $OUTDIR/ALLPEAKS.BED not created properly"
    exit 1
fi
echo "done"

## peak analysis using control samples (associate p-values)
echo -n "Peak analysis using control samples (`date`).. "
if [ ! -z "$CONTROLFILEs" ]; then
    ID=`echo $CONTROLFILEs | perl -ane '$_=~s/^.*\///g; $_=~s/Rep.*$//g; $_=~s/\_$//g; print $_;'`;

    echo -n "Determine number of input control files (`date`).. "
    oIFS=$IFS
    IFS=","
    CONTROLFILEa=($CONTROLFILEs)
    IFS=$oIFS
    echo "done"

    echo -n "Create index of input control files (`date`).. "
    for(( i=0; i<${#CONTROLFILEa[@]}; i++ )); do
        if [ ! -e "${CONTROLFILEa[$i]}.bai" ]; then
            samtools index ${CONTROLFILEa[$i]}
        fi
    done
    echo "done"

    ## convert input control file into bed
    echo -n "Convert input control file into bed (`date`).. "
    CONTROLBEDFILEs=""
    for(( i=0; i<${#CONTROLFILEa[@]}; i++ )); do
        ID=`echo ${CONTROLFILEa[$i]} | perl -ane '$_=~s/^.*\///g; $_=~s/\.gz$//g; print $_;'`;

        if [ ! -s "$OUTDIR/$ID.bed" ]; then
            bam2bedForChIP -i ${CONTROLFILEa[$i]} -d -e -g $GENOME > $OUTDIR/$ID.bed
        else
            echo -n "($OUTDIR/$ID.bed already exists).. "
        fi
        CONTROLBEDFILEs="$CONTROLBEDFILEs,$OUTDIR/$ID.bed"
    done
    wait_for_jobs_to_finish "convert input control file into bed"

    CONTROLBEDFILEx=$(echo $CONTROLBEDFILEs | perl -ane '$_=~s/^\,//g; print $_;' | perl -ane '$_=~s/\,/ /g; print $_;')

    cat $CONTROLBEDFILEx | sort -k 1,1 -k 2n,2 -k 3n,3 > $OUTDIR/$CONTROLDIR/$ID.bed

    echo -n "Predict peaks for control replicate (`date`).. "
    reads2peaks -i $OUTDIR/$CONTROLDIR/$ID.bed -o $OUTDIR/$CONTROLDIR/fitDistr -p $PVALUE -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -d $DISTRIBUTION -w $MERGEDISTANCE > $OUTDIR/$CONTROLDIR/$ID.peaks
    echo "done"

    ## check if control peak file is computed properly
    if [ -s "$OUTDIR/$CONTROLDIR/$ID.peaks" ]; then
        TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
        intersectBed -a $OUTDIR/PEAKS.BED -b $OUTDIR/$CONTROLDIR/$ID.peaks -v > $TMP
        mv $TMP $OUTDIR/PEAKS.BED

        ## now also analyze peaks which are above threshold pvalue ($PVALUE), however are <0.2
        #intersectBed -a <(cat $OUTDIR/$CONTROLDIR/fitDistr/INPUT.BG.P_VALUE | perl -ane 'if($F[6]<1) { print "$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[0]\t.\tN\n"; }') -b $OUTDIR/$CONTROLDIR/$ID.peaks -v | sortBed -i stdin | bedtools merge -c 4,5,6,7 -o distinct,sum,distinct,distinct -d $MERGEDISTANCE > $OUTDIR/$CONTROLDIR/$ID.allPeaks
        cat $OUTDIR/$CONTROLDIR/fitDistr/INPUT.BG.P_VALUE | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[0]\t.\tN\n"; }' | sortBed -i stdin | bedtools merge -c 4,5,6,7 -o distinct,sum,distinct,distinct -d $MERGEDISTANCE > $OUTDIR/$CONTROLDIR/$ID.allPeaks
        intersectBed -a $OUTDIR/ALLPEAKS.BED -b $OUTDIR/$CONTROLDIR/$ID.allPeaks -v > $TMP
        mv $TMP $OUTDIR/ALLPEAKS.BED
    else
        echo
        echo "Error: control peak file $OUTDIR/$CONTROLDIR/$ID.peaks not created properly"
        exit 1
    fi
fi
echo "done"

echo -n "Remove peaks overlapping with blacklisted regions (`date`).. "
TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
intersectBed -a $OUTDIR/PEAKS.BED -b $GENOME_BLACKLIST -v > $TMP
mv $TMP $OUTDIR/PEAKS.BED

intersectBed -a $OUTDIR/ALLPEAKS.BED -b $GENOME_BLACKLIST -v > $TMP
mv $TMP $OUTDIR/ALLPEAKS.BED
echo "done"

echo -n "Compute normalized peak scores (`date`).. "
TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
Rscript $FINDNFRPATH/share/R/score2normalize.R -i $OUTDIR/PEAKS.BED > $TMP
mv $TMP $OUTDIR/PEAKS.BED

Rscript $FINDNFRPATH/share/R/score2normalize.R -i $OUTDIR/ALLPEAKS.BED > $TMP
mv $TMP $OUTDIR/ALLPEAKS.BED
echo "done"

## merge peaks into broad peaks, if required
if [ ! -z "$BROAD" ]; then
    if [ ! -s "$OUTDIR/peaks_broad/peaks.merged" ]; then
        mkdir $OUTDIR/peaks_broad
        echo "merge peaks into broad peaks (`date`).. "
        bed2merge -i $OUTDIR/PEAKS.BED -j $BAMFILEs -o $OUTDIR/peaks_broad/peaks.merged -x $DISTRIBUTION -d $MERGEDISTANCE -g $GENOME
        echo "done"
    fi

    echo -n "Remove broad peaks overlapping with blacklisted regions (`date`).. "
    intersectBed -a $OUTDIR/peaks_broad/peaks.merged -b $GENOME_BLACKLIST -v | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[0]:$F[1]-$F[2]\t$F[3]\t.\tY\n";' > $OUTDIR/BROADPEAKS.BED
    echo "done"

    echo -n "Compute normalized peak scores (`date`).. "
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    Rscript $FINDNFRPATH/share/R/score2normalize.R -i $OUTDIR/BROADPEAKS.BED > $TMP
    mv $TMP $OUTDIR/BROADPEAKS.BED
    echo "done"
fi

echo -n "Convert input bam to bigWig format to visualize in UCSC browser (`date`).. "
for(( i=0; i<${#BAMFILEa[@]}; i++ )); do
    ID=$(echo ${BAMFILEa[$i]} | perl -ane '$_=~s/\.bam.*//g; print $_;');
    if [ ! -s "$ID.bw" ]; then
        bam2bwForChIP -i ${BAMFILEa[$i]} -e ${EXTENDa[$i]} -g $GENOME &
    else
        echo -n "($ID.bw already exists..) "
    fi
done
wait

cut -f 1-6 $OUTDIR/PEAKS.BED | grep -v chrMT > $OUTDIR/PEAKS.BED.UCSC
cut -f 1-6 $OUTDIR/ALLPEAKS.BED | grep -v chrMT > $OUTDIR/ALLPEAKS.BED.UCSC
cut -f 1-6 $OUTDIR/BROADPEAKS.BED | grep -v chrMT > $OUTDIR/BROADPEAKS.BED.UCSC
echo "done"

echo -n "Delete copied input BAM files (`date`).. "
#rm $OUTDIR/bw_files/*.bam
#rm $OUTDIR/bw_files/*.bam.bai
echo "done"

echo "All done. Bye"
