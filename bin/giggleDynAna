#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm10"
DATABASE="unibind"
NHITS=10
PVALUE="1e-15"
MIN_OVERLAP=50
ODDS_RATIO=8

#### usage ####
usage() {
	echo Program: "giggleDynAna (compute dynamics in the enrichment of giggle database across multiple samples)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: giggleDynAna -i <dir> -o <dir> [OPTIONS]"
	echo "Options:"
	echo " -i <dir>    [directory containing result from prior run of giggleAna script]"
	echo "             [if multiple, seperate them by a comma]"
	echo " -o <dir>    [output directory]"
	echo "[OPTIONS]"
	echo " -g <string> [genome for which to perform the analysis (mm10, hg38, danRer7; default: mm10)]"
	echo " -d <string> [database to query (atac, jaspar, gtrd, unibind; default: unibind)]"
	echo " -c <int>    [number of top hits to analyze from each sample (default: 10)]"
	echo " -f          [also filter based on -x, -y and -z (defaut=only -c)]"
	echo " -x <float>  [p-value cutoff (default: 1e-15)]"
	echo " -y <float>  [remove hits with overlap less than # (default: 50)]"
	echo " -z <float>  [minimum odds ratio (log) (default: 8)]"
	echo " -l <string> [name of overlaps(s) that must be included in the final output]"
	echo "             [if multiple, separate them by a comma]"
	echo " -q          [plot quantile normalized data (defaut=raw)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:o:g:d:c:fx:y:z:l:qh ARG; do
	case "$ARG" in
	i) INDIR=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        g) GENOME=$OPTARG;;
        d) DATABASE=$OPTARG;;
        c) NHITS=$OPTARG;;
        f) FILTER_PVAL=1;;
        x) PVALUE=$OPTARG;;
        y) MIN_OVERLAP=$OPTARG;;
        z) ODDS_RATIO=$OPTARG;;
        l) MUST_INCLUDE=$OPTARG;;
        q) QNORM=1;;
        h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INDIR" -o -z "$OUTDIR" -o "$HELP" ]; then
	usage
fi

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

<<"COMMENT1"
COMMENT1

echo -n "Create directory structure... "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi
echo "done"

echo -n "Populating files based on input genome, $GENOME (`date`).. "
if [ "$GENOME" == "mm10" ]; then
    GENOME_FILE="/home/xfd783/genomes/annotations/SIZE/mouse.mm10.genome"
    REPEAT_FILE="/home/xfd783/genomes/annotations/REPEATS/mouse.mm10.simpleRepeat.gz"
    GENOME_MOTIF="mm10r"
elif [ "$GENOME" == "hg38" ]; then
    GENOME_FILE="/home/xfd783/genomes/annotations/SIZE/human.hg38.genome"
    REPEAT_FILE="/home/xfd783/genomes/annotations/REPEATS/human.hg38.simpleRepeat.gz"
    GENOME_MOTIF="hg38r"
elif [ "$GENOME" == "danRer7" ]; then
    GENOME_FILE="/home/xfd783/genomes/annotations/SIZE/zebrafish.danRer7.genome"
    REPEAT_FILE="/home/xfd783/genomes/annotations/REPEATS/zebrafish.danRer7.simpleRepeat.gz"
    GENOME_MOTIF="danRer7r"
else
    echo "Presently the program only support analysis for mm9, hg19 or danRer7"
    echo
    usage
fi
echo done

## parse input directories
oIFS=$IFS
IFS=","
INDIRS=($INDIR)
IFS=$oIFS

## perform giggle enrichment analysis
for (( i=0; i<${#INDIRS[@]}; i++)); do
    ID=$(echo ${INDIRS[$i]} | perl -ane '$_=~s/\/$//g; $_=~s/^.*\///g; print $_;')
    if [ -f "${INDIRS[$i]}/giggleResults${DATABASE^^}.txt" ]; then
        if [ "$i" -eq 0 ]; then
            grep odds_ratio ${INDIRS[$i]}/giggleResults${DATABASE^^}.txt | perl -ane 'chomp($_); $_=~s/\#//g; print "id\t$_\n";'
        fi

        grep -v odds_ratio ${INDIRS[$i]}/giggleResults${DATABASE^^}.txt | perl -ane 'chomp($_); print "'$ID'\t$_\n";'
    fi
done > $OUTDIR/GIGGLE_ENRICHMENT_${DATABASE^^}.TXT

ADDITIONAL_ARGUMENT=""
if [ ! -z "${FILTER_PVAL}" ]; then
    ADDITIONAL_ARGUMENT="${ADDITIONAL_ARGUMENT} -f"
fi
if [ ! -z "${MUST_INCLUDE}" ]; then
    ADDITIONAL_ARGUMENT="${ADDITIONAL_ARGUMENT} -l ${MUST_INCLUDE}"
fi
if [ ! -z "${QNORM}" ]; then
    ADDITIONAL_ARGUMENT="${ADDITIONAL_ARGUMENT} -q"
fi

if [ "${DATABASE}" == "atac" ]; then
    cat $OUTDIR/GIGGLE_ENRICHMENT_"${DATABASE^^}".TXT | grep -v 'ATC.ALL\|ATC.Oth\|ATC.NoD\|ATC.Utr\|ATC.Unc' | grep '\.05\|file_size' | giggleDynAna.R -i stdin -o $OUTDIR/giggleEnrichment_"${DATABASE^^}".pdf -c ${NHITS} -x ${PVALUE} -y ${MIN_OVERLAP} -z ${ODDS_RATIO} ${ADDITIONAL_ARGUMENT}  
else
    giggleDynAna.R -i $OUTDIR/GIGGLE_ENRICHMENT_"${DATABASE^^}".TXT -o $OUTDIR/giggleEnrichment_"${DATABASE^^}".pdf -c ${NHITS} -x ${PVALUE} -y ${MIN_OVERLAP} -z ${ODDS_RATIO} ${ADDITIONAL_ARGUMENT}
fi

echo "-c ${NHITS} -x ${PVALUE} -y ${MIN_OVERLAP} -z ${ODDS_RATIO} ${ADDITIONAL_ARGUMENT}" > $OUTDIR/giggleDynAnaParameters.txt

