#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
gene2promoterEnvironment: compute promoter chromatin environment of genes
Copyright (C) 2017  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
GENOME="mm9"
SCORE_COL=5

#### usage ####
usage() {
	echo Program: "gene2promoterEnvironment (compute promoter chromatin environment of genes)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2promoterEnvironment -i <file> -j <file> -o <dir> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates of promoters in BED format (can be stdin)]"
    echo " -j <file>   [configuration file containing list of peak files]"
    echo "             [<id> <bedfile> (eg. h3k27me3 <PATH>/h3k27me3_peaks.bed]"
    echo " -o <dir>    [output directory to store results]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -c <int>    [column containing score information in peak files (default: 5)]"
	echo " -h          [help]"
    echo "[OUTPUT]"
    echo "             [chr start end gene score strand promoter_defined promoter dist_tss_up dist_tss_down signal_promoter (per bam file)]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:o:g:c:h ARG; do
	case "$ARG" in
		i) PROMOTERFILE=$OPTARG;;
        j) CONFIGFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        g) GENOME=$OPTARG;;
        c) SCORE_COL=$OPTARG;;
		h) HELP=1;;
	esac
done

>&2 echo
if [ "$HELP" ]; then
    usage
fi

>&2 echo
>&2 echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$PROMOTERFILE" -o ! -f "$CONFIGFILE" ]; then
    echo
    echo "Error: one or more required paramter values not provided"
    echo
	usage
fi
>&2 echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

>&2 echo -n "Create directory structure (`date`).. "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi
>&2 echo "done"

>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
#GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    echo
    echo "computation for $GENOME is not available yet"
    echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    echo
    usage
fi
>&2 echo "done"

## create temporary BED file if input is from stdin
if [ "$PROMOTERFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo "${LINE}"
    done > $OUTDIR/$TMP
    PROMOTERFILE=$OUTDIR/$TMP
else
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    zless $PROMOTERFILE | perl -ane 'if($F[0]=~/\_/ || $F[0]=~/chrM/) { next; } print $_;' > $OUTDIR/$TMP
    PROMOTERFILE=$OUTDIR/$TMP
fi

>&2 echo -n "Compute chromatin environment at promoters (`date`).. "
NCOL_PROMOTERFILE=$(head -n 1 $PROMOTERFILE | perl -ane 'print scalar(@F);')
NCOL_TO_CUT=$(echo $NCOL_PROMOTERFILE | perl -ane '$_++; print $_;')
COMMAND="paste $PROMOTERFILE"
while read LINE; do
    TPM=$(echo $LINE | perl -ane 'if($F[0]=~/^tpm/i || $_=~/^$/) { print "1"; } else { print "0" }')
    [ "$TPM" -eq "1" ] && continue;

    ID=$(echo $LINE | perl -ane 'print "$F[0]"')
    PEAKFILE=$(echo $LINE | perl -ane 'print "$F[1]"')

    FILENAME=$ID"_WS.BED"
    if [ ! -s "$OUTDIR/$FILENAME" ]; then
        bed2weightedSignal -i $PROMOTERFILE -j $PEAKFILE -g $GENOME -c $SCORE_COL -v > $OUTDIR/$FILENAME
    fi

    COMMAND="$COMMAND <(cut -f $NCOL_TO_CUT $OUTDIR/$FILENAME)"
done < $CONFIGFILE

eval $COMMAND
>&2 echo "done"

## remove temporary file, if exists
if [ ! -z "$OUTDIR/$TMP" ]; then
    rm $OUTDIR/$TMP
fi
