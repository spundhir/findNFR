#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
gene2divergentTranscription: measure divergent trancription at gene promoters
Copyright (C) 2018  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
GENOME="mm9"
WINDOW=500
CONFIG_FILTER="divergent"

#### usage ####
usage() {
	echo Program: "gene2divergentTranscription (measure divergent trancription at gene promoters)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2divergentTranscription -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates of genes in GTF or BED format (can be stdin)]"
    echo "             [source: ftp://ftp.sanger.ac.uk/pub/gencode/]"
    echo " -j <file>   [input mapped reads in BAM format]"
    echo "             [if multiple, separate them by a comma]"
    echo "             **OR**"
    echo "             [input configuration file containing bam file information]"
    echo "             [<id> <bam file> (eg. divergent pol2_esc_Rep1.bam)]"
    echo "             [<id> <bam file> (eg. divergent_sameStrand groseq_esc_Rep1.bam)]"
    echo "             [<id> <bam file> (eg. divergent_oppositeStrand nasseq_esc_Rep1.bam)]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -w <int>    [extend NDR up- and downstream with input number of bases to measure NDR_UP and NDR_DOWN (default: 500)]"
    echo " -r          [analyze protein coding genes only (default: all genes; only valid if input is in GTF format)]"
    echo " -c <file>   [input mapped reads in BAM format for control sample (IgG)]"
    echo " -f <string> [filter bam files from configuration file based on input indentifier (default: divergent)]"
    echo " -s          [require same strandedness (GRO-seq)]"
    echo " -a          [measure using raw read counts (default: RPKM normalized)]"
    echo "[NOTE]"
    echo "             [NDR: TSS-100 to TSS+10]"
    echo "[OUTPUT]"
    echo "             [chr start end name score strand gene coordinate (TSSR) signal (TSSR) distance (closest_tss) NDR_UP/NDR_DOWN/Genebody (per bam file)]"  
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:g:w:rc:f:sah ARG; do
	case "$ARG" in
		i) GTFFILE=$OPTARG;;
        j) BAMFILE=$OPTARG;;
        g) GENOME=$OPTARG;;
        w) WINDOW=$OPTARG;;
        r) ONLYPROTEINCODING=1;;
        c) BAMFILECONTROL=$OPTARG;;
        f) CONFIG_FILTER=$OPTARG;;
        s) SAME_STRAND=1;;
        a) RAW=1;;
		h) HELP=1;;
	esac
done

>&2 echo
if [ "$HELP" ]; then
    usage
fi

>&2 echo
>&2 echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$GTFFILE" -o -z "$BAMFILE" ]; then
    >&2 echo
    >&2 echo "Error: one or more required paramter values not provided"
    >&2 echo
	>&2 usage
fi
>&2 echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    >&2 usage
fi
>&2 echo "done"

## initialize arguments
ARG=""
if [ ! -z "$ONLYPROTEINCODING" ]; then ARG=$(echo $ARG "-r "); fi
if [ ! -z "$BAMFILECONTROL" ]; then ARG=$(echo $ARG "-c $BAMFILECONTROL "); fi
if [ ! -z "$SAME_STRAND" ]; then ARG=$(echo $ARG "-s "); fi
if [ ! -z "$RAW" ]; then ARG=$(echo $ARG "-a "); fi

## measure divergent transcription
gene2signalValues -i $GTFFILE -j $BAMFILE -g $GENOME -f $CONFIG_FILTER -w $WINDOW $ARG -d | perl -ane '$F[3]=~s/\-[0-9]+$//g; print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { print "\t$_"; } print "\n";' | sort -k 4,4 -k 9rg,9 -k 10rn,10 | perl -ane 'if(!$seen{$F[3]}) { print $_; $seen{$F[3]}=1; }'

>&2 echo "All done.. bye"
