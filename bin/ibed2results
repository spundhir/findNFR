#!/bin/bash
#PBS -l nodes=1:ppn=4

MERGE_DISTANCE=25000
GENOME="mm10"

#### usage ####
usage() {
	echo Program: "ibed2results (find interacting regions from ibed files)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: ibed2results -i <file> [OPTIONS]"
	echo "Options:"
    echo " -i <file>   [promoter capture HiC interaction file(s) in iBED format]"
    echo "             [chr_bait start_bait end_bait id_bait chr_other start_other end_other id_other N_reads score]"
    echo "             [if multiple separate them by a comma]"
    echo "[OPTIONS]"
    echo " -d <int>    [distance to merge closesly spaced interactions (default: 25000)]"
    echo " -g <string> [genome (default: mm10)]"
    echo " -e <file>   [file containing genomic coordinates of enhancer regions]"
    echo "[OUTPUT]"
    echo "             [stdout: chr_domain start_domain end_domain target_gene log_interaction_score strand interactions_count pValue overlapping_domains domain_class]"
    echo " -h          [help]"
	exit 0
}

#### parse options ####
while getopts i:d:g:e:h ARG; do
    case "$ARG" in
    i) INFILE=$OPTARG;;
    d) MERGE_DISTANCE=$OPTARG;;
    g) GENOME=$OPTARG;;
    a) ENHANCER_FILE=$OPTARG;;
    g) GENOME=$OPTARG;;
    h) HELP=1;;
    esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INFILE" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
TSS_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME -t)
if [ ! -f "$GENOME_FILE" -o ! -f "$TSS_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    usage
fi
>&2 echo "done"

## create temporary BED file if input is from stdin
#TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
TMP="6mGBexbmOQfqcW66OqZqLm91nIKta1tG"
#if [ "$INFILE" == "stdin" ]; then
#    while read LINE; do
#        echo "${LINE}"
#    done > $TMP
#    INFILE=$TMP
#fi

## find interacting regions that are present in atleast two replicates
>&2 echo -n "Find interacting regions that are present in atleast two replicates (`date`).. "
oIFS=$IFS
IFS=","
INFILES=($INFILE)
INFILES_COUNT=${#INFILES[@]}
IFS=$oIFS

for(( i=0; i<$INFILES_COUNT; i++ )); do
    less ${INFILES[$i]} | perl -ane 'if($F[7]=~/^\.$/) { print "$F[4]\t$F[5]\t$F[6]\t$F[3]_rep'${i}'\t$F[9]\t.\n"; }' | grep -v start
done | sortBed -i stdin | mergeBed -i stdin -c 4,5 -o collapse,collapse | perl -ane '
        @ids=split(/\,/,$F[3]); 
        @scores=split(/\,/,$F[4]); 
        %seen=(); 
        foreach(@ids) { $_=~s/\_rep.*//g; $seen{$_}++; } 
        $SIG=0; 
        foreach $id(keys(%seen)) { 
            if($seen{$id}>=2) { 
                $SCORE=0; 
                for($i=0;$i<scalar(@ids);$i++){ 
                    $ids[$i]=~s/\_rep.*//g; 
                    if($ids[$i]=~/^$id$/) { 
                        $SCORE+=$scores[$i]; 
                    }
                } 
                chomp($_); 
                print "$_\t$id\t$SCORE\n"; $SIG=1;
            }
        }
        if($SIG==0) { chomp($_); print "$_\tNA\tNA\n"; }' | sort -k 6,6 > ${TMP}.txt
>&2 echo done

>&2 echo "Organize robust set of interacting regions (`date`).. "
cat <(echo -e "chr_bait\tstart_bait\tend_bait\tid_bait\tchr_interaction\tstart_interaction\tend_interaction\tscore_interaction\tgene_bait") <(intersectBed -a <(join -1 4 -2 4 <(cat $(echo $INFILE | sed -e 's/\,/ /g') | grep -v start | perl -ane 'if($F[7]=~/^\.$/) { print $_; }' | cut -f 1-4 | sort -k 4,4 | uniq) <(grep -wv NA ${TMP}.txt | cut -f 1-3,6,7) | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[0]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\n";' | sortBed -i stdin) -b <(grep -w protein_coding ${TSS_FILE}) -wo | cut -f 1-8,12 | sort -k 1,1 -k 2n,2 -k 3n,3 -k 4,4 -k 5,5 -k 6n,6 -k 7n,7 -k 8g,8 -k 9,9 | uniq) > ${TMP}.ibed
>&2 echo done

>&2 echo "Annotate enhancers with interacting gene (`date`).. "
closestBed -a <(less ${ENHANCER_FILE} | cut -f 1-6 | grep -v start | sortBed -i stdin) -b <(less ${TMP}.ibed | perl -ane 'if($F[0]=~/^$F[4]$/) { print $_; }' | cut -f 5- | grep -v start | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[0]_$F[1]_$F[2]_$F[3]_$F[4]"; foreach(@F[3..scalar(@F)-1]) { print "\t$_"; } print "\n";' | sortBed -i stdin | uniq) -d -t all | sort -k 1,1 -k 2n,2 -k 3n,3 -k 4,4 -k 11rg,11 | perl -ane 'if($F[11]!~/^$/ && $F[11]!~/^\.$/ && $F[scalar(@F)-1]<10000) { print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[10]\t.\t$F[11]\t$F[9]\t".$F[scalar(@F)-1]."\tHiC\n"; } else { print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[10]\t.\t$F[11]\t$F[9]\t".$F[scalar(@F)-1]."\tnonHiC\n"; }' | bedtools groupby -i stdin -g 1-4 -c 5,7,10 -o collapse,collapse,distinct
>&2 echo done
exit

## remove temporary file, if exists
rm ${TMP}.txt
rm ${TMP}.ibed
