#!/bin/bash
#PBS -l nodes=1:ppn=4

MIN_REPLICATES=2 ## IMP PARAM
WINDOW_SIZE=10000 ## IMP PARAM
STRETCH_LEN=10 ## IMP PARAM
MIN_HIC_INTER=2 ## IMP PARAM
OUTDIR="."
GENOME="mm10"

#### usage ####
usage() {
	echo Program: "ibed2results (find interacting regions from ibed files)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: ibed2results -i <file> [OPTIONS]"
	echo "Options:"
    echo " -i <file>   [promoter capture HiC interaction file(s) in iBED format]"
    echo "             [chr_bait start_bait end_bait id_bait chr_other start_other end_other id_other N_reads score]"
    echo "             [if multiple separate them by a comma]"
    echo "[OPTIONS]"
    echo " -o <dir>    [output directory (default: .)]"
    echo " -n <string> [name of the output files]"
    echo " -g <string> [genome (default: mm10)]"
    echo " -e <file>   [file containing genomic coordinates of enhancer regions]"
    echo " -c <file>   [file containing genomic coordinates of CTCF peaks]"
    echo "             [used to annotate loops in .ibed file]"
    echo " -t <file>   [file containing genomic coordinates of RNAPII or H3K27ac (TXN) peaks]"
    echo "             [used to annotate loops in .ibed file]"
    echo "[OUTPUT]"
    echo "             [filename.ibed, filename.domains AND filename.enhancers]"
    echo "[NOTE]"
    echo "             [score is the sum of all unique interaction (loops) scores with an enhancers]"
    echo " -h          [help]"
	exit 0
}

#### parse options ####
while getopts i:o:n:g:e:c:t:h ARG; do
    case "$ARG" in
    i) INFILE=$OPTARG;;
    o) OUTDIR=$OPTARG;;
    n) FILENAME=$OPTARG;;
    g) GENOME=$OPTARG;;
    e) ENHANCER_FILE=$OPTARG;;
    g) GENOME=$OPTARG;;
    c) CTCF_FILE=$OPTARG;;
    t) TXN_FILE=$OPTARG;;
    h) HELP=1;;
    esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INFILE" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
>&2 echo
>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
TSS_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME -t)
if [ ! -f "$GENOME_FILE" -o ! -f "$TSS_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    usage
fi
>&2 echo "done"

## create temporary BED file if input is from stdin
mkdir -p ${OUTDIR}
if [ -z "$FILENAME" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    #TMP="6mGBexbmOQfqcW66OqZqLm91nIKta1tG"
else
    TMP=${FILENAME}
fi

## identify regions in the genome whose interaction with a bait is observed in at least 2 replicates
>&2 echo -n "Identify regions in the genome whose interaction with a bait is observed in at least ${MIN_REPLICATES} replicates (`date`).. "
oIFS=$IFS
IFS=","
INFILES=($INFILE)
INFILES_COUNT=${#INFILES[@]}
IFS=$oIFS

for(( i=0; i<$INFILES_COUNT; i++ )); do
    less ${INFILES[$i]} | perl -ane 'if($F[7]=~/^\.$/) { print "$F[4]\t$F[5]\t$F[6]\t$F[3]_rep'${i}'\t$F[9]\t.\n"; }' | grep -v start
done | sortBed -i stdin | mergeBed -i stdin -c 4,5 -o collapse,collapse | perl -ane '
        @ids=split(/\,/,$F[3]); 
        @scores=split(/\,/,$F[4]); 
        %seen=(); 
        foreach(@ids) { $_=~s/\_rep.*//g; $seen{$_}++; } 
        $SIG=0; 
        foreach $id(keys(%seen)) { 
            if($seen{$id}>='${MIN_REPLICATES}') { 
                $SCORE=0; 
                for($i=0;$i<scalar(@ids);$i++){ 
                    $ids[$i]=~s/\_rep.*//g; 
                    if($ids[$i]=~/^$id$/) { 
                        $SCORE+=$scores[$i]; 
                    }
                }
                $SCORE=sprintf("%0.2f", $SCORE/$seen{$id});
                chomp($_); 
                print "$_\t$id\t$SCORE\n"; $SIG=1;
            }
        }
        if($SIG==0) { chomp($_); print "$_\tNA\tNA\n"; }' | sort -k 6,6 > $OUTDIR/${TMP}
>&2 echo done
>&2 echo

## annotate reproducible set of interacting regions with their target gene information
>&2 echo -n "Annotate reproducible set of interacting regions with their target gene information (`date`).. "
cat <(echo -e "chr_bait\tstart_bait\tend_bait\tid_bait\tchr_interaction\tstart_interaction\tend_interaction\tscore_interaction\tgene_bait") <(intersectBed -a <(join -1 4 -2 4 <(cat $(echo $INFILE | sed -e 's/\,/ /g') | grep -v start | perl -ane 'if($F[7]=~/^\.$/) { print $_; }' | cut -f 1-4 | sort -k 4,4 | uniq) <(grep -wv NA $OUTDIR/${TMP} | cut -f 1-3,6,7) | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[0]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\n";' | sortBed -i stdin) -b <(grep -w protein_coding ${TSS_FILE}) -wo | cut -f 1-8,12 | sort -k 1,1 -k 2n,2 -k 3n,3 -k 4,4 -k 5,5 -k 6n,6 -k 7n,7 -k 8g,8 -k 9,9 | uniq | perl -ane 'if($F[0]=~/^$F[4]$/) { print $_; }') > $OUTDIR/${TMP}.ibed
>&2 echo done
>&2 echo "Created output file $OUTDIR/${TMP}.ibed (`date`)"
>&2 echo

## annotate loops using CTCF file
if [ -s "${CTCF_FILE}" ]; then
    >&2 echo -n "Annotate loops using CTCF file (`date`).. "
    echo -e "$(grep start $OUTDIR/${TMP}.ibed)\tloop_class_CTCF" > ${TMP}.tmp
    paste <(grep -v start $OUTDIR/${TMP}.ibed) <(intersectBed -a <(grep -v start $OUTDIR/${TMP}.ibed | cut -f 1-3) -b <(tabEdit -i ${CTCF_FILE} -D) -c | perl -ane 'chomp($_); $class="non-ctcf"; if($F[3]>0) { $class="ctcf"; } print "$class\n";') <(intersectBed -a <(grep -v start $OUTDIR/${TMP}.ibed | cut -f 5-7) -b <(tabEdit -i ${CTCF_FILE} -D) -c | perl -ane 'chomp($_); $class="non-ctcf"; if($F[3]>0) { $class="ctcf"; } print "$class\n";') | perl -ane 'foreach(@F[0..scalar(@F)-3]) { print "$_\t"; } print "$F[scalar(@F)-2]"."_"."$F[scalar(@F)-1]\n";' >> ${TMP}.tmp
    mv ${TMP}.tmp $OUTDIR/${TMP}.ibed
    >&2 echo done
fi

## annotate loops using TXN file
if [ -s "${TXN_FILE}" ]; then
    >&2 echo -n "Annotate loops using TXN file (`date`).. "
    echo -e "$(grep start $OUTDIR/${TMP}.ibed)\tloop_class_TXN" > ${TMP}.tmp
    paste <(grep -v start $OUTDIR/${TMP}.ibed) <(intersectBed -a <(grep -v start $OUTDIR/${TMP}.ibed | cut -f 1-3) -b <(tabEdit -i ${TXN_FILE} -D) -c | perl -ane 'chomp($_); $class="non-txn"; if($F[3]>0) { $class="txn"; } print "$class\n";') <(intersectBed -a <(grep -v start $OUTDIR/${TMP}.ibed | cut -f 5-7) -b <(tabEdit -i ${TXN_FILE} -D) -c | perl -ane 'chomp($_); $class="non-txn"; if($F[3]>0) { $class="txn"; } print "$class\n";') | perl -ane 'foreach(@F[0..scalar(@F)-3]) { print "$_\t"; } print "$F[scalar(@F)-2]"."_"."$F[scalar(@F)-1]\n";' >> ${TMP}.tmp
    mv ${TMP}.tmp $OUTDIR/${TMP}.ibed
    >&2 echo done
fi

## determine loop length
>&2 echo -n "Determine loop length (`date`).. "
cat $OUTDIR/${TMP}.ibed | perl -ane 'chomp($_); if($_=~/start/) { print "$_\tloop_length\n"; } else { $bait=($F[1]+$F[2])/2; $interaction=($F[5]+$F[6])/2; $len=sprintf("%0.0f", abs($bait-$interaction)); print "$_\t$len\n"; }' > ${TMP}.tmp
mv ${TMP}.tmp $OUTDIR/${TMP}.ibed
>&2 echo done

## identify consecutive set of regions targeting the same gene as regulatory domains (`date`).. "
>&2 echo -n "Identify consecutive set of regions targeting the same gene as regulatory domains (`date`).. "
cat <(echo -e "chr_domain\tstart_start\tend_domain\ttarget_genes\ttotal_interaction_score\tstrand\ttarget_genes_count") <(grep -v start $OUTDIR/${TMP}.ibed | cut -f 5- | sortBed -i stdin | groupBy -i stdin -g 5 -c 1,2,3,4,5 -o distinct,collapse,collapse,sum,distinct | perl -ane '$F[2]=~s/\,.*//g; $F[3]=~s/^.*\,//g; print "$F[1]\t$F[2]\t$F[3]\t$F[5]\t$F[4]\t.\n";' | mergeBed -i stdin -c 4,5,6,4 -o distinct,sum,distinct,count_distinct) > $OUTDIR/${TMP}.domains
>&2 echo done
>&2 echo "Created output file $OUTDIR/${TMP}.domains (`date`)"
>&2 echo

if [ -s ${ENHANCER_FILE} ]; then
    ## link enhancer to target gene if it is on the same chromosome as target gene AND within 10000 bp to the region interacting with bait/target gene
    >&2 echo -n "Link enhancer to target gene if it is on the same chromosome as target gene AND within ${WINDOW_SIZE} bp to the region interacting with bait/target gene (`date`).. "
    closestBed -a <(less ${ENHANCER_FILE} | cut -f 1-6 | grep -v start | sortBed -i stdin) -b <(less $OUTDIR/${TMP}.ibed | perl -ane 'if($F[0]=~/^$F[4]$/) { print $_; }' | cut -f 4- | grep -v start | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[1]_$F[2]_$F[3]_$F[4]#$F[0]"; foreach(@F[4..scalar(@F)-1]) { print "\t$_"; } print "\n";' | sortBed -i stdin | uniq) -d -t all | sort -k 1,1 -k 2n,2 -k 3n,3 -k 4,4 -k 11rg,11 | perl -ane '
        if($F[11]!~/^$/ && $F[11]!~/^\.$/ && $F[scalar(@F)-1]<'${WINDOW_SIZE}') {
            print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[10]\t.\t$F[11]\t$F[9]\t".$F[scalar(@F)-1]."\tHiC\n";
        }
        else {
            print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[10]\t.\t$F[11]\t$F[9]\t".$F[scalar(@F)-1]."\tnonHiC\n"; 
        }' > $OUTDIR/${TMP}.raw

    ## identify distance to the hic interacting gene
    join -1 7 -2 2 <(less $OUTDIR/${TMP}.raw | sort -k 7,7) <(intersectBed -a <(grep -w protein_coding ${TSS_FILE}) -b <(less $OUTDIR/${TMP}.ibed | grep -v start | cut -f 1-4 | sort | uniq) -u | bed2longestRegion -i stdin | cut -f 2,4 | sort -k 2,2) | perl -ane '$dist=abs($F[2]-$F[scalar(@F)-1]); print "$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[5]\t$F[6]\t$F[0]\t$dist\t$F[7]\t$F[8]\t$F[9]\n";' | sortBed -i stdin > ${TMP}.tmp
    mv ${TMP}.tmp $OUTDIR/${TMP}.raw

    ## identify distance to the closest gene
    cat <(echo -e "chr_dhs\tstart_dhs\tend_dhs\tname_dhs\tinteraction_score\tstrand\thic_gene\tdist_to_hic_gene_tss\tloop_info\tdist_to_interacting_region\tinteraction_class\tclosest_gene\tdist_to_closest_gene_tss") <(closestBed -a $OUTDIR/${TMP}.raw -b <(grep -w protein_coding ${TSS_FILE} | cut -f 1-6 | sortBed -i stdin) -d -t first | cut -f 1-11,15,18) > ${TMP}.tmp
    mv ${TMP}.tmp $OUTDIR/${TMP}.raw
    >&2 echo done

    ## find all 10 or more consecutive stretches of enhancers linked to the same target gene. If 2 or more interactions in this stretch are supported by pcHiC. Mark all the remaining non-pcHiC supported enhancers as HiC_neighbor and link them to the target gene)
    >&2 echo -n "Find all ${STRETCH_LEN} or more consecutive stretches of enhancers linked to the same target gene. If ${MIN_HIC_INTER} or more interactions in this stretch are supported by pcHiC. Mark all the remaining non-pcHiC supported enhancers as HiC_neighbor and link them to the target gene (`date`).. "
    join -1 4 -2 1 -a 1 <(sort -k 4,4 $OUTDIR/${TMP}.raw | grep -v start) <(grep -v start $OUTDIR/${TMP}.raw | bedtools groupby -i stdin -g 1-4 -c 7,11 -o distinct,distinct 2>/dev/null | groupBy -i stdin -g 5 -c 4,4,6 -o distinct,count_distinct,collapse | sort -k 3rn,3 | perl -ane '@t=split(/\,/, $F[3]); $sig=0; foreach(@t) { if($_=~/^HiC$/) { $sig++; } } if($sig>='${MIN_HIC_INTER}' && $F[2]>'${STRETCH_LEN}') { print $_; }' | cut -f 2 | sed -E 's/\,/\n/g' | sort | perl -ane 'chomp($_); print "$_\tHiC_neighbor\n";')  | perl -ane '
        if($F[10]=~/nonHiC/ && $F[13]=~/HiC_neighbor/) {
            $F[10]="HiC_neighbor";
        }
        if($F[4]=~/^\.$/) { $F[4]=0; $F[6]="NA"; }
        print "$F[1]\t$F[2]\t$F[3]\t$F[0]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\t$F[8]\t$F[9]\t$F[10]\t$F[11]\t$F[12]\n";' | perl -ane 'print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { print "\t$_"; } print "\n";' | bedtools groupby -i stdin -g 1-4 -c 5,6,7,8,9,11,12,13 -o collapse,distinct,collapse,collapse,collapse,distinct,distinct,distinct 2>/dev/null | perl -ane '%seen=(); @bait=split(/\,/,$F[8]); @score=split(/\,/,$F[4]); $score=0; for($i=0; $i<scalar(@bait); $i++) { if(!$seen{$bait[$i]}) { $score+=$score[$i]; $seen{$bait[$i]}=1; } } $F[4]=$score; print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { print "\t$_"; } print "\n";' | sort -k 1,1 -k 2n,2 -k 3n,3 -k 4,4 > $OUTDIR/${TMP}.enhancers

    cat <(echo -e "chr_dhs\tstart_dhs\tend_dhs\tname_dhs\tinteraction_score\tstrand\thic_gene\tdist_to_hic_gene_tss\tloop_info\tinteraction_class\tclosest_gene\tdist_to_closest_gene_tss\ttarget_gene\tdist_to_target_gene_tss") <(cat $OUTDIR/${TMP}.enhancers | perl -ane 'if($F[9]=~/^HiC/) { chomp($_); print "$_\t$F[6]\t$F[7]\n"; } else { chomp($_); print "$_\t$F[10]\t$F[11]\n"; }') > ${TMP}.tmp
    mv ${TMP}.tmp $OUTDIR/${TMP}.enhancers
    
    >&2 echo done
    >&2 echo "Created output file $OUTDIR/${TMP}.enhancers (`date`)"
    >&2 echo
fi

## remove temporary file, if exists
if [ -s $OUTDIR/${TMP} ]; then
    rm $OUTDIR/${TMP}
fi

###########################
## miscellaneous code
###########################
## Approach-2
#GENES=""
#for GENE in $(grep -w HiC $OUTDIR/${TMP} | cut -f 7 | sort | uniq); do
#    N=$(sed '/\b'${GENE}'\b/,$!d;H;/\b'${GENE}'\b/!d;s/.*//;x;s/\n//' $OUTDIR/${TMP}.enhancers | cut -f 7 | sort | uniq | wc -l);
#    if [ "${N}" -eq 1 ]; then
#        GENES="$GENES,${GENE}"
#    fi
#done
#echo "${GENES},"
#cat $OUTDIR/${TMP} | perl -ane '$genes="'${GENES}'"; if($genes=~/,$F[6],/ & $F[9]=~/nonHiC/) { $F[9]="HiC_neighbor"; } print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { print "\t$_"; } print "\n";' | bedtools groupby -i stdin -g 1-4 -c 5,7,10 -o mean,collapse,distinct 2>/dev/null | perl -ane 'if($F[6]=~/nonHiC/) { $F[6]="nonHiC"; } print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\t.\t$F[5]\t$F[6]\n";'
