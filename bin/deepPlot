#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm9";
PLOTREGION="reference-point"
FLANKREGION=1000
BINSIZE=10
SCALE=1
SORT_REGIONS="keep"
SORT_USING="mean"
PLOTTITLE="deepPlot"
AVERAGE_TYPE="mean"
PLOT_TYPE="se"
PROCESSORS=1
PLOTBYREGION=1
MIN_N_CLASS=1

#### usage ####
usage() {
	echo Program: "deepPlot (plot signal profiles for input genomic regions)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: deepPlot -i <file | stdin> -j <dir> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input file having regions of interest in BED format]"
    echo "             [if multiple, separate them by a comma]"
    echo "             [FORMAT: chr start end name score strand class (optional)]"
    echo "             [NOTE: class information is required, if signal profile needs to be plotted per class]"
	echo " -j <dir>    [input directory containing bigWig files]"
    echo "             [if multiple seperate them by a comma]"
    echo " -o <dir>    [output directory to store results]"
    echo "[OPTIONS: genomic region file]"
    echo " -c          [plot by class]"
    echo " -C <int>    [randomly split input file to define given number of classes]"
    echo " -B <int>    [class should atleast have given number of elements (default: 1)]"
    echo "[OPTIONS: bigWig file(s)]"
    echo " -f <string> [filter in bigWig files matching identifiers eg. wt or gmp]"
    echo "             [if multiple seperate them by a comma]"
    echo " -d <string> [filter out bigWig files matching identifiers eg. wt or gmp]"
    echo "             [if multiple seperate them by a comma]"
    echo "[OPTIONS: computeMatrix]"
    echo " -e <string> [plot format (scale-regions or reference-point; default: reference-point)]"
    echo " -l <int>    [flanking region size (default: 1000)]"
    echo " -M <int>    [size of the bin, must be integer (default: 30)]"
    echo " -k          [skip zeros]"
    echo " -n <int>    [skip regions having read counts lower than the input]"
    echo " -N <int>    [skip regions having read counts more than the input]"
    echo " -s <int>    [scale, if set, all values are multiplied by this number (default: 1)]"
    echo " -a <string> [sort regions (default: keep)]"
    echo "             [descend, ascend, no, keep]"
    echo " -A <string> [sort using (default: mean)]"
    echo "             [mean, median, max, min, sum, region_length]"
    echo "             -- reference-point --"
    echo " -T <string> [The reference point of the regions to plot (defaut: TSS)]"
    echo "             [TSS, TES or center]"
    echo "             -- scale-regions --"
    echo " -5 <int>    [number of unscaled bases at 5' end]" 
    echo " -3 <int>    [number of unscaled bases at 3' end]"
    echo "[OPTIONS: plotProfile OR plotHeatmap]"
    echo " -p          [one plot for each input region (default)]"
    echo " -P          [one plot for each bigWig file]"
    echo " -t <string> [name of the output histone profile plot (default: deepPlot)]"
    echo " -q <int>    [K-means or HC number of clusters]"
    echo " -Y <string> [average type (default: mean)]"
    echo "             [mean, median, min, max, sum, std]"
    echo " -E <string> [plot type (default: se)]"
    echo "             [lines, fill, se, std, overlapped_lines, heatmap]"
    echo " -R <string> [input region(s) labels]"
    echo "             [if multiple, separate them by a comma]"
    echo " -S <string> [input bigWig file(s) label]"
    echo "             [if multiple, separate them by a comma]"
    echo "             [if sample names are not unique, an average will be plotted]"
    echo "             [useful to plot mean of replicates]"
    echo " -y <string> [y-axis label]"
    echo " -v <int>    [y-axis minimum value]"
    echo "             [if multiple, separate them by a comma]"
    echo " -V <int>    [y-axis maximum value]"
    echo "             [if multiple, separate them by a comma]"
    echo " -G <int>    [plot height in cm (default: 7)]"
    echo " -W <int>    [plot width in cm (default: 11)]"
    echo "[OPTIONS: plotProfile]"
    echo " -L <string> [colors (name or hex string)]"
    echo "             [if multiple, separate them by a comma]"
    echo "[OPTIONS: plotHeatmap]"
    echo " -m <string> [interpolation method (default: auto)]"
    echo "             [nearest, bilinear, bicubic, gaussian]"
    echo " -r <string> [color of the heatmap (default: RdYlBu)]"
    echo " -Q <int>    [The alpha channel (transparency) (default: 1)]"
    echo "             [any value between 0 and 1]"
    echo " -z <int>    [z-axis minimum value]"
    echo " -Z <int>    [Z-axis maximum value]"
    echo "[OPTIONS: misc]"
    echo " -F          [plot profile same yscale in each plot (default: heatmap)]"
    echo " -I          [plot profile different yscale in each plot (default: heatmap)]"
    echo " -x          [strand-specific coverage calculation]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -X <int>    [number of processors to use (default: 1)"
    echo " -U          [overwrite deepToolsMatrix file]"
    echo " -D          [copy bigwig file to current working directory for faster processing]"
    echo " -O          [save the signal values at input regions (multiBigwigSummary)]"
    echo "             [<plot title>_multiBigwigSummary.bedSignal]"
    echo " -H          [plot correlation between ChIP-seq signal of input samples as a heatmap (multiBigwigSummary) (.npz & .png)]"
    echo "             [<plot title>_multiBigwigSummary.binSignal]"
    echo " -K          [order bigWig files by given keywords (separated by a comma)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:o:cC:B:f:d:e:l:M:kn:N:s:a:A:T:5:3:pPt:q:Y:E:R:S:y:v:V:G:W:L:m:r:Q:z:Z:FIxg:X:UDOHK:h ARG; do
	case "$ARG" in
		i) REGIONFILE=$OPTARG;;
		j) BWDIR=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        c) CLASS_SPLIT=1;;
        C) RANDOM_SPLIT=$OPTARG;;
        C) MIN_N_CLASS=$OPTARG;;
        f) FILTER_MATCH=$OPTARG;;
        d) FILTER_NOMATCH=$OPTARG;;
        e) PLOTREGION=$OPTARG;;
        l) FLANKREGION=$OPTARG;;
        M) BINSIZE=$OPTARG;;
        k) SKIPZEROS=1;;
        n) SKIP_MIN_COUNT=$OPTARG;;
        N) SKIP_MAX_COUNT=$OPTARG;;
        s) SCALE=$OPTARG;;
        a) SORT_REGIONS=$OPTARG;;
        A) SORT_USING=$OPTARG;;
        T) REFERENCE_POINT=$OPTARG;;
        5) NO_BASES_UNSCALED_UP=$OPTARG;;
        3) NO_BASES_UNSCALED_DOWN=$OPTARG;;
        p) PLOTBYREGION=1;;
        P) PLOTBYBWFILE=1;;
        t) PLOTTITLE=$OPTARG;;
        q) KMEANS=$OPTARG;;
        Y) AVERAGE_TYPE=$OPTARG;;
        E) PLOT_TYPE=$OPTARG;;
        R) REGION_LABEL=$OPTARG;;
        S) SAMPLE_LABEL=$OPTARG;;
        y) YAXIS_LABEL=$OPTARG;;
        v) YAXIS_MIN=$OPTARG;;
        V) YAXIS_MAX=$OPTARG;;
        G) PLOT_HEIGHT=$OPTARG;;
        W) PLOT_WIDTH=$OPTARG;;
        L) PLOT_COLOR=$OPTARG;;
        m) INTERPOLATION_METHOD=$OPTARG;;
        r) HEATMAP_COLOR=$OPTARG;;
        Q) ALPHA=$OPTARG;;
        z) ZAXIS_MIN=$OPTARG;;
        Z) ZAXIS_MAX=$OPTARG;;
        F) PLOT_PROFILE=1;;
        I) PLOT_PROFILE_DIFF_SCALE=1;;
        x) SS=1;;
        g) GENOME=$OPTARG;;
        X) PROCESSORS=$OPTARG;;
        U) OVERWRITE=1;;
        D) COPYBW=1;;
        O) OUT_DATA_FILE=1;;
        H) HEATMAP_CLUSTERING=1;;
        K) ORDER_BIGWIG=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$REGIONFILE" -o -z "$BWDIR" -o -z "$OUTDIR" -o "$HELP" ]; then
	usage
fi

echo -n "Create directory structure... "
mkdir -p $OUTDIR
echo "done"

## strand-specific analysis (ngsPlot)
if [ ! -z "$SS" ]; then
    if [ "$REGIONFILE" == "stdin" ]; then
        while read LINE; do echo -e "${LINE}"; done > $OUTDIR/REGIONS_INTEREST.bed
        REGIONFILE="$OUTDIR/REGIONS_INTEREST.bed"
    else
        scp $REGIONFILE $OUTDIR/REGIONS_INTEREST.bed
        REGIONFILE="$OUTDIR/REGIONS_INTEREST.bed"
    fi

    ## format ngsPlot arguments
    ARG=""
    if [ ! -z "$FILTER_MATCH" ]; then
        ARG="$ARG -f $FILTER_MATCH"
    fi
    if [ ! -z "$FILTER_NOMATCH" ]; then
        ARG="$ARG -d $FILTER_NOMATCH"
    fi
    if [ ! -z "$HEATMAP_COLOR" ]; then
        ARG="$ARG -c $HEATMAP_COLOR"
    fi
    if [ -z "$PLOTTITLE" ]; then
        PLOTTITLE=NGSPLOT
    fi

    ## reformat input file, if scale-regions
    if [ "$PLOTREGION" == "scale-regions" ]; then
        TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
        zless $OUTDIR/REGIONS_INTEREST.bed | cut -f 4,7 > $OUTDIR/REGIONS_INTEREST.bed.${TMP}
        mv $OUTDIR/REGIONS_INTEREST.bed.${TMP} $OUTDIR/REGIONS_INTEREST.bed
        ARG="$ARG -e genebody"
    fi

    NGSPLOT_TITLE_SENSE=$PLOTTITLE"_sense"
    NGSPLOT_TITLE_ANTISENSE=$PLOTTITLE"_antisense"

    if [ ! -z "$CLASS_SPLIT" ]; then
        nfrDynAna2Matrix2SortedHeatmap -i $REGIONFILE -k $BWDIR -o $OUTDIR -g $GENOME -p $PROCESSORS -w $FLANKREGION -T $NGSPLOT_TITLE_SENSE -r same $ARG -M 3
        nfrDynAna2Matrix2SortedHeatmap -i $REGIONFILE -k $BWDIR -o $OUTDIR -g $GENOME -p $PROCESSORS -w $FLANKREGION -T $NGSPLOT_TITLE_ANTISENSE -r opposite $ARG -M 3
    elif [ ! -z "$RANDOM_SPLIT" ]; then
        nfrDynAna2Matrix2SortedHeatmap -i $REGIONFILE -k $BWDIR -o $OUTDIR -g $GENOME -p $PROCESSORS -w $FLANKREGION -T $NGSPLOT_TITLE_SENSE -r same $ARG -u $RANDOM_SPLIT -M 3
        nfrDynAna2Matrix2SortedHeatmap -i $REGIONFILE -k $BWDIR -o $OUTDIR -g $GENOME -p $PROCESSORS -w $FLANKREGION -T $NGSPLOT_TITLE_ANTISENSE -r opposite $ARG -u $RANDOM_SPLIT -M 3
    else
        nfrDynAna2Matrix2SortedHeatmap -i $REGIONFILE -k $BWDIR -o $OUTDIR -g $GENOME -p $PROCESSORS -w $FLANKREGION -T $NGSPLOT_TITLE_SENSE -r same $ARG -x -M 3
        nfrDynAna2Matrix2SortedHeatmap -i $REGIONFILE -k $BWDIR -o $OUTDIR -g $GENOME -p $PROCESSORS -w $FLANKREGION -T $NGSPLOT_TITLE_ANTISENSE -r opposite $ARG -x -M 3
    fi
else
    echo
    echo -n "Organize input genomic region files (`date`).. " >&2
    if [ "$(echo $REGIONFILE | grep "," | wc -l)" -gt 0 ]; then
        INPUTFILE=$(echo $REGIONFILE | sed 's/\,/ /g')
    else
        if [ "$REGIONFILE" == "stdin" ]; then
            while read LINE; do echo -e "${LINE}"; done > $OUTDIR/REGIONS_INTEREST.bed
            REGIONFILE="$OUTDIR/REGIONS_INTEREST.bed"
        else
            scp $REGIONFILE $OUTDIR/REGIONS_INTEREST.bed
            REGIONFILE="$OUTDIR/REGIONS_INTEREST.bed"
        fi

        if [ ! -z "$RANDOM_SPLIT" ]; then
            LINES=$(cat $REGIONFILE | wc -l | perl -ane 'use POSIX; printf("%0.0f", ceil($_/'$RANDOM_SPLIT'));')
            SPLIT_TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
            cat $REGIONFILE | split -l $LINES --additional-suffix $SPLIT_TMP
            i=0
            for file in $(ls *$SPLIT_TMP); do
                cat $file | perl -ane '$class="CLASS_'$i'"; print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[5]\t$class\n";';
                i=$((i+1))
            done > $REGIONFILE.$SPLIT_TMP
            mv $REGIONFILE.$SPLIT_TMP $OUTDIR/REGIONS_INTEREST.bed
            REGIONFILE="$OUTDIR/REGIONS_INTEREST.bed"
            rm *$SPLIT_TMP
            CLASS_SPLIT=1
        fi

        INPUTFILE=$REGIONFILE
        REGION_LABEL_AUTO=""
        if [ ! -z "$CLASS_SPLIT" ]; then
            INPUTFILE=""
            i=0
            CLASS_TO_ANA=($(less $REGIONFILE | cut -f 7 | sort | uniq -c | sed -E 's/^\s+//g' | perl -ane 'if($F[0]>'${MIN_N_CLASS}') { print "$F[1]\t"; }'));
            for CLASS in "${CLASS_TO_ANA[@]}"; do
                perl -ane 'if($F[6]=~/^'$CLASS'$/) { $F[6]=~s/\,/\_/g; print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { print "\t$_"; } print "\n"; }' $REGIONFILE > $REGIONFILE.$i
                INPUTFILE="$INPUTFILE $REGIONFILE.$i"
                i=$((i+1))
                REGION_LABEL_AUTO="$REGION_LABEL_AUTO,$CLASS"
            done
            if [ -z "$REGION_LABEL" ]; then
                REGION_LABEL_AUTO=$(echo $REGION_LABEL_AUTO | sed -E 's/^\,//g')
                REGION_LABEL=$REGION_LABEL_AUTO
            fi
        fi
    fi

    INPUTFILES=($INPUTFILE)
    echo "done ($INPUTFILE)" >&2

    ## strand-specific analysis (deepPlot)
    #if [ ! -z "$SS" ]; then
    #    oIFS=$IFS
    #    IFS=","
    #    FILTERS_MATCH=($FILTER_MATCH)
    #    FILTERS_NOMATCH=($FILTER_NOMATCH)
    #    BAMDIRS=($BWDIR)
    #    IFS=$oIFS
    #    BAMFILE=""
    #    BWDIR=""
    #    for DIR in "${BAMDIRS[@]}"; do
    #        for file in $DIR/*.bam; do
    #            MATCH_COUNT=0
    #            for (( i=0; i<${#FILTERS_MATCH[@]}; i++ )); do
    #                FOUND=`echo $file | perl -ane '$_=~s/^.*\///g; if($_=~/'${FILTERS_MATCH[$i]}'/) {print "1\n";}else{print "0\n";}'`;
    #                #echo "${FILTERS_MATCH[$i]} $file $FOUND $i"
    #                MATCH_COUNT=$(($MATCH_COUNT + $FOUND))
    #            done
    #            
    #            NOMATCH_COUNT=0
    #            for (( i=0; i<${#FILTERS_NOMATCH[@]}; i++ )); do
    #                FOUND=`echo $file | perl -ane '$_=~s/^.*\///g; if($_=~/'${FILTERS_NOMATCH[$i]}'/) {print "1\n";}else{print "0\n";}'`;
    #                #echo "${FILTERS_NOMATCH[$i]} $file $FOUND $i"
    #                NOMATCH_COUNT=$(($NOMATCH_COUNT + $FOUND))
    #            done
    #            
    #            TITLE=`echo $file | sed 's/^.*\///g;' | sed 's/\..*//g' | perl -ane 'chomp($_); print "$_";'`;
    #            if [ "$MATCH_COUNT" == ${#FILTERS_MATCH[@]} -a "$NOMATCH_COUNT" -eq 0 ]; then
    #                #echo -e "$TITLE\t$file"
    #                BAMFILE="$BAMFILE $file"
    #            fi
    #        done
    #
    #        BAMFILES=($BAMFILE)
    #        for FILE in "${BAMFILES[@]}"; do
    #            echo -n "Make strand-specific bigWig files for $FILE.." >&2
    #            ID=$(echo $FILE | perl -ane '$_=~s/^.+\///g; $_=~s/\..+$//g; print $_;');
    #            mkdir -p "$DIR/strand_specific"
    #            if [ ! -s "$DIR/strand_specific/${ID}_forward.bw" ]; then
    #                bamCoverage -b $FILE -o $DIR/strand_specific/${ID}_forward.bw -of bigwig --normalizeUsing RPKM --numberOfProcessors $PROCESSORS --filterRNAstrand forward
    #            fi
    #
    #            if [ ! -s "$DIR/strand_specific/${ID}_reverse.bw" ]; then
    #                bamCoverage -b $FILE -o $DIR/strand_specific/${ID}_reverse.bw -of bigwig --normalizeUsing RPKM --numberOfProcessors $PROCESSORS --filterRNAstrand reverse
    #            fi
    #            echo "done" >&2
    #        done
    #        BWDIR="$BWDIR,$DIR/strand_specific/"
    #    done
    #    BWDIR=$(echo $BWDIR | sed 's/^\,//')
    #fi
    echo
    echo -n "Organize input bigWig files (`date`).. " >&2
    oIFS=$IFS
    IFS=","
    FILTERS_MATCH=($FILTER_MATCH)
    FILTERS_NOMATCH=($FILTER_NOMATCH)
    BWDIRS=($BWDIR)
    IFS=$oIFS

    BWFILE=""
    for DIR in "${BWDIRS[@]}"; do
        for file in $DIR/*.bw; do
            MATCH_COUNT=0
            for (( i=0; i<${#FILTERS_MATCH[@]}; i++ )); do
                FOUND=`echo $file | perl -ane '$_=~s/^.*\///g; if($_=~/'${FILTERS_MATCH[$i]}'/) {print "1\n";}else{print "0\n";}'`;
                #echo "${FILTERS_MATCH[$i]} $file $FOUND $i"
                MATCH_COUNT=$(($MATCH_COUNT + $FOUND))
            done
            
            NOMATCH_COUNT=0
            for (( i=0; i<${#FILTERS_NOMATCH[@]}; i++ )); do
                FOUND=`echo $file | perl -ane '$_=~s/^.*\///g; if($_=~/'${FILTERS_NOMATCH[$i]}'/) {print "1\n";}else{print "0\n";}'`;
                #echo "${FILTERS_NOMATCH[$i]} $file $FOUND $i"
                NOMATCH_COUNT=$(($NOMATCH_COUNT + $FOUND))
            done
            
            TITLE=`echo $file | sed 's/^.*\///g;' | sed 's/\..*//g' | perl -ane 'chomp($_); print "$_";'`;
            if [ "$MATCH_COUNT" == ${#FILTERS_MATCH[@]} -a "$NOMATCH_COUNT" -eq 0 ]; then
                #echo -e "$TITLE\t$file"
                BWFILE="$BWFILE $file"
            fi
        done
    done
    BWFILES=($BWFILE)

    ## order bigWig files by given keywords
    if [ ! -z "$ORDER_BIGWIG" ]; then
        oIFS=$IFS
        IFS=","
        ORDER_BIGWIGS=($ORDER_BIGWIG)
        IFS=$oIFS
        
        BWFILE_REORDERED=""
        for ORDER in "${ORDER_BIGWIGS[@]}"; do
            for BIGWIGS in "${BWFILES[@]}"; do
                BWFILE_REORDERED="$BWFILE_REORDERED $(echo $BIGWIGS | grep $ORDER)"
            done
        done
        BWFILE=${BWFILE_REORDERED}
    fi
    echo "done ($BWFILE)" >&2

    ## check, if atleast one bigWig file matching the input filter criteria is found
    if [ "${#BWFILES[@]}" -eq 0 ]; then
        echo
        echo "ERROR: no bigWig file matching the input filter criteria found"
        echo
        usage
    fi

    ## copy bigwig files to current working directory for faster processing
    if [ "$COPYBW" ]; then
        echo
        echo -n "Copy bigwig files to current working directory for faster processing (`date`).. " >&2
        BWFILE_NEW=$(echo $BWFILE | perl -ane 'foreach(@F) { $_=~s/^.*\///g; print "./$_ "; }')
        if [ "$(for i in $BWFILE_NEW; do if [ ! -f "$i" ]; then echo "not found"; fi done | wc -l)" -gt 0 ]; then
            scp $BWFILE .
        fi
        BWFILE=$BWFILE_NEW
        echo "done" >&2
    fi

    echo
    echo -n "Compute signal matrix using #region file(s): ${#INPUTFILES[@]}; #bigWig file(s): ${#BWFILES[@]} (`date`).. " >&2

    ## format computeMatrix arguments
    ARG=""
    if [ ! -z "$SKIPZEROS" ]; then
        ARG="$ARG --skipZeros";
    fi
    if [ ! -z "$SKIP_MIN_COUNT" ]; then
        ARG="$ARG --minThreshold $SKIP_MIN_COUNT";
    fi
    if [ ! -z "$SKIP_MAX_COUNT" ]; then
        ARG="$ARG --maxThreshold $SKIP_MAX_COUNT";
    fi
    if [ ! -z "$SCALE" ]; then
        ARG="$ARG --scale $SCALE";
    fi
    if [ ! -z "$REFERENCE_POINT" ]; then
        ARG="$ARG --referencePoint $REFERENCE_POINT";
    fi
    if [ ! -z "$NO_BASES_UNSCALED_UP" ]; then
        ARG="$ARG --unscaled5prime $NO_BASES_UNSCALED_UP";
    fi
    if [ ! -z "$NO_BASES_UNSCALED_DOWN" ]; then
        ARG="$ARG --unscaled3prime $NO_BASES_UNSCALED_DOWN";
    fi

    ## execute computeMatrix
    if [ ! -s "$OUTDIR/$PLOTTITLE.deepToolsMatrix.raw.gz" -o ! -z "$OVERWRITE" ]; then
        computeMatrix $PLOTREGION -S $BWFILE -R $INPUTFILE \
            -out $OUTDIR/$PLOTTITLE.deepToolsMatrix.raw.gz \
            --beforeRegionStartLength $FLANKREGION --afterRegionStartLength $FLANKREGION \
            --sortRegions $SORT_REGIONS --sortUsing $SORT_USING \
            --smartLabels -bs $BINSIZE -p $PROCESSORS $ARG
    fi
    echo "done" >&2

    echo
    echo -n "Make the plots (profile and heatmap) (`date`).. " >&2
    ## format plotProfile OR plotHeatmap arguments
    ARG=""
    if [ ! -z "$KMEANS" ]; then
        ARG="$ARG --kmeans $KMEANS";
    fi
    if [ ! -z "$REGION_LABEL" ]; then
        ARG="$ARG --regionsLabel $(echo $REGION_LABEL | sed 's/\,/ /g')";
    fi
    if [ ! -z "$SAMPLE_LABEL" ]; then
        ## execute deepPlot.R, if sample names are given, and
        ## compute mean if they are not unique
        SAMPLE_LABELS=($(echo $SAMPLE_LABEL | sed 's/\,/ /g'))

        if [ "${#BWFILES[@]}" -eq "${#SAMPLE_LABELS[@]}" ]; then 
            deepPlot.R -i $OUTDIR/$PLOTTITLE.deepToolsMatrix.raw.gz -j $SAMPLE_LABEL -o $OUTDIR/$PLOTTITLE.deepToolsMatrix.gz
        else
            echo
            echo "Please provide sample labels for all input bigWig file(s)"
            usage
        fi

        ARG="$ARG --samplesLabel $(echo $SAMPLE_LABEL | sed 's/\,/\n/g' | uniq | tr '\r\n' ' ')";
    elif [ ! -s "$OUTDIR/$PLOTTITLE.deepToolsMatrix.gz" -o ! -z "$OVERWRITE" ]; then
        scp $OUTDIR/$PLOTTITLE.deepToolsMatrix.raw.gz $OUTDIR/$PLOTTITLE.deepToolsMatrix.gz
    fi

    if [ ! -z "$YAXIS_LABEL" ]; then
        ARG="$ARG --yAxisLabel $YAXIS_LABEL";
    fi
    if [ ! -z "$YAXIS_MIN" ]; then
        YAXIS_MIN=($(echo $YAXIS_MIN | sed 's/\,/ /g'))
        ARG="$ARG --yMin $YAXIS_MIN";
    fi
    if [ ! -z "$YAXIS_MAX" ]; then
        YAXIS_MAX=($(echo $YAXIS_MAX | sed 's/\,/ /g'))
        ARG="$ARG --yMax $YAXIS_MAX";
    fi

    ## format plotProfile arguments
    ARG_PROFILE=""
    if [ ! -z "$PLOT_COLOR" ]; then
        ARG_PROFILE="$ARG_PROFILE --colors $(echo $PLOT_COLOR | sed 's/\,/ /g')";
    #else
    #    ARG_PROFILE="$ARG_PROFILE --colors $(getRColor.R -i ${#BWFILES[@]} -p)"
    fi
    if [ ! -z "$PLOT_HEIGHT" ]; then
        ARG_PROFILE="$ARG_PROFILE --plotHeight $PLOT_HEIGHT";
    fi
    if [ ! -z "$PLOT_WIDTH" ]; then
        ARG_PROFILE="$ARG_PROFILE --plotWidth $PLOT_WIDTH";
    fi
    #if [ ! -z "$OUT_DATA_FILE" ]; then
    #    ARG_PROFILE="$ARG_PROFILE --outFileNameData $OUT_DATA_FILE";
    #fi

    ## format plotHeatmap arguments
    ARG_HEATMAP=""
    if [ ! -z "$INTERPOLATION_METHOD" ]; then
        ARG_HEATMAP="$ARG_HEATMAP --interpolationMethod $INTERPOLATION_METHOD";
    fi
    if [ ! -z "$HEATMAP_COLOR" ]; then
        ARG_HEATMAP="$ARG_HEATMAP --colorMap $HEATMAP_COLOR";
    fi
    if [ ! -z "$ALPHA" ]; then
        ARG_HEATMAP="$ARG_HEATMAP --alpha $ALPHA";
    fi
    if [ ! -z "$ZAXIS_MIN" ]; then
        ARG_HEATMAP="$ARG_HEATMAP --zMin $YAXIS_MIN";
    fi
    if [ ! -z "$ZAXIS_MAX" ]; then
        ARG_HEATMAP="$ARG_HEATMAP --zMax $YAXIS_MIN";
    fi
    if [ ! -z "$PLOT_HEIGHT" ]; then
        ARG_HEATMAP="$ARG_HEATMAP --heatmapHeight $PLOT_HEIGHT";
    fi
    if [ ! -z "$PLOT_WIDTH" ]; then
        ARG_HEATMAP="$ARG_HEATMAP --heatmapWidth $PLOT_WIDTH";
    fi
    #if [ ! -z "$OUT_DATA_FILE" ]; then
    #    ARG_HEATMAP="$ARG_PROFILE --outFileSortedRegions $OUT_DATA_FILE";
    #fi
    ## make the plot
    if [ ! -z "$PLOTBYBWFILE" ]; then
        if [ ! -z "$PLOT_PROFILE" ]; then
            plotProfile -m $OUTDIR/$PLOTTITLE.deepToolsMatrix.gz \
                -o $OUTDIR/$PLOTTITLE.pdf \
                --plotTitle $PLOTTITLE --averageType $AVERAGE_TYPE \
                --plotType $PLOT_TYPE \
                $ARG $ARG_PROFILE
        elif [ ! -z "$PLOT_PROFILE_DIFF_SCALE" ]; then
            deepPlotCustom.R -i $OUTDIR/$PLOTTITLE.deepToolsMatrix.gz -o $OUTDIR/$PLOTTITLE.pdf -j $REGION_LABEL 2>/dev/null 
        else
            plotHeatmap -m $OUTDIR/$PLOTTITLE.deepToolsMatrix.gz \
                -o $OUTDIR/$PLOTTITLE.pdf \
                --plotTitle $PLOTTITLE --averageTypeSummaryPlot $AVERAGE_TYPE \
                --sortRegions $SORT_REGIONS --sortUsing $SORT_USING \
                --plotType $PLOT_TYPE \
                $ARG $ARG_HEATMAP
        fi
    elif [ ! -z "$PLOTBYREGION" ]; then
        if [ ! -z "$PLOT_PROFILE" ]; then
            plotProfile -m $OUTDIR/$PLOTTITLE.deepToolsMatrix.gz \
                -o $OUTDIR/$PLOTTITLE.pdf \
                --plotTitle $PLOTTITLE --averageType $AVERAGE_TYPE \
                --plotType $PLOT_TYPE \
                $ARG $ARG_PROFILE --perGroup
        elif [ ! -z "$PLOT_PROFILE_DIFF_SCALE" ]; then
            deepPlotCustom.R -i $OUTDIR/$PLOTTITLE.deepToolsMatrix.gz -o $OUTDIR/$PLOTTITLE.pdf -j $REGION_LABEL 2>/dev/null 
        else
            plotHeatmap -m $OUTDIR/$PLOTTITLE.deepToolsMatrix.gz \
                -o $OUTDIR/$PLOTTITLE.pdf \
                --plotTitle $PLOTTITLE --averageTypeSummaryPlot $AVERAGE_TYPE \
                --sortRegions $SORT_REGIONS --sortUsing $SORT_USING \
                --plotType $PLOT_TYPE \
                $ARG $ARG_HEATMAP --perGroup
        fi
    fi
    echo "done" >&2

    if [ ! -z "$OUT_DATA_FILE" ]; then
        echo
        echo -n "Export read counts for input regions to $OUTDIR/${PLOTTITLE}_multiBigwigSummary.bedSignal (`date`).. " >&2
        TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

        ## determine unique gene names in the input file
        zless $INPUTFILE | bed2longestRegion -i stdin | perl -ane 'chomp($_); print "$F[0]_$F[1]_$F[2]\t$_\n";' | sort -k 1,1 | perl -ane 'if(!$seen{$F[0]}) { print $_; $seen{$F[0]}=1; }' | cut -f 2- > $OUTDIR/input.$TMP

        multiBigwigSummary BED-file -b $BWFILE --BED $OUTDIR/input.$TMP --outRawCounts $OUTDIR/counts.$TMP -o $OUTDIR/matrix.$TMP --smartLabels -p $PROCESSORS

        echo -e "$(bed2header -i $OUTDIR/input.$TMP -r)\t$(grep '#' $OUTDIR/counts.$TMP | cut -f 4- | sed s/\'//g)" > $OUTDIR/${PLOTTITLE}_multiBigwigSummary.bedSignal
        join -j 1 <(cat $OUTDIR/input.$TMP | perl -ane 'chomp($_); print "$F[0]_$F[1]_$F[2]\t$_\n";' | sort -k 1,1) <(grep -v "#" $OUTDIR/counts.$TMP | perl -ane 'chomp($_); print "$F[0]_$F[1]_$F[2]\t$_\n";' | cut -f 1,5- | sort -k 1,1) | tabEdit -i stdin -t | cut -f 2- >> $OUTDIR/${PLOTTITLE}_multiBigwigSummary.bedSignal
       
        ## remove temporary files
        rm $OUTDIR/input.$TMP
        rm $OUTDIR/counts.$TMP
        rm $OUTDIR/matrix.$TMP
        echo "done" >&2
    fi

    if [ ! -z "$HEATMAP_CLUSTERING" ]; then
        echo
        echo -n "Export read counts for binned genome to $OUTDIR/${PLOTTITLE}_multiBigwigSummary.binSignal (`date`).. ">&2
        if [ "$(initialize_genome -g $GENOME -B)" ]; then
            multiBigwigSummary bins -b $BWFILE --smartLabels -o $OUTDIR/${PLOTTITLE}_multiBigwigSummary.binSignal.npz --outRawCounts $OUTDIR/${PLOTTITLE}_multiBigwigSummary.binSignal --blackListFileName $(initialize_genome -g $GENOME -B) -p $PROCESSORS
        else
            multiBigwigSummary bins -b $BWFILE --smartLabels -o $OUTDIR/${PLOTTITLE}_multiBigwigSummary.binSignalnpz --outRawCounts $OUTDIR/${PLOTTITLE}_multiBigwigSummary.binSignal -p $PROCESSORS
        fi

        echo
        echo -n "Plot correlation between ChIP-seq signal of input samples as a heatmap (`date`).. ">&2
        plotCorrelation -in $OUTDIR/${PLOTTITLE}_multiBigwigSummary.binSignal.npz --corMethod pearson --skipZeros --whatToPlot heatmap --removeOutliers -o $OUTDIR/${PLOTTITLE}_multiBigwigSummary.binSignal.png
        echo "done" >&2
    fi
fi

## delete bigWig files, if copied to current working directory for faster processing
if [ "$COPYBW" ]; then
    rm $BWFILE
fi
exit
