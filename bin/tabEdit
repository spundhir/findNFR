#!/bin/bash
#PBS -l nodes=1:ppn=4

#### usage ####
usage() {
	echo Program: "tabEdit (edit or gather information about a tab delimited file)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: tabEdit -i <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input tab delimited file (can be stdin)]"
    echo " -c          [count number of columns (default)]"
    echo " -r          [remove empty columns]"
    echo " -t          [convert spaces to tab]"
    echo " -m          [convert comma to tab]"
    echo " -n <int>    [reformat file to ensure input number of columns]"
    echo " -f <string> [filter given columns from the input file (comma separated, if multiple)]"
    echo "             [format: 1,5,6 OR 1,5,6,count OR 1-4,count OR all]"
    echo " -F <string> [filter given rows from the input file (comma separated, if multiple)]"
    echo "             [format: 1,5,6 OR 1,5,6,count OR 1-4,count OR all]"
    echo " -d          [extract from file - header]"
    echo " -D          [extract from file - everything except header]"
    echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:crtmn:f:F:dDh ARG; do
    case "$ARG" in
    i) INFILE=$OPTARG;;
    c) COUNT=1;;
    r) REMOVE=1;;
    t) TAB=1;;
    m) COMMA=1;;
    n) NCOL=$OPTARG;;
    f) FILTER_COL=$OPTARG;;
    F) FILTER_ROW=$OPTARG;;
    d) HEADER=1;;
    D) NOHEADER=1;;
    h) HELP=1;;
    esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INFILE" -o "$HELP" ]; then
	usage
fi

## create temporary BED file if input is from stdin
if [ "$INFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo -e "${LINE}"
    done > $TMP 
    #perl -ane 'if($_=~/^#/) { print $_; next; } $line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t+$//g; $line=~s/\s+$//g; print "$line\n";' > $TMP
    INFILE=$TMP
fi

## perform operations on the input file
if [ ! -z "$TAB" ]; then
    zless $INFILE | perl -ane 'if($_=~/^#/) { print $_; next; } $line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t+$//g; $line=~s/\s+$//g; print "$line\n";'
elif [ ! -z "$COMMA" ]; then
    zless $INFILE | perl -an -F'/\,/' -e 'if($_=~/^#/) { print $_; next; } $line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t+$//g; $line=~s/\s+$//g; print "$line\n";'
elif [ ! -z "$NCOL" ]; then
    zless $INFILE | perl -ane 'print $F[0]; if(scalar(@F)<'$NCOL') { foreach(@F[1..scalar(@F)-1]) { print "\t$_"; } $i='$NCOL'-scalar(@F); while($i>0) { print "\tNA"; $i--; } print "\n"; } else { foreach(@F[1..'$((NCOL-1))']) { print "\t$_"; } print "\n"; }'
elif [ ! -z "$REMOVE" ]; then
    #tr -s '\t' < $INFILE
    zless $INFILE | perl -ane '$_=~s/\s+$//g; print "$_\n";'
elif [ ! -z "$FILTER_COL" ]; then
    if [ "$FILTER_COL" == "all" ]; then
        zless $INFILE
    else
        COLS=($(echo $FILTER_COL | tr ',' ' '));
        FILTER_COL=$(for COL in "${COLS[@]}"; do
            if [ "$(echo $COL | perl -ane 'if($_=~/[a-zA-Z]+/) { print 1; } else { print 0;}')" -eq 1 ]; then
                zless $INFILE | head -n 1 | perl -ane 'foreach(@F) { $i++; if($_=~/'${COL}'/) { print "$i,"; } }';
            else
                echo -ne "$COL,"
            fi
        done)
        FILTER_COL=$(echo $FILTER_COL | perl -ane '$_=~s/\,$//g; print $_;')
        zless $INFILE | tabEdit -i stdin -t | cut -f $FILTER_COL
    fi
elif [ ! -z "$FILTER_ROW" ]; then
    if [ "$FILTER_ROW" == "all" ]; then
        zless $INFILE
    else
        ROWS=($(echo $FILTER_ROW | tr ',' ' '));
        FILTER_ROW=$(for ROW in "${ROWS[@]}"; do
            if [ "$(echo $ROW | perl -ane 'if($_=~/[a-zA-Z]+/) { print 1; } else { print 0;}')" -eq 1 ]; then
                echo -ne "$(zless $INFILE | perl -ane '$i++; if($_=~/'${ROW}'/) { print "$i"."p;"; }')"
            else
                echo -ne "${ROW}p;"
            fi
        done)
        FILTER_ROW=$(echo $FILTER_ROW | perl -ane '$_=~s/\;$//g; print $_;')
        zless $INFILE | sed -ne ${FILTER_ROW}
    fi
elif [ ! -z "$HEADER" ]; then
    if [ "$(zgrep start $INFILE | wc -l)" -eq 1 ]; then
        zgrep start $INFILE
    else
        zless $INFILE | bed2header -i stdin -r
    fi
elif [ ! -z "$NOHEADER" ]; then
    if [ "$(zgrep start $INFILE | wc -l)" -eq 1 ]; then
        zgrep -v start $INFILE
    fi
else
    zless $INFILE | perl -an -F'/\t{1}/' -e 'print scalar(@F)."\n";' | sort | uniq -c
fi

## remove temporary file, if exists
if [ ! -z "$TMP" ]; then
    rm $TMP
fi
