#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm9"
AVG=0
REGION="promoter"

#### usage ####
usage() {
	echo Program: "gene2promoter2profile (compute read count profile corresponding to input TSS by binning flanking regions)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2promoter2profile -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input file containing genomic coordinates of TSS in BED format (can be stdin)]"
    echo "             [FORMAT: chr start end name score strand promoter_defined promoter_coordinate antisense_bp sense_bp]"
    echo "             [computed using gene2promoter)]"
    echo " -j <file>   [input mapped reads in BAM format]"
    echo "             [if multiple separate by a comma]"
    echo "             **OR**"
    echo "             [configuration file]"
    echo "             [FORMAT: profile <absolute path to bam file>]"
    echo "[OPTIONS]"
    echo " -c          [analyze for enhancer (default: promoter)]"
    echo " -r <file>   [input BAM file (eg. chd4 ChIP-seq data) to refine DISTANCE (eg. 3' boundary of promoter)]"
    echo "[OPTIONS: bed2expr]"
    echo " -s <float>  [normalize expression by input size factor]"
    echo "             [if multiple, separate them by a comma]"
    echo " -m          [normalize expression by counts per million mapped reads (RPM)]"
    echo " -k          [normalize expression by counts per kilo base per million mapped reads (RPKM)]"
    echo " -d          [remove duplicate reads]"
    echo " -e <int>    [extend 3' end of reads by input number of bases (useful for ChIP-seq data)]"
    echo " -v <int>    [instead of giving expression for each replicate, output only the mean (deafult: 0)]"
    echo "             [assumes that consecutive input files are replicates 1 and 2, respectively]"
    echo " -t          [require same strandedness]"
    echo " -n          [add 1 to all the raw expression counts - useful while taking log]"
    echo " -g <string> [genome (default: mm9)]"
	echo " -h          [help]"
    echo "[NOTE]"
    echo " In case of error: Could not open input BAM files, refer to:"
    echo " https://groups.google.com/forum/#!msg/bedtools-discuss/_LNuoRWHn50/14MaqyzyzXsJ"
    echo " i.e. make sure header of all input bam files is identical"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:c:r:s:mkde:v:tng:h ARG; do
	case "$ARG" in
		i) INPUTBEDFILE=$OPTARG;;
        j) INPUTBAMFILES=$OPTARG;;
        c) REGION=$OPTARG;;
        r) REFINE=$OPTARG;;
        s) INPUTSIZEFACTORS=$OPTARG;; 
        m) CPM=1;;
        k) FPKM=1;;
        d) REMOVE_DUPLICATE=1;;
        e) INPUTEXTENDS=$OPTARG;;
        v) AVG=$OPTARG;;
        t) SAME_STRAND=1;;
        n) ADDONE=1;;
        g) GENOME=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INPUTBEDFILE" -o -z "$INPUTBAMFILES" -o "$HELP" ]; then
	usage
fi

>&2 echo -n "Populating files based on input genome, $GENOME (`date`).."
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE

if [ ! -f "$GENOME_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    usage
fi
>&2 echo "done"

## parse binary input parameters
PARAM_BIN=""
if [ ! -z "$INPUTSIZEFACTORS" ]; then PARAM_BIN="$PARAM_BIN -s $INPUTSIZEFACTORS"; fi
if [ -z "$INPUTSIZEFACTORS" -a ! -z "$CPM" ]; then PARAM_BIN="$PARAM_BIN -m"; fi
if [ -z "$INPUTSIZEFACTORS" -a -z "$CPM" -a ! -z "$FPKM" ]; then PARAM_BIN="$PARAM_BIN -k"; fi
if [ ! -z "$REMOVE_DUPLICATE" ]; then PARAM_BIN="$PARAM_BIN -d"; fi
if [ ! -z "$INPUTEXTENDS" ]; then PARAM_BIN="$PARAM_BIN -e $INPUTEXTENDS"; fi
if [ ! -z "$SAME_STRAND" ]; then PARAM_BIN="$PARAM_BIN -r"; fi
if [ ! -z "$ADDONE" ]; then PARAM_BIN="$PARAM_BIN -n"; fi

## check if input is BAM files or configuration file containing BAM file information
INPUT=$(echo $INPUTBAMFILES | perl -ane '$_=~s/\,.*//g; print $_;')
if [ "$(samtools view -H $INPUT | wc -l)" -le 0 ]; then
    INPUT=$(cat $INPUTBAMFILES | perl -ane '
        if($_=~/^profile/) {
            $file.="$F[1],";
        } END {
            $file=~s/\,$//g;
            print "$file\n";
        }'
    )
    INPUTBAMFILES=$INPUT
fi

if [ -z "$INPUTBAMFILES" ]; then
    echo
    echo "ERROR: Cannot populate input BAM files. Check your configuration file"
    echo
    usage
fi
#echo "bed2expr -i stdin -j $INPUTBAMFILES -g $GENOME -v $AVG $PARAM_BIN"; exit

## create temporary BED file if input is from stdin
if [ "$INPUTBEDFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo -e "${LINE}"
    done | grep -v "start" > $TMP
    INPUTBEDFILE=$TMP
else
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    zless $INPUTBEDFILE | grep -v "start" > $TMP 
    INPUTBEDFILE=$TMP
fi

## populate up and down window length of NFR
if [ "$REGION" == "promoter" ]; then
    WIN_SENSE=50
    WIN_ANTISENSE=100
    WIN_NUCLEOSOME=200
else
    WIN_SENSE=100
    WIN_ANTISENSE=100
    WIN_NUCLEOSOME=200
fi

NCOL=$(zless $INPUTBEDFILE | head -n 1 | perl -ane 'print scalar(@F);')

#echo -e "WIN_ANTISENSE: $WIN_ANTISENSE; WIN_SENSE: $WIN_SENSE"; exit
## refine 3' boundary of promoter
if [ ! -z "$REFINE" ]; then
    >&2 echo -n "Refine 3' boundary of promoter (`date`).. "
    REFINED_3p=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    zless $INPUTBEDFILE | perl -ane 'if($F[9]>450) { print $_; }' | perl -ane 'if($F[5]=~/\-/) { $end=$F[1]-250; $start=$F[1]-$F[9]; } else { $start=$F[1]+250; $end=$F[1]+$F[9]; } print "$F[0]\t$start\t$end\t$F[3]\t$F[4]\t$F[5]\n";' | bed2HighestExprBin -i stdin -j $REFINE -w 200 -s 200 -d -g $GENOME > $REFINED_3p

    zless <(zless $INPUTBEDFILE | perl -ane 'if($F[9]<=450) { print $_; }') <(join -j 4  <(sort -k 4,4 $INPUTBEDFILE) $REFINED_3p | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[0]\t$F[4]\t$F[5]\t"; $ncol='$NCOL'; foreach(@F[6..($ncol+2)]) { print "$_\t"; } print "\n";' | perl -ane '$ncol='$NCOL'; if($F[5]=~/\-/) { $distance_3p=$F[1]-$F[$ncol+1]; } else { $distance_3p=$F[$ncol+2]-$F[1]; } $F[9]=$distance_3p; print "$F[0]"; foreach(@F[1..($ncol-1)]) { print "\t$_"; } print "\n";') | sort -k 4,4 > $REFINED_3p.bed

    rm $REFINED_3p
    mv $REFINED_3p.bed $INPUTBEDFILE
    >&2 echo "done"
fi

## parse input BED file and compute signal
cat $INPUTBEDFILE | perl -ane '
    if($F[9]!~/^[0-9]+$/) { $F[9]=50; }
    if($F[5]=~/\-/) {
        ## NFR
        $nfr_start = $F[1]-'$WIN_SENSE';
        $nfr_end = $F[1]+'$WIN_ANTISENSE';

        ## antisense NDR (should be > one Nucleosome - 200 bp)
        if(abs(F[8]) > '$WIN_NUCLEOSOME') {
            $ndr_antisense_start = $nfr_end+1;
            $ndr_antisense_end = $nfr_end+abs(F[8]);
        } else {
            $ndr_antisense_start = $nfr_start;
            $ndr_antisense_end = $nfr_end;
        }

        ## -1, -2 and -3 nucleosomes
        $nucleosome1_antisense_start = $ndr_antisense_end+1;
        $nucleosome1_antisense_end = $nucleosome1_antisense_start+'$WIN_NUCLEOSOME';

        $nucleosome2_antisense_start = $nucleosome1_antisense_end+1;
        $nucleosome2_antisense_end = $nucleosome2_antisense_start+'$WIN_NUCLEOSOME';

        $nucleosome3_antisense_start = $nucleosome2_antisense_end+1;
        $nucleosome3_antisense_end = $nucleosome3_antisense_start+'$WIN_NUCLEOSOME';

        ## sense NDR (should be > one Nucleosome - 200 bp)
        if(abs($F[9]) > '$WIN_NUCLEOSOME') {
            $ndr_sense_end = $nfr_start-1;
            $ndr_sense_start = $nfr_start-abs($F[9]);
        } else {
            $ndr_sense_end = $nfr_end;
            $ndr_sense_start = $nfr_start;
        }

        ## +1, +2 and +3 nucleosomes
        $nucleosome1_sense_end = $ndr_sense_start-1;
        $nucleosome1_sense_start = $nucleosome1_sense_end-'$WIN_NUCLEOSOME';

        $nucleosome2_sense_end = $nucleosome1_sense_start-1;
        $nucleosome2_sense_start = $nucleosome2_sense_end-'$WIN_NUCLEOSOME';

        $nucleosome3_sense_end = $nucleosome2_sense_start-1;
        $nucleosome3_sense_start = $nucleosome3_sense_end-'$WIN_NUCLEOSOME';
    } else {
        ## NFR
        $nfr_start = $F[1]-'$WIN_ANTISENSE';
        $nfr_end = $F[1]+'$WIN_SENSE';

        ## antisense NDR (should be > one Nucleosome - 200 bp)
        if(abs(F[8]) > '$WIN_NUCLEOSOME') {
            $ndr_antisense_end = $nfr_end-1;
            $ndr_antisense_start = $nfr_end-abs($F[8]);
        } else {
            $ndr_antisense_end = $nfr_end;
            $ndr_antisense_start = $nfr_start;
        }

        ## -1, -2 and -3 nucleosomes
        $nucleosome1_antisense_end = $ndr_antisense_start-1;
        $nucleosome1_antisense_start = $nucleosome1_antisense_end-'$WIN_NUCLEOSOME';

        $nucleosome2_antisense_end = $nucleosome1_antisense_start-1;
        $nucleosome2_antisense_start = $nucleosome2_antisense_end-'$WIN_NUCLEOSOME';

        $nucleosome3_antisense_end = $nucleosome2_antisense_start-1;
        $nucleosome3_antisense_start = $nucleosome3_antisense_end-'$WIN_NUCLEOSOME';

        ## sense NDR (should be > one Nucleosome - 200 bp)
        if(abs($F[9]) > '$WIN_NUCLEOSOME') {
            $ndr_sense_start = $nfr_end+1;
            $ndr_sense_end = $nfr_end+abs($F[9]);
        } else {
            $ndr_sense_start = $nfr_start;
            $ndr_sense_end = $nfr_end;
        }

        ## +1, +2 and +3 nucleosomes
        $nucleosome1_sense_start = $ndr_sense_end+1;
        $nucleosome1_sense_end = $nucleosome1_sense_start+'$WIN_NUCLEOSOME';

        $nucleosome2_sense_start = $nucleosome1_sense_end+1;
        $nucleosome2_sense_end = $nucleosome2_sense_start+'$WIN_NUCLEOSOME';

        $nucleosome3_sense_start = $nucleosome2_sense_end+1;
        $nucleosome3_sense_end = $nucleosome3_sense_start+'$WIN_NUCLEOSOME';
    }
    $line=$F[0]; foreach(@F[1..scalar(@F)-1]) { $line.="#$_"; }
    print "$F[0]\t$nucleosome3_antisense_start\t$nucleosome3_antisense_end\tNUCLEOSOME3_ANTISENSE#$F[3]\t0\t$F[5]\t$line\n"; ## 200 bp -3 nucleosome
    print "$F[0]\t$nucleosome2_antisense_start\t$nucleosome2_antisense_end\tNUCLEOSOME2_ANTISENSE#$F[3]\t0\t$F[5]\t$line\n"; ## 200 bp -2 nucleosome
    print "$F[0]\t$nucleosome1_antisense_start\t$nucleosome1_antisense_end\tNUCLEOSOME1_ANTISENSE#$F[3]\t0\t$F[5]\t$line\n"; ## 200 bp -1 nucleosome
    print "$F[0]\t$ndr_antisense_start\t$ndr_antisense_end\tNDR_ANTISENSE#$F[3]\t0\t$F[5]\t$line\n"; ## region of varying width devoid of canonical nucleosomes (NDR)
    print "$F[0]\t$nfr_start\t$nfr_end\tNFR#$F[3]\t0\t$F[5]\t$line\n"; ## Promoters: 150 bp region devoid of any nucleosomes (NFR)
    print "$F[0]\t$ndr_sense_start\t$ndr_sense_end\tNDR_SENSE#$F[3]\t0\t$F[5]\t$line\n"; ## region of varying width devoid of canonical nucleosomes (NDR)
    print "$F[0]\t$nucleosome1_sense_start\t$nucleosome1_sense_end\tNUCLEOSOME1_SENSE#$F[3]\t0\t$F[5]\t$line\n"; ## 200 bp +1 nucleosome
    print "$F[0]\t$nucleosome2_sense_start\t$nucleosome2_sense_end\tNUCLEOSOME2_SENSE#$F[3]\t0\t$F[5]\t$line\n"; ## 200 bp +2 nucleosome
    print "$F[0]\t$nucleosome3_sense_start\t$nucleosome3_sense_end\tNUCLEOSOME3_SENSE#$F[3]\t0\t$F[5]\t$line\n"; ## 200 bp +3 nucleosome
    #chomp($_);
    #print "$_\t$F[0]:$nucleosome1_antisense_start-$nucleosome1_antisense_end\t$F[0]:$nfr_start-$nfr_end\t$F[0]:$ndr_sense_start-$ndr_sense_end\t$F[0]:$nucleosome1_sense_start-$nucleosome1_sense_end\n";' | bed2expr -i stdin -j $INPUTBAMFILES -g $GENOME -v $AVG $PARAM_BIN

## remove temporary file, if exists
if [ ! -z "$TMP" ]; then
    rm $TMP
fi

exit








<<"COMMENT" (dual NFR - obsolete)
## create temporary BED file if input is from stdin
if [ "$INPUTBEDFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo -e "${LINE}"
    done | grep -v "start" > $TMP
    INPUTBEDFILE=$TMP
else
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    zless $INPUTBEDFILE | grep -v "start" > $TMP 
    INPUTBEDFILE=$TMP
fi

cat $INPUTBEDFILE | perl -ane '@coor=split(/[:-]+/, $F[7]); print "$coor[0]\t$coor[1]\t$coor[2]\t$F[3]\t$F[4]\t$F[5]\t$F[6]\n";' | perl -ane '
    if($F[5]=~/\-/) {
        $fragileNucleosome_antisense_end = $F[2]+150;
        $fragileNucleosome_antisense_start = $F[2];
        $nfr_antisense_end = $F[2];
        $nfr_antisense_start = $F[2]-150;
        $fragileNucleosome_middle_end = $F[2]-150;
        $fragileNucleosome_middle_start = $F[2]-300;
        $nfr_sense_end = $F[2]-300;
        if($F[1] < ($F[2]-450)) {
            $nfr_sense_start = $F[1];
            $fragileNucleosome_sense_end = $F[1];
            $fragileNucleosome_sense_start = $F[1]-150;
        } else {
            $nfr_sense_start = $F[2]-450;
            $fragileNucleosome_sense_end = $F[2]-450;
            $fragileNucleosome_sense_start = $F[2]-600;
        }
    }
    elsif($F[5]=~/\+/) {
        $fragileNucleosome_antisense_start = $F[1]-150;
        $fragileNucleosome_antisense_end = $F[1];
        $nfr_antisense_start = $F[1];
        $nfr_antisense_end = $F[1]+150;
        $fragileNucleosome_middle_start = $F[1]+150;
        $fragileNucleosome_middle_end = $F[1]+300;
        $nfr_sense_start = $F[1]+300;
        if($F[2] > ($F[1]+450)) {
            $nfr_sense_end = $F[2];
            $fragileNucleosome_sense_start = $F[2];
            $fragileNucleosome_sense_end = $F[2]+150;
        } else {
            $nfr_sense_end = $F[1]+450;
            $fragileNucleosome_sense_start = $F[1]+450;
            $fragileNucleosome_sense_end = $F[1]+600;
        }
    }
    $line=$F[0]; foreach(@F[1..scalar(@F)-1]) { $line.="#$_"; }
    print "$F[0]\t$fragileNucleosome_antisense_start\t$fragileNucleosome_antisense_end\tFRAGILENUCLEOSOME_ANTISENSE#$F[3]\t$F[4]\t$F[5]\t$line\n";
    print "$F[0]\t$nfr_antisense_start\t$nfr_antisense_end\tNFR_ANTISENSE#$F[3]\t$F[4]\t$F[5]\t$line\n";
    print "$F[0]\t$fragileNucleosome_middle_start\t$fragileNucleosome_middle_end\tFRAGILENUCLEOSOME_MIDDLE#$F[3]\t$F[4]\t$F[5]\t$line\n";
    print "$F[0]\t$nfr_sense_start\t$nfr_sense_end\tNFR_SENSE#$F[3]\t$F[4]\t$F[5]\t$line\n";
    print "$F[0]\t$fragileNucleosome_sense_start\t$fragileNucleosome_sense_end\tFRAGILENUCLEOSOME_SENSE#$F[3]\t$F[4]\t$F[5]\t$line\n";
' | bed2expr -i stdin -j $INPUTBAMFILES -g $GENOME -v $AVG $PARAM_BIN
COMMENT
