#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
gene2promoter: predict promoter region of genes using h3k4me3 modification
Copyright (C) 2017  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
OUTDIR="peaks";
GENOME="mm9"
PROCESSOR=1

MINCLUSTERHEIGHT=2
MINBLOCKHEIGHT=2
DISTANCE=70
SCALE="0.6"
BLOCKHEIGHT="abs"
PVALUE="0.05"
MERGEDISTANCE=0
DISTRIBUTION="nbinom"

PROMOTERDISTANCE=500

#### usage ####
usage() {
	echo Program: "gene2promoter (predict promoter region of genes using h3k4me3 modification)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2promoter -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates of genes in GTF or BED format (can be stdin)]"
    echo "             [format: chr start end name score strand]"
    echo "             [GTF: will identify the most active TSS per gene]"
    echo "             [BED: requires unique TSS per gene]"
    echo " -j <file>   [h3k4me3 modification data in BAM format]"
    echo "             [if multiple, please separate them by a comma]"
    echo "[OPTIONS]"
    echo " -o <dir>    [output directory to store intermediate files (default: promoter)"
    echo " -m <string> [genome (default: mm9)]"
    echo " -p <int>    [number of processors to use (default: 1)]"
    echo " -k <file>   [IgG control file in BAM format]"
    echo " -n <int>    [assign peak to a gene, if within this distance to TSS (default: 500)]"
    echo " -r <file>   [input BAM file to refine 3' boundary of promoter, eg. chd4 ChIP-seq data]"
    echo "[OPTIONS: bam2peaks]"
    echo " -c <int>    [minimum number of read in the block group (default: 2)]"
    echo " -e <int>    [minimum number of read in the block (default: 2)]"
    echo " -x <int>    [maximum distance between the blocks (default: 70)]"
    echo " -s <float>  [scale to define blocks (default: 0.6)]"
    echo " -g <int>    [block height (abs or rel) (default: abs)]"
    echo " -t <float>  [FDR at which to consider a peak as significant (default: 0.05)]"
    echo " -v <int>    [merge peaks separated by input distance (default: 0)]"
    echo " -d <int>    [distribution to use for data fit (pois or nbinom) (default: nbinom)]"
	echo " -h          [help]"
    echo "[OUTPUT]"
    echo "             [chr start end name score strand promoter_defined promoter_coordinate up_bp down_bp]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:o:m:p:k:n:r:c:e:x:s:g:t:v:d:h ARG; do
	case "$ARG" in
		i) GENEFILE=$OPTARG;;
        j) BAMFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        m) GENOME=$OPTARG;;
        p) PROCESSOR=$OPTARG;;
        k) CONTROLFILE=$OPTARG;;
        n) PROMOTERDISTANCE=$OPTARG;;
        r) REFINE=$OPTARG;;
        c) MINCLUSTERHEIGHT=$OPTARG;;
        e) MINBLOCKHEIGHT=$OPTARG;;
        x) DISTANCE=$OPTARG;;
        s) SCALE=$OPTARG;;
        g) BLOCKHEIGHT=$OPTARG;;
        t) PVALUE=$OPTARG;;
        v) MERGEDISTANCE=$OPTARG;;
        d) DISTRIBUTION=$OPTARG;;
		h) HELP=1;;
	esac
done

>&2 echo
if [ "$HELP" ]; then
    usage
fi

>&2 echo
>&2 echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$GENEFILE" -o -z "$BAMFILE" ]; then
    >&2 echo
    >&2 echo "Error: one or more required paramter values not provided"
    >&2 echo
	usage
fi
>&2 echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

>&2 echo -n "Create directory structure (`date`).. "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi

if [ ! -d "$OUTDIR/logs" ]; then
    mkdir -p $OUTDIR/logs
fi

if [ ! -d "$OUTDIR/define_promoter" ]; then
    mkdir -p $OUTDIR/define_promoter
fi
>&2 echo "done"

>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    usage
fi
>&2 echo "done"

## create temporary BED file if input is from stdin
if [ "$GENEFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo -e "${LINE}"
    done > $OUTDIR/$TMP
    GENEFILE=$OUTDIR/$TMP
fi

>&2 echo -n "Predict peaks on H3K4me3 data (`date`).. "
if [ ! -s "$OUTDIR/PEAKS.BED" ]; then
    if [ -z "$CONTROLFILE" ]; then
        bam2peaks -i $BAMFILE -o $OUTDIR -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v $MERGEDISTANCE -d $DISTRIBUTION &>$OUTDIR/logs/bam2peaks.log
    else
        bam2peaks -i $BAMFILE -o $OUTDIR -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v $MERGEDISTANCE -d $DISTRIBUTION -l $CONTROLFILE &>$OUTDIR/logs/bam2peaks.log
    fi
fi
>&2 echo "done"

>&2 echo  -n "Define promoter regions (`date`).. "
if [ ! -s "$OUTDIR/PEAKS.BED" ]; then
    >&2 echo
    >&2 echo "Peak file $OUTDIR/PEAKS.BED is not computed properly.. "
    >&2 echo "exiting.. "
    >&2 echo
    exit
else
    >&2 echo -n "Determine optimal distance between peaks to merge (`date`).. "
    if [ ! -s "$OUTDIR/define_promoter/PEAKS.BED.MERGED" ]; then
        NCOL=$(head -n 1 $OUTDIR/PEAKS.BED | perl -ane 'print scalar(@F);')
        closestBed -a <(sortBed -i $OUTDIR/PEAKS.BED) -b <(sortBed -i $OUTDIR/PEAKS.BED) -io -d -t first | perl -ane '$mean=($F[4]+$F['$(($NCOL+4))'])/2; print "$mean\t$F[scalar(@F)-1]\n";' | sort -k 2n,2 > $OUTDIR/define_promoter/PEAKS.BED.DIST

        bed2shuffle -i $OUTDIR/PEAKS.BED -g $GENOME > $OUTDIR/define_promoter/SHUFFLE.BED

        closestBed -a <(sortBed -i $OUTDIR/define_promoter/SHUFFLE.BED) -b <(sortBed -i $OUTDIR/define_promoter/SHUFFLE.BED) -io -d -t first | perl -ane '$mean=($F[4]+$F['$(($NCOL+4))'])/2; print "$mean\t$F[scalar(@F)-1]\n";' | sort -k 2n,2 > $OUTDIR/define_promoter/SHUFFLE.BED.DIST

        TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
        cut -f 2 $OUTDIR/define_promoter/PEAKS.BED.DIST > $OUTDIR/define_promoter/PEAKS.BED.DIST.$TMP
        cut -f 2 $OUTDIR/define_promoter/SHUFFLE.BED.DIST > $OUTDIR/define_promoter/SHUFFLE.BED.DIST.$TMP
        DISTANCE=$($FINDNFRPATH/share/R/findIntersectionPoint.R -i $OUTDIR/define_promoter/PEAKS.BED.DIST.$TMP -j $OUTDIR/define_promoter/SHUFFLE.BED.DIST.$TMP -m median)
        >&2 echo $DISTANCE
        rm $OUTDIR/define_promoter/PEAKS.BED.DIST.$TMP
        rm $OUTDIR/define_promoter/SHUFFLE.BED.DIST.$TMP
      
        if [ "$DISTANCE" -gt 1000 ]; then
            DISTANCE=1000
        fi

        bedtools merge -i <(sortBed -i $OUTDIR/PEAKS.BED) -d $DISTANCE > $OUTDIR/define_promoter/PEAKS.BED.MERGED
    fi
    >&2 echo "done"

    >&2 echo
    >&2 echo -n "Check, if input gene coordinate file is in BED or GTF format (`date`).. "
    if [ "$(isBed -i $GENEFILE -s)" -eq 0 -a ! -s "$OUTDIR/define_promoter/GENES_TSS.BED" ]; then
        zless $GENEFILE 
    elif [ ! -s "$OUTDIR/define_promoter/GENES_TSS.BED" ]; then
        gene2mostActiveTSS -i $GENEFILE -j $BAMFILE -g $GENOME -w 300 | sortBed -i stdin
    fi | bed2window -i stdin -w 0 -t | bed2window -i stdin -w 1 -r | perl -ane 'if($F[0]=~/\_/ || $F[0]=~/chrM/) { next; } else { print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[5]\n"; }' > $OUTDIR/define_promoter/GENES_TSS.BED

    echo -e "#chr\tstart\tend\tname\tscore\tstrand\tpromoter_defined\tpromoter_coordinate\tup_bp\tdown_bp"
    closestBed -a <(sortBed -i $OUTDIR/define_promoter/GENES_TSS.BED) -b $OUTDIR/define_promoter/PEAKS.BED.MERGED -d -t first | perl -ane 'if($F[scalar(@F)-1] < '$PROMOTERDISTANCE' && $F[scalar(@F)-1] >= 0) { $start=$F[7]-0; $end=$F[8]+0; $defined="Y"; } else { $start=$F[1]-50; $end=$F[1]+50; $defined="N"; } if($start<0) { $start=1; } for($i=0; $i<6; $i++) { print "$F[$i]\t"; } print "$defined\t$F[0]:$start-$end";
    if($F[5]=~/\-/) { 
        $up=$F[1]-$end;
        $down=$F[1]-$start;
        if($up>0) { $up=0; }
        if($down<0) { $down=0; }
    }
    else {
        $up=$start-$F[1];
        $down=$end-$F[1];
        if($up>0) { $up=0; }
        if($down<0) { $down=0; }
    } print "\t$up\t$down\n";' | perl -ane '
        if($F[9]<=0) {
            $start=$F[1]-50;
            $end=$F[1]+50;
            $F[7]="$F[0]:$start-$end";
            $F[9]=50;
            $F[6]="N";
        }
        print "$F[0]";
        foreach(@F[1..scalar(@F)-1]) { print "\t$_"; }
        print "\n";' > $OUTDIR/define_promoter/GENES_PROMOTER.BED.$TMP

    if [ ! -z "$REFINE" ]; then
        >&2 echo -n "Refine 3' boundary of promoter (`date`).. "
        zless $OUTDIR/define_promoter/GENES_PROMOTER.BED.$TMP | perl -ane 'if($F[9]>450) { print $_; }' | perl -ane 'if($F[5]=~/\-/) { $end=$F[1]-250; $start=$F[1]-$F[9]; } else { $start=$F[1]+250; $end=$F[1]+$F[9]; } print "$F[0]\t$start\t$end\t$F[3]\t$F[4]\t$F[5]\n";' | bed2HighestExprBin -i stdin -j $REFINE -w 200 -s 200 -d -g $GENOME > $OUTDIR/define_promoter/GENES_PROMOTER.BED.HighestExprBin$TMP

        zless <(zless $OUTDIR/define_promoter/GENES_PROMOTER.BED.$TMP | perl -ane 'if($F[9]<=450) { print $_; }') <(join -j 4 $OUTDIR/define_promoter/GENES_PROMOTER.BED.$TMP $OUTDIR/define_promoter/GENES_PROMOTER.BED.HighestExprBin$TMP | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[0]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\t$F[8]\t$F[9]\t$F[10]\t$F[11]\t$F[12]\n";' | perl -ane 'if($F[5]=~/\-/) { $distance_3p=$F[1]-$F[11]; } else { $distance_3p=$F[12]-$F[1]; } print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\t$F[8]\t$distance_3p\n";') | sort -k 4,4

        rm $OUTDIR/define_promoter/GENES_PROMOTER.BED.HighestExprBin$TMP
        >&2 echo "done"
    else
        zless $OUTDIR/define_promoter/GENES_PROMOTER.BED.$TMP
    fi | sort -k 4,4 -k 10rn,10 | perl -ane 'if(!$seen{$F[3]}) { print $_; $seen{$F[3]}=1; }'
    #| perl -ane '@tss=split(/[\:\-]/,$F[7]); print "$tss[0]\t$tss[1]\t".($tss[2]+1)."\t$F[3]\t$F[4]\t$F[5]\t$F[6]\t$F[0]:$F[1]-$F[2]\t$F[8]\t$F[9]\n";'

    ## remove temporary file
    rm $OUTDIR/define_promoter/GENES_PROMOTER.BED.$TMP

    #TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    #cat <(grep -w Y $OUTDIR/define_promoter/GENES_PROMOTER.BED) <(closestBed -a <(grep -vw Y $OUTDIR/define_promoter/GENES_PROMOTER.BED | bed2window -i stdin -w 0 | cut -f 1-6) -b <(cat $OUTDIR/ALLPEAKS.BED | perl -ane 'if($F[6]<0.2) { print $_; }' | sortBed -i stdin) -d -t first | perl -ane 'if($F[scalar(@F)-1] < '$PROMOTERDISTANCE' && $F[scalar(@F)-1] >= 0) { $start=$F[7]-0; $end=$F[8]+0; $defined="Y1"; } else { $start=$F[1]-50; $end=$F[1]+50; $defined="N"; } if($start<0) { $start=1; } $F[1]=$start; $F[2]=$end; for($i=0; $i<6; $i++) { print "$F[$i]\t"; } print "$defined\n";') > $TMP
    #mv $TMP $OUTDIR/define_promoter/GENES_PROMOTER.BED
fi
>&2 echo "done"
