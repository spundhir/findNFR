#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm9"
COVERAGE_DENSITY=0.1
SIGNAL_DENSITY=0.1
NAME="\.*"

#### usage ####
usage() {
	echo Program: "bed2domains (merge consecutive genomic coordinates into borad domains of enriched regions)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bed2domains -i <file> -j <file>"
	echo "Options:"
	echo " -i <file>   [input file containing genomic coordinate in BED format (can be stdin)]"
    echo " -j <file>   [input BAM file(s) to measure signal]"
    echo "             [if multiple, please separate them by a comma]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -c <float>  [minimum coverage density of enriched regions (peaks) in the broad domains; between 0-1 (default: 0.1)]"
    echo " -s <float>  [minimum signal density in the broad domains (default: 0.1)]"
    echo " -n <string> [only join regions having input name (default: all)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:g:c:s:n:h ARG; do
	case "$ARG" in
		i) INPUTBEDFILE=$OPTARG;;
        j) BAMFILE=$OPTARG;;
        g) GENOME=$OPTARG;;
        c) COVERAGE_DENSITY=$OPTARG;;
        s) SIGNAL_DENSITY=$OPTARG;;
        n) NAME=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INPUTBEDFILE" -o -z "$BAMFILE" -o "$HELP" ]; then
	usage
fi

## reformat input file
if [ "$INPUTBEDFILE" == "stdin" ]; then 
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo "${LINE}"
    done > $TMP
    INPUTBEDFILE=$TMP;
fi

## determine domains of enriched regions (peaks)
zless $INPUTBEDFILE | sortBed -i stdin | perl -ane '
    if(!(%domain)) {
        $domain{chr}=$F[0];
        $domain{start}=$F[1];
        $domain{end}=$F[2];
        $domain{peaks}=1;
        $domain{peak_width}=$F[2]-$F[1];
        $domain{width}=$domain{end}-$domain{start};
        $domain{peak_density}=($domain{peak_width}/$domain{width});
        $domain{signal}=`coor2expr -i $F[0]:$F[1]-$F[2] -j '$BAMFILE' -g '$GENOME'`;
        #$domain{signal}=`echo -e "$F[0]\t$F[1]\t$F[2]" | bed2coverage -i stdin -j '$BAMFILE' -g '$GENOME' | cut -f 4`;
        $domain{signal_density}=($domain{signal}/$domain{width});
        $domain{peak_signal}=$F[4];
        $COUNT=1;
    } else {
        if($domain{chr}=~/^$F[0]$/) { 
            $chr=$F[0];
            $start=$domain{start};
            $end=$F[2];
            $peak_width=$domain{peak_width}+($F[2]-$F[1]);
            $width=$end-$start;
            $peak_density=($peak_width/$width);
            $signal=`coor2expr -i $chr:$start-$end -j '$BAMFILE' -g '$GENOME'`;
            #$signal=`echo -e "$chr\t$start\t$end" | bed2coverage -i stdin -j '$BAMFILE' -g '$GENOME' | cut -f 4`;
            $signal_density=($signal/$width);
            $peak_signal=$F[4];
        }
        else {
            $peak_density=0;
        }
      
        #print "$signal_density\t'$SIGNAL_DENSITY'\n";
        if($peak_density > '$COVERAGE_DENSITY' && $signal_density > '$SIGNAL_DENSITY' && $domain{chr}=~/^$F[0]$/ && $_=~/'$NAME'/) {
            $domain{chr}=$F[0];
            $domain{end}=$F[2];
            $domain{peaks}++;
            $domain{peak_width}=$peak_width;
            $domain{width}=$width;
            $domain{peak_density}=($domain{peak_width}/$domain{width});
            $domain{signal}=$signal;
            $domain{signal_density}=$signal_density;
            $domain{peak_signal}+=$peak_signal;
        }
        else {
            $COUNT++;
            chomp($domain{signal});
            print "$domain{chr}\t$domain{start}\t$domain{end}\tmodule$COUNT\t$domain{signal}\t.\t$domain{peaks}\t$domain{peak_density}\t$domain{signal_density}\n";
            %domain=();
            $domain{chr}=$F[0];
            $domain{start}=$F[1];
            $domain{end}=$F[2];
            $domain{peaks}=1;
            $domain{peak_width}=$F[2]-$F[1];
            $domain{width}=$domain{end}-$domain{start};
            $domain{peak_density}=($domain{peak_width}/$domain{width});
            $domain{signal}=`coor2expr -i $F[0]:$F[1]-$F[2] -j '$BAMFILE' -g '$GENOME'`;
            #$domain{signal}=`echo -e "$F[0]\t$F[1]\t$F[2]" | bed2coverage -i stdin -j '$BAMFILE' -g '$GENOME' | cut -f 4`;
            $domain{signal_density}=($domain{signal}/$domain{width});
            $domain{peak_signal}=$F[4];
        }
    } END {
        $COUNT++;
        print "$domain{chr}\t$domain{start}\t$domain{end}\tmodule$COUNT\t$domain{signal}\t.\t$domain{peaks}\t$domain{peak_density}\t$domain{signal_density}\n";
    }'

## remove temporary file, if exists
if [ ! -z "$TMP" ]; then
    rm $TMP;
fi
