#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm9"
AVG=0
REGION="promoter"

#### usage ####
usage() {
	echo Program: "tss2binExpr (compute read count corresponding to input TSS and flanking regions divided into bins)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: tss2binExpr -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input file containing genomic coordinates of TSS in BED format (can be stdin)]"
    echo "             [FORMAT: chr start end name score strand distance]"
    echo "             [distance by which core promoter is extended downstream to TSS, computed using gene2promoter)]"
    echo " -j <file>   [configuration file]"
    echo "             [FORMAT: tpm <absolute path to bam file>]"
    echo "[OPTIONS]"
    echo " -c          [analyze for enhancer (default: promoter)]"
    echo " -r <file>   [input BAM file (eg. chd4 ChIP-seq data) to refine DISTANCE (eg. 3' boundary of promoter)]"
    echo "[OPTIONS: bed2expr]"
    echo " -s <float>  [normalize expression by input size factor]"
    echo "             [if multiple, seperate them by a comma]"
    echo " -m          [normalize expression by counts per million mapped reads (RPM)]"
    echo " -k          [normalize expression by counts per kilo base per million mapped reads (RPKM)]"
    echo " -d          [remove duplicate reads]"
    echo " -e <int>    [extend 3' end of reads by input number of bases (useful for ChIP-seq data)]"
    echo " -v <int>    [instead of giving expression for each replicate, output only the mean (deafult: 0)]"
    echo "             [assumes that consecutive input files are replicates 1 and 2, respectively]"
    echo " -t          [require same strandedness]"
    echo " -n          [add 1 to all the raw expression counts - useful while taking log]"
    echo " -g <string> [genome (default: mm9)]"
	echo " -h          [help]"
    echo "[NOTE]"
    echo " In case of error: Could not open input BAM files, refer to:"
    echo " https://groups.google.com/forum/#!msg/bedtools-discuss/_LNuoRWHn50/14MaqyzyzXsJ"
    echo " i.e. make sure header of all input bam files is identical"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:c:r:s:mkde:v:tng:h ARG; do
	case "$ARG" in
		i) INPUTBEDFILE=$OPTARG;;
        j) CONFIGFILE=$OPTARG;;
        c) REGION=$OPTARG;;
        r) REFINE=$OPTARG;;
        s) INPUTSIZEFACTORS=$OPTARG;; 
        m) CPM=1;;
        k) FPKM=1;;
        d) REMOVE_DUPLICATE=1;;
        e) INPUTEXTENDS=$OPTARG;;
        v) AVG=$OPTARG;;
        t) SAME_STRAND=1;;
        n) ADDONE=1;;
        g) GENOME=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INPUTBEDFILE" -o ! -s "$CONFIGFILE" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
if [ "$GENOME" == "mm9" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.genome"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/human.hg19.genome"
elif [ "$GENOME" == "rn5" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/rat.rn5.genome"
else
    echo "Presently the program only support analysis for mm9, hg19 or rn5"
    echo
    usage
fi

## create temporary BED file if input is from stdin
if [ "$INPUTBEDFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo ${LINE}
    done | perl -ane '$line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $TMP
    INPUTBEDFILE=$TMP
else
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    zless $INPUTBEDFILE > $TMP 
    INPUTBEDFILE=$TMP
fi

## parse binary input parameters
PARAM_BIN=""
if [ ! -z "$INPUTSIZEFACTORS" ]; then PARAM_BIN="$PARAM_BIN -s $INPUTSIZEFACTORS"; fi
if [ -z "$INPUTSIZEFACTORS" -a ! -z "$CPM" ]; then PARAM_BIN="$PARAM_BIN -m"; fi
if [ -z "$INPUTSIZEFACTORS" -a -z "$CPM" -a ! -z "$FPKM" ]; then PARAM_BIN="$PARAM_BIN -k"; fi
if [ ! -z "$REMOVE_DUPLICATE" ]; then PARAM_BIN="$PARAM_BIN -d"; fi
if [ ! -z "$INPUTEXTENDS" ]; then PARAM_BIN="$PARAM_BIN -e $INPUTEXTENDS"; fi
if [ ! -z "$SAME_STRAND" ]; then PARAM_BIN="$PARAM_BIN -r"; fi
if [ ! -z "$ADDONE" ]; then PARAM_BIN="$PARAM_BIN -n"; fi

## parse input bam files
INPUTBAMFILES=$(cat $CONFIGFILE | perl -ane '
    if($_=~/^tpm/) {
        $file.="$F[1],";
    } END {
        $file=~s/\,$//g;
        print "$file\n";
    }'
)

if [ -z "$INPUTBAMFILES" ]; then
    echo
    echo "ERROR: Cannot populate input BAM files. Check your configuration file"
    echo
    usage
fi
#echo "bed2expr -i stdin -j $INPUTBAMFILES -g $GENOME -v $AVG $PARAM_BIN"; exit

## populate up and down window length of HFR
if [ "$REGION" == "promoter" ]; then
    WIN_DOWN=50
    WIN_UP=100
    WIN_FLANKING=200
else
    WIN_DOWN=100
    WIN_UP=100
    WIN_FLANKING=200
fi

NCOL=$(zless $INPUTBEDFILE | head -n 1 | perl -ane 'print scalar(@F);')

#echo -e "WIN_UP: $WIN_UP; WIN_DOWN: $WIN_DOWN"; exit
## refine 3' boundary of promoter
if [ ! -z "$REFINE" ]; then
    >&2 echo -n "Refine 3' boundary of promoter (`date`).. "
    REFINED_3p=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    zless $INPUTBEDFILE | perl -ane 'if($F[6]>450) { print $_; }' | perl -ane 'if($F[5]=~/\-/) { $end=$F[1]-250; $start=$F[1]-$F[6]; } else { $start=$F[1]+250; $end=$F[1]+$F[6]; } print "$F[0]\t$start\t$end\t$F[3]\t$F[4]\t$F[5]\n";' | bed2HighestExprBin -i stdin -j $REFINE -w 200 -s 200 -d -g $GENOME > $REFINED_3p

    zless <(zless $INPUTBEDFILE | perl -ane 'if($F[6]<=450) { print $_; }') <(join -j 4  <(sort -k 4,4 $INPUTBEDFILE) $REFINED_3p | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[0]\t$F[4]\t$F[5]\t"; $ncol='$NCOL'; foreach(@F[6..($ncol+2)]) { print "$_\t"; } print "\n";' | perl -ane '$ncol='$NCOL'; if($F[5]=~/\-/) { $distance_3p=$F[1]-$F[$ncol+1]; } else { $distance_3p=$F[$ncol+2]-$F[1]; } $F[6]=$distance_3p; print "$F[0]"; foreach(@F[1..($ncol-1)]) { print "\t$_"; } print "\n";') | sort -k 4,4 > $REFINED_3p.bed

    rm $REFINED_3p
    mv $REFINED_3p.bed $INPUTBEDFILE
    >&2 echo "done"
fi

## parse input BED file and compute signal
cat $INPUTBEDFILE | perl -ane '
    if($F[6]!~/^[0-9]+$/) { $F[6]=50; }
    if($F[5]=~/\-/) { 
        $hfr_start=$F[1]-'$WIN_DOWN';
        $hfr_end=$F[1]+'$WIN_UP';

        $up_start=$hfr_end+1;
        $up_end=$up_start+'$WIN_FLANKING';

        $down_end=$hfr_start-1;
        $down_start=$down_end-'$WIN_FLANKING';

        $start=$F[1]-($F[6]);
        ## this means if start < 50 (WIN_DOWN) + 1 + 200 (WIN_FLANKING)
        if($start < $down_start && $down_start - $start >= '$WIN_FLANKING'*2) {
            $extr_down_end=($start-1)+'$WIN_FLANKING';
            $extr_down_start=$start-1;
            $nfr_start=$extr_down_start;
            $nfr_end=$down_start-1;
            if($nfr_end < $nfr_start) { $nfr_start=$extr_down_start; $nfr_end=$extr_down_end; }
        } elsif($start < $down_start && $down_start - $start >= '$WIN_FLANKING') {
            $extr_down_end=($start-1)+'$WIN_FLANKING';
            $extr_down_start=$start-1;
            $nfr_start=$extr_down_start;
            $nfr_end=$down_start-1;
            if($nfr_end < $nfr_start) { $nfr_start=$extr_down_start; $nfr_end=$extr_down_end; }
        } else {
            $nfr_start=$hfr_start;
            $nfr_end=$hfr_end;
            $extr_down_start=$down_start;
            $extr_down_end=$down_end;
        }
    } else {
        $hfr_start=$F[1]-'$WIN_UP';
        $hfr_end=$F[1]+'$WIN_DOWN';

        $up_end=$hfr_start-1;
        $up_start=$up_end-'$WIN_FLANKING';

        $down_start=$hfr_end+1;
        $down_end=$down_start+'$WIN_FLANKING';

        $end=$F[1]+($F[6]);
        ## this means if end > 50 (WIN_DOWN) + 1 + 200 (WIN_FLANKING)
        if($end > $down_end && $end - $down_end >= '$WIN_FLANKING'*2) {
            $extr_down_end=$end+1;
            $extr_down_start=$extr_down_end-'$WIN_FLANKING';
            $nfr_start=$down_end+1;
            $nfr_end=$extr_down_end;
            if($nfr_end < $nfr_start) { $nfr_start=$extr_down_start; $nfr_end=$extr_down_end; }
        } elsif($end > $down_end && $end - $down_end >= '$WIN_FLANKING') {
            $extr_down_end=$end+1;
            $extr_down_start=$extr_down_end-'$WIN_FLANKING';
            $nfr_start=$down_end+1;
            $nfr_end=$extr_down_end;
            if($nfr_end < $nfr_start) { $nfr_start=$extr_down_start; $nfr_end=$extr_down_end; }
        } else {
            $nfr_start=$hfr_start;
            $nfr_end=$hfr_end;
            $extr_down_start=$down_start;
            $extr_down_end=$down_end;
        }
    }
    $line=$F[0]; foreach(@F[1..scalar(@F)-1]) { $line.="#$_"; }
    print "$F[0]\t$up_start\t$up_end\tUP#$F[3]\t0\t$F[5]\t$line\n"; ## 200 bp region up-stream to HFR
    print "$F[0]\t$hfr_start\t$hfr_end\tHFR#$F[3]\t0\t$F[5]\t$line\n"; ## Promoters: 150 bp nucleosome free region + also devoid of histone modified nucleosomes (HFR)
    print "$F[0]\t$down_start\t$down_end\tDOWN#$F[3]\t0\t$F[5]\t$line\n"; ## 200 bp region down-stream to HFR
    print "$F[0]\t$nfr_start\t$nfr_end\tNFR#$F[3]\t0\t$F[5]\t$line\n"; ## region of varying width containing histone modified nucleosomes (NFR)
    print "$F[0]\t$extr_down_start\t$extr_down_end\tEXTR_DOWN#$F[3]\t0\t$F[5]\t$line\n"; ## 200 bp region down-stream to NFR
    #chomp($_);
    #print "$_\t$F[0]:$up_start-$up_end\t$F[0]:$hfr_start-$hfr_end\t$F[0]:$nfr_start-$nfr_end\t$F[0]:$down_start-$down_end\n";' | bed2expr -i stdin -j $INPUTBAMFILES -g $GENOME -v $AVG $PARAM_BIN
    
## remove temporary file, if exists
if [ ! -z "$TMP" ]; then
    rm $TMP
fi

exit
