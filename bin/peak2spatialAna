#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm10";
PROCESSOR=1
NMOTIFS=50
LENGTH="7,8,9,10,11,12,13,14" ## recommended 7,8,9,10,11,12,13,14 (Andersson et al. 2014)
PVALUE="1e-15" ## recommended 1e-15 (Andersson et al. 2014)
MIN_P_T=2 ## recommended 3 (Andersson et al. 2014)
B=30 ## recommended 30 (Andersson et al. 2014)
S=25 ## recommended 100 (Andersson et al. 2014)
SIZE="given"

#### usage ####
usage() {
	echo Program: "peak2spatialAna (quality check on peaks with their spatial and motif enrichment)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: peak2spatialAna -i <file> -o <dir> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input file having genomic regions in BED format (or stdin)]"
    echo "             [format: chr start end name score strand signalValue]"
    echo " -o <dir>    [output directory to store results]"
    echo "[OPTIONS]"
    echo " -g <string> [genome for which to perform the analysis (mm9, hg19, mm10, hg38, danRer7; default: mm10)]"
    echo " -p <int>    [number of processors to use (default: 1)]"
    echo " -N          [skip multiClassMotifAna using Homer]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:o:g:p:Nh ARG; do
	case "$ARG" in
		i) BEDFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        g) GENOME=$OPTARG;;
        p) PROCESSOR=$OPTARG;;
        N) NOHOMER=1;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$BEDFILE" -o -z "${OUTDIR}" -o "$HELP" ]; then
	usage
fi

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}

get_seeded_random()
{
    seed="$1"
    openssl enc -aes-256-ctr -pass pass:"$seed" -nosalt </dev/zero 2>/dev/null
}
###############

<<"COMMENT1"
COMMENT1
##@@@@@@@@@@@@@@@@@@@@@@@@@@##
>&2 echo
>&2 echo -n "Create directory structure (`date`).. "
mkdir -p ${OUTDIR}
>&2 echo "done"

##@@@@@@@@@@@@@@@@@@@@@@@@@@##
>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
TSS_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME -t)
GENEDIST_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME -M)
if [ ! -f "${GENOME_FILE}" -o ! -f "${TSS_FILE}" -o ! -f "${GENEDIST_FILE}" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    usage
fi
>&2 echo "done"

##@@@@@@@@@@@@@@@@@@@@@@@@@@##
>&2 echo -n "Create region file depending on if the input is from file or STDIN (`date`).. " 
TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
TMP="BA4CnrY32vxBf4ZEtNqKdgFe4JoEHmah"
if [ "$BEDFILE" == "stdin" ]; then
    while read LINE; do
        echo -e "${LINE}"
    done
else
    zless $BEDFILE
fi | tabEdit -i stdin -n 7 > ${TMP}.bed
>&2 echo "done"

##@@@@@@@@@@@@@@@@@@@@@@@@@@##
>&2 echo -n "Compute peak distance to closest gene TSS (protein coding) (`date`).. "
## chr start end name score strand signalValue gene dist_to_geneTSS gene2geneDist
closestBed -a <(sortBed -i ${TMP}.bed | bed2window -i stdin -w 1) -b <(grep -w protein_coding ${TSS_FILE} | cut -f 1-6 | sortBed -i stdin) -D b -t first | cut -f 1-7,11,14 > ${TMP}.spatial
join -a 1 -1 8 -2 1 <(sort -k 8,8 ${TMP}.spatial) <(cut -f 4,7 ${GENEDIST_FILE} | sort -k 1,1) | perl -ane 'print "$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\t$F[0]\t$F[8]\t$F[9]\n";' | tabEdit -i stdin -n 10 > ${TMP}.spatial.tmp
mv ${TMP}.spatial.tmp ${TMP}.spatial
cat ${TMP}.spatial | peak2spatialAna.R -i stdin -o ${OUTDIR}/peaks.spatial.pdf > ${OUTDIR}/peaks.spatial
>&2 echo "done"

##@@@@@@@@@@@@@@@@@@@@@@@@@@##
>&2 echo -n "Compute Transcription Factor enrichment at peaks using Giggle (`date`).. "
mkdir -p ${OUTDIR}/multiClassGiggleAna
cut -f 1-6,11 ${OUTDIR}/peaks.spatial | grep -v start | multiClassGiggleAna -i stdin -o ${OUTDIR}/multiClassGiggleAna/ -g ${GENOME} -d homer -c ${NMOTIFS} -x ${PVALUE} -y ${MIN_P_T} &>${OUTDIR}/multiClassGiggleAna/multiClassGiggleAna.log
scp -p ${OUTDIR}/multiClassGiggleAna/giggleDynAna/GIGGLE_ENRICHMENT_HOMER.TXT ${OUTDIR}
scp -p ${OUTDIR}/multiClassGiggleAna/giggleDynAna/giggleEnrichment_HOMER.pdf ${OUTDIR}

cut -f 1-6,11 ${OUTDIR}/peaks.spatial | grep -v start | grep -wv TSS | giggleAna -i stdin -g ${GENOME} -d homer > ${OUTDIR}/GIGGLE_ENRICHMENT_HOMER_DISTAL_PROXIMAL.TXT 2>/dev/null
>&2 echo "done"

##@@@@@@@@@@@@@@@@@@@@@@@@@@##
>&2 echo -n "Compute Transcription Factor enrichment at peaks using Homer (`date`).. "
if [ ! -d "${OUTDIR}/multiClassMotifAna" -a -z "${NOHOMER}" ]; then
    mkdir -p ${OUTDIR}/multiClassMotifAna
    cut -f 1-6,11 ${OUTDIR}/peaks.spatial | grep -v start | multiClassMotifAna -i stdin -o ${OUTDIR}/multiClassMotifAna/ -s ~/software/homer/data/knownTFs/vertebrates/2025_version/homer/homer_motifs.homer -g ${GENOME} -r ${PROCESSOR} -c ${NMOTIFS} -t ${LENGTH} -p ${PVALUE} -y ${MIN_P_T} -n ${S} -d ${SIZE} &>${OUTDIR}/multiClassMotifAna/multiClassMotifAna.log
    scp -p ${OUTDIR}/multiClassMotifAna/motifDynAna/DENOVO_MOTIF_ENRICHMENT_DYNAMICS.TXT ${OUTDIR}
    scp -p ${OUTDIR}/multiClassMotifAna/motifDynAna/KNOWN_MOTIF_ENRICHMENT_DYNAMICS.TXT ${OUTDIR}
    scp -p ${OUTDIR}/multiClassMotifAna/motifDynAna/DENOVO_motif_dynamics.pdf ${OUTDIR}
    scp -p ${OUTDIR}/multiClassMotifAna/motifDynAna/KNOWN_motif_dynamics.pdf ${OUTDIR}
fi
>&2 echo "done"

##@@@@@@@@@@@@@@@@@@@@@@@@@@##
## remove temporary files
rm ${TMP}.bed
rm ${TMP}.spatial

##@@@@@@@@@@@@@@@@@@@@@@@@@@##
## OLD ##
#motifAna -i ${TMP}.bed -o ${OUTDIR}/motifAna -m 1 -t 7,8,9,10,11,12,13,14 -u 0.75 -v 1.5 -x 1e-15 -y 3 -n 100 -g ${GENOME} -p ${PROCESSOR} -d given
#findMotifsGenome.pl ${TMP}.bed ${GENOME}r ${OUTDIR}/motifAna -mknown ~/software/homer/data/knownTFs/vertebrates/2025_version/homer/homer_motifs.homer -p ${PROCESSOR} -len ${LENGTH} -S ${S} -size ${SIZE} -seqlogo > ${OUTDIR}/motifAna/findMotifs.log

#REGIONS_INTEREST_COUNT=$(cat ${TMP}.bed | wc -l)
#if [ -f "$OUTDIR/motifAna/homerResults.html" ]; then
#    grep png $OUTDIR/motifAna/homerResults.html | grep -vE ">\*<" | perl -ane '$_=~s/<tr><td>//gi; $_=~s/<\/td><td>/\t/gi; $_=~s/<\/td><\/tr>//gi; $_=~s/^[0-9]*\s+//g; print $_;' | perl -an -F'/\t/' -e '$F[0]=~s/^.*\=\"//g; $F[0]=~s/\".*//g; $F[0]=~s/\.logo.*//g; $F[6]=~s/\<BR.*//g; print "$F[6]\t$F[1]\t$F[3]\t$F[4]\t'$OUTDIR/motifAna/'$F[0].motif\t'$REGIONS_INTEREST_COUNT'\n";' | perl -ane '$pval=sprintf("%0.20f", $F[1]); $my_pval=sprintf("%0.20f", '$PVALUE'); $F[2]=~s/\%//g; $F[3]=~s/\%//g; if($pval < $my_pval && $F[2]>='$MIN_P_T' && $F[3]<='$B') { print "$_"; }' > $OUTDIR/denovoEnrichmentResults.txt
#else
#    touch $OUTDIR/denovoEnrichmentResults.txt
#fi

#if [ -f "$OUTDIR/motifAna/knownResults.html" ]; then
#    grep png $OUTDIR/motifAna/knownResults.html | grep -vE ">\*<" | perl -ane '$_=~s/<tr><td>//gi; $_=~s/<\/td><td>/\t/gi; $_=~s/<\/td><\/tr>//gi; $_=~s/^[0-9]*\s+//g; print $_;' | perl -an -F'/\t/' -e '$F[0]=~s/^.*\=\"//g; $F[0]=~s/\".*//g; $F[0]=~s/\.logo.*//g; print "$F[1]\t$F[2]\t$F[6]\t$F[8]\t'$OUTDIR/motifAna/'$F[0].motif\t'$REGIONS_INTEREST_COUNT'\n";' | perl -ane '$pval=sprintf("%0.20f", $F[1]); $my_pval=sprintf("%0.20f", '$PVALUE'); $F[2]=~s/\%//g; $F[3]=~s/\%//g; if($pval < $my_pval && $F[2]>='$MIN_P_T' && $F[3]<='$B') { print "$_"; }' > $OUTDIR/knownEnrichmentResults.txt
#else
#    touch $OUTDIR/knownEnrichmentResults.txt
#fi
