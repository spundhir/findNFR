#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
refineEnhancerRegion: refine enhancer regions using enhancer mid point (P300) and h3k4me1 modification data
Copyright (C) 2017  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
OUTDIR="peaks";
GENOME="mm9"
PROCESSOR=1

MINCLUSTERHEIGHT=2
MINBLOCKHEIGHT=2
DISTANCE=70
SCALE="0.6"
BLOCKHEIGHT="abs"
PVALUE="0.05"
MERGEDISTANCE=0
DISTRIBUTION="nbinom"

## empirically estimated based on median width of p300 peaks
PEAKDISTANCE=400
WINDOW=1000

#### usage ####
usage() {
	echo Program: "refineEnhancerRegion (refine enhancer regions using enhancer mid point (P300) and h3k4me1 modification data)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: refineEnhancerRegion -i <file> -l <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates of enhancer mid point in BED format]"
    echo "             [format: chr start end name score strand]"
    echo "             **AND/OR**"
    echo " -l <file>   [input P300 data in BAM format]"
    echo "             [if multiple, please separate them by a comma]"
    echo " -j <file>   [input h3k4me1 modification data in BAM format]"
    echo "             [if multiple, please separate them by a comma]"
    echo "[OPTIONS]"
    echo " -o <dir>    [output directory to store results (default: enhancers)"
    echo " -m <string> [genome (default: mm9)]"
    echo " -p <int>    [number of processors to use (default: 1)]"
    echo " -k <file>   [IgG control file in BAM format]"
    echo " -n <int>    [assign h3k4me1/h3k4me3 peak to enhancer, if within this distance (default: 400)]"
    echo "[OPTIONS: histone modifications and gene TSS to refine classes]"
    echo " -q <file>   [input h3k4me3 modification data in BAM format]"
    echo "             [if multiple, please separate them by a comma]"
    echo " -z <file>   [input h3k27me3 modification data in BAM format]"
    echo "             [if multiple, please separate them by a comma]"
    echo " -y <file>   [input genomic coordinates of genes in BED format (requires h3k4me3 data)]"
    echo "             [format: chr start end name score strand]"
    echo " -w <int>    [assign h3k4me3 peak to a gene as promoter region, if within this distance to TSS (default: 1000 bp)]"
    echo "[OPTIONS: bam2peaks]"
    echo " -c <int>    [minimum number of read in the block group (default: 2)]"
    echo " -e <int>    [minimum number of read in the block (default: 2)]"
    echo " -x <int>    [maximum distance between the blocks (default: 70)]"
    echo " -s <float>  [scale to define blocks (default: 0.6)]"
    echo " -g <int>    [block height (abs or rel) (default: abs)]"
    echo " -t <float>  [FDR at which to consider a peak as significant (default: 0.05)]"
    echo " -v <int>    [merge peaks separated by input distance (default: 0)]"
    echo " -d <int>    [distribution to use for data fit (pois or nbinom) (default: nbinom)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:l:j:o:m:p:k:n:q:z:y:w:c:e:x:s:g:t:v:d:h ARG; do
	case "$ARG" in
		i) ENHANCERFILE=$OPTARG;;
        l) P300FILE=$OPTARG;;
        j) H3K4ME1FILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        m) GENOME=$OPTARG;;
        p) PROCESSOR=$OPTARG;;
        k) CONTROLFILE=$OPTARG;;
        n) PEAKDISTANCE=$OPTARG;;
        q) H3K4ME3FILE=$OPTARG;;
        z) H3K27ME3FILE=$OPTARG;;
        y) GENEFILE=$OPTARG;;
        w) WINDOW=$OPTARG;;
        c) MINCLUSTERHEIGHT=$OPTARG;;
        e) MINBLOCKHEIGHT=$OPTARG;;
        x) DISTANCE=$OPTARG;;
        s) SCALE=$OPTARG;;
        g) BLOCKHEIGHT=$OPTARG;;
        t) PVALUE=$OPTARG;;
        v) MERGEDISTANCE=$OPTARG;;
        d) DISTRIBUTION=$OPTARG;;
		h) HELP=1;;
	esac
done

>&2 echo
if [ "$HELP" ]; then
    usage
fi

>&2 echo
>&2 echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$ENHANCERFILE" -a -z "$P300FILE" -o -z "$H3K4ME1FILE" ]; then
    >&2 echo
    >&2 echo "Error: one or more required paramter values not provided"
    >&2 echo
	usage
fi
>&2 echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

>&2 echo -n "Create directory structure (`date`).. "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi

if [ ! -d "$OUTDIR/logs" ]; then
    mkdir -p $OUTDIR/logs
    mkdir -p $OUTDIR/h3k4me1
    mkdir -p $OUTDIR/secondary_files/h3k4me1
fi

>&2 echo "done"

>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
#GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    usage
fi
>&2 echo "done"

>&2 echo -n "Define enhancer regions (`date`).. "
if [ ! -z "$P300FILE" ]; then
    >&2 echo -n "Predict enhancers using p300 data (`date`).. "
    if [ ! -d "$OUTDIR/p300" ]; then
        mkdir -p $OUTDIR/p300
    fi

    if [ ! -s "$OUTDIR/p300/PEAKS.BED" ]; then
        if [ -z "$CONTROLFILE" ]; then
            bam2peaks -i $P300FILE -o $OUTDIR/p300 -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v 0 -d $DISTRIBUTION &>$OUTDIR/logs/bam2peaks_p300.log
        else
            bam2peaks -i $P300FILE -o $OUTDIR/p300 -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v 0 -d $DISTRIBUTION -l $CONTROLFILE &>$OUTDIR/logs/bam2peaks_p300.log
        fi
    fi
    >&2 echo "done"
fi

>&2 echo -n "Define list of all enhancer regions to refine (`date`).. "
if [ ! -z "$ENHANCERFILE" -a ! -z "$P300FILE" ]; then
    cat <(zless $ENHANCERFILE | bed2window -i stdin -w 0 | bed2window -i stdin -w 1 -r | perl -ane 'if($F[0]=~/\_/ || $F[0]=~/chrM/) { next; } else { print "$F[0]\t$F[1]\t$F[2]\t$F[3]_ENHANCER\t$F[4]\t$F[5]\n"; }') <(intersectBed -a <(zless $OUTDIR/p300/PEAKS.BED | bed2window -i stdin -w $PEAKDISTANCE | perl -ane 'if($F[0]=~/\_/ || $F[0]=~/chrM/) { next; } else { print "$F[0]\t$F[1]\t$F[2]\t$F[3]_P300\t$F[4]\t$F[5]\n"; }') -b $ENHANCERFILE -v | bed2window -i stdin -w 0 | bed2window -i stdin -w 1 -r) > $OUTDIR/secondary_files/ALLENHANCERS.BED
elif [ ! -z "$ENHANCERFILE" ]; then
   zless $ENHANCERFILE | bed2window -i stdin -w 0 | bed2window -i stdin -w 1 -r | perl -ane 'if($F[0]=~/\_/ || $F[0]=~/chrM/) { next; } else { print "$F[0]\t$F[1]\t$F[2]\t$F[3]_ENHANCER\t$F[4]\t$F[5]\n"; }' > $OUTDIR/secondary_files/ALLENHANCERS.BED
else
    zless $OUTDIR/p300/PEAKS.BED | bed2window -i stdin -w $PEAKDISTANCE | perl -ane 'if($F[0]=~/\_/ || $F[0]=~/chrM/) { next; } else { print "$F[0]\t$F[1]\t$F[2]\t$F[3]_P300\t$F[4]\t$F[5]\n"; }' > $OUTDIR/secondary_files/ALLENHANCERS.BED 
fi
>&2 echo "done"

>&2 echo -n "Predict peaks on H3K4me1 data (`date`).. "
if [ ! -s "$OUTDIR/h3k4me1/PEAKS.BED" ]; then
    if [ -z "$CONTROLFILE" ]; then
        bam2peaks -i $H3K4ME1FILE -o $OUTDIR/h3k4me1 -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v 0 -d $DISTRIBUTION &>$OUTDIR/logs/bam2peaks_h3k4me1.log
    else
        bam2peaks -i $H3K4ME1FILE -o $OUTDIR/h3k4me1 -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v 0 -d $DISTRIBUTION -l $CONTROLFILE &>$OUTDIR/logs/bam2peaks_h3k4me1.log
    fi
fi
>&2 echo "done"

if [ ! -s "$OUTDIR/secondary_files/ALLENHANCERS.BED" -o ! -s "$OUTDIR/h3k4me1/PEAKS.BED" ]; then
    >&2 echo
    >&2 echo "Enhancer or H3K4me1 peak file is not computed properly.. "
    >&2 echo "exiting.. "
    >&2 echo
    exit
else
    >&2 echo -n "Determine optimal h3k4me1 peaks by merging closely spaced peaks (`date`).. "
    NCOL=$(head -n 1 $OUTDIR/h3k4me1/PEAKS.BED | perl -ane 'print scalar(@F);')
    closestBed -a <(sortBed -i $OUTDIR/h3k4me1/PEAKS.BED) -b <(sortBed -i $OUTDIR/h3k4me1/PEAKS.BED) -io -d -t first | perl -ane '$mean=($F[4]+$F['$(($NCOL+4))'])/2; print "$mean\t$F[scalar(@F)-1]\n";' | sort -k 2n,2 > $OUTDIR/secondary_files/h3k4me1/PEAKS.BED.DIST

    bed2shuffle -i $OUTDIR/h3k4me1/PEAKS.BED -g $GENOME > $OUTDIR/secondary_files/h3k4me1/SHUFFLE.BED

    closestBed -a <(sortBed -i $OUTDIR/secondary_files/h3k4me1/SHUFFLE.BED) -b <(sortBed -i $OUTDIR/secondary_files/h3k4me1/SHUFFLE.BED) -io -d -t first | perl -ane '$mean=($F[4]+$F['$(($NCOL+4))'])/2; print "$mean\t$F[scalar(@F)-1]\n";' | sort -k 2n,2 > $OUTDIR/secondary_files/h3k4me1/SHUFFLE.BED.DIST

    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    cut -f 2 $OUTDIR/secondary_files/h3k4me1/PEAKS.BED.DIST > $OUTDIR/secondary_files/h3k4me1/PEAKS.BED.DIST.$TMP
    cut -f 2 $OUTDIR/secondary_files/h3k4me1/SHUFFLE.BED.DIST > $OUTDIR/secondary_files/h3k4me1/SHUFFLE.BED.DIST.$TMP
    MERGEDISTANCE=$($FINDNFRPATH/share/R/findIntersectionPoint.R -i $OUTDIR/secondary_files/h3k4me1/PEAKS.BED.DIST.$TMP -j $OUTDIR/secondary_files/h3k4me1/SHUFFLE.BED.DIST.$TMP -m median)
    >&2 echo $MERGEDISTANCE
    rm $OUTDIR/secondary_files/h3k4me1/PEAKS.BED.DIST.$TMP
    rm $OUTDIR/secondary_files/h3k4me1/SHUFFLE.BED.DIST.$TMP
  
    if [ "$MERGEDISTANCE" -gt 1000 ]; then
        MERGEDISTANCE=1000
    fi

    multiIntersectBed -i <(sortBed -i $OUTDIR/secondary_files/ALLENHANCERS.BED | bed2window -i stdin -w 100) <(bedtools merge -i <(sortBed -i $OUTDIR/h3k4me1/PEAKS.BED) -d $MERGEDISTANCE) -names enhancers h3k4me1 | grep -v enhancers | cut -f 1-3 > $OUTDIR/secondary_files/h3k4me1/PEAKS.BED.MERGED 
    >&2 echo done

    >&2 echo -n "Define up- and downstream h3k4me1 peaks to each enhancer (`date`).. "
    paste <(sortBed -i $OUTDIR/secondary_files/ALLENHANCERS.BED) <(closestBed -a  <(sortBed -i $OUTDIR/secondary_files/ALLENHANCERS.BED) -b <(sortBed -i $OUTDIR/secondary_files/h3k4me1/PEAKS.BED.MERGED) -D ref -fu -t first | cut -f 7-10) <(closestBed -a  <(sortBed -i $OUTDIR/secondary_files/ALLENHANCERS.BED) -b <(sortBed -i $OUTDIR/secondary_files/h3k4me1/PEAKS.BED.MERGED) -D ref -fd -t first | cut -f 7-10) | perl -ane 'if($F[6]!~/^\.$/) { print $_; }' | perl -ane 'if(abs($F[9]) < '$PEAKDISTANCE' && $F[9] < 0) { $up=$F[1]-$F[7]; $up_coor=$F[7]; } else { $up=50; $up_coor=$F[1]-50; } if(abs($F[13]) < '$PEAKDISTANCE' && $F[13] > 0) { $down=$F[12]-$F[2]; $down_coor=$F[12]; } else { $down=50; $down_coor=$F[2]+50; } $defined="N"; if(abs($F[9]) < '$PEAKDISTANCE' || abs($F[13]) < '$PEAKDISTANCE') { $defined="Yme1"; }  @name=split(/\_/, $F[3]); if($up > $down) { print "$F[0]\t$F[1]\t$F[2]\t$F[0]:$up_coor-$down_coor"."_".$name[scalar(@name)-1]."\t$F[4]\t+\t$defined\t-$up\t$down\n"; } else { print "$F[0]\t$F[1]\t$F[2]\t$F[0]:$up_coor-$down_coor"."_".$name[scalar(@name)-1]."\t$F[4]\t-\t$defined\t-$down\t$up\n"; }' > $OUTDIR/secondary_files/h3k4me1/ENHANCERS_H3K4ME1.BED
    >&2 echo done
fi

if [ ! -z "$H3K4ME3FILE" ]; then
    >&2 echo -n "Predict peaks on H3K4me3 data (`date`).. "

    if [ ! -s "$OUTDIR/h3k4me3/PEAKS.BED" ]; then
        mkdir -p $OUTDIR/secondary_files/h3k4me3
        if [ -z "$CONTROLFILE" ]; then
            bam2peaks -i $H3K4ME3FILE -o $OUTDIR/h3k4me3 -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v 0 -d $DISTRIBUTION &>$OUTDIR/logs/bam2peaks_h3k4me3.log
        else
            bam2peaks -i $H3K4ME3FILE -o $OUTDIR/h3k4me3 -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v 0 -d $DISTRIBUTION -l $CONTROLFILE &>$OUTDIR/logs/bam2peaks_h3k4me3.log
        fi
    fi
    >&2 echo "done"

    if [ ! -s "$OUTDIR/h3k4me3/PEAKS.BED" ]; then
        >&2 echo
        >&2 echo "H3K4me3 peak file is not computed properly.. "
        >&2 echo "exiting.. "
        >&2 echo
        exit
    else
        >&2 echo -n "Determine optimal h3k4me3 peaks by merging closely spaced peaks (`date`).. "
        NCOL=$(head -n 1 $OUTDIR/h3k4me3/PEAKS.BED | perl -ane 'print scalar(@F);')
        closestBed -a <(sortBed -i $OUTDIR/h3k4me3/PEAKS.BED) -b <(sortBed -i $OUTDIR/h3k4me3/PEAKS.BED) -io -d -t first | perl -ane '$mean=($F[4]+$F['$(($NCOL+4))'])/2; print "$mean\t$F[scalar(@F)-1]\n";' | sort -k 2n,2 > $OUTDIR/secondary_files/h3k4me3/PEAKS.BED.DIST

        bed2shuffle -i $OUTDIR/h3k4me3/PEAKS.BED -g $GENOME > $OUTDIR/secondary_files/h3k4me3/SHUFFLE.BED

        closestBed -a <(sortBed -i $OUTDIR/secondary_files/h3k4me3/SHUFFLE.BED) -b <(sortBed -i $OUTDIR/secondary_files/h3k4me3/SHUFFLE.BED) -io -d -t first | perl -ane '$mean=($F[4]+$F['$(($NCOL+4))'])/2; print "$mean\t$F[scalar(@F)-1]\n";' | sort -k 2n,2 > $OUTDIR/secondary_files/h3k4me3/SHUFFLE.BED.DIST

        TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
        cut -f 2 $OUTDIR/secondary_files/h3k4me3/PEAKS.BED.DIST > $OUTDIR/secondary_files/h3k4me3/PEAKS.BED.DIST.$TMP
        cut -f 2 $OUTDIR/secondary_files/h3k4me3/SHUFFLE.BED.DIST > $OUTDIR/secondary_files/h3k4me3/SHUFFLE.BED.DIST.$TMP
        MERGEDISTANCE=$($FINDNFRPATH/share/R/findIntersectionPoint.R -i $OUTDIR/secondary_files/h3k4me3/PEAKS.BED.DIST.$TMP -j $OUTDIR/secondary_files/h3k4me3/SHUFFLE.BED.DIST.$TMP -m median)
        >&2 echo $MERGEDISTANCE
        rm $OUTDIR/secondary_files/h3k4me3/PEAKS.BED.DIST.$TMP
        rm $OUTDIR/secondary_files/h3k4me3/SHUFFLE.BED.DIST.$TMP
      
        if [ "$MERGEDISTANCE" -gt 1000 ]; then
            MERGEDISTANCE=1000
        fi

        multiIntersectBed -i <(sortBed -i $OUTDIR/secondary_files/ALLENHANCERS.BED | bed2window -i stdin -w 100) <(bedtools merge -i <(sortBed -i $OUTDIR/h3k4me3/PEAKS.BED) -d $MERGEDISTANCE) -names enhancers h3k4me3 | grep -v enhancers | cut -f 1-3 > $OUTDIR/secondary_files/h3k4me3/PEAKS.BED.MERGED 
        >&2 echo done

        >&2 echo -n "Define up- and downstream h3k4me3 peaks to each enhancer (`date`).. "
        paste <(sortBed -i $OUTDIR/secondary_files/ALLENHANCERS.BED) <(closestBed -a  <(sortBed -i $OUTDIR/secondary_files/ALLENHANCERS.BED) -b <(sortBed -i $OUTDIR/secondary_files/h3k4me3/PEAKS.BED.MERGED) -D ref -fu -t first | cut -f 7-10) <(closestBed -a  <(sortBed -i $OUTDIR/secondary_files/ALLENHANCERS.BED) -b <(sortBed -i $OUTDIR/secondary_files/h3k4me3/PEAKS.BED.MERGED) -D ref -fd -t first | cut -f 7-10) | perl -ane 'if($F[6]!~/^\.$/) { print $_; }' | perl -ane 'if(abs($F[9]) < '$PEAKDISTANCE' && $F[9] < 0) { $up=$F[1]-$F[7]; $up_coor=$F[7]; } else { $up=50; $up_coor=$F[1]-50; } if(abs($F[13]) < '$PEAKDISTANCE' && $F[13] > 0) { $down=$F[12]-$F[2]; $down_coor=$F[12]; } else { $down=50; $down_coor=$F[2]+50; } $defined="N"; if(abs($F[9]) < '$PEAKDISTANCE' || abs($F[13]) < '$PEAKDISTANCE') { $defined="Yme3"; }  @name=split(/\_/, $F[3]); if($up > $down) { print "$F[0]\t$F[1]\t$F[2]\t$F[0]:$up_coor-$down_coor"."_".$name[scalar(@name)-1]."\t$F[4]\t-\t$defined\t-$down\t$up\n"; } else { print "$F[0]\t$F[1]\t$F[2]\t$F[0]:$up_coor-$down_coor"."_".$name[scalar(@name)-1]."\t$F[4]\t+\t$defined\t-$up\t$down\n"; }' > $OUTDIR/secondary_files/h3k4me3/ENHANCERS_H3K4ME3.BED
        >&2 echo done
    fi
    >&2 echo done

    >&2 echo -n "Optimize enhancer boundary using h3k4me3 data (`date`).. "
    intersectBed -a $OUTDIR/secondary_files/h3k4me1/ENHANCERS_H3K4ME1.BED -b $OUTDIR/secondary_files/h3k4me3/ENHANCERS_H3K4ME3.BED -wao | perl -ane '
        if($F[6]=~/^Yme1$/ && $F[15]=~/^N$/) { $F[6]="Yme1"; }
        elsif($F[6]=~/^N$/ && $F[15]=~/^Yme3$/) {
            $F[3]=$F[12];
            $F[5]=$F[14];
            $F[6]="Yme1-Yme3";
            $F[7]=$F[16];
            $F[8]=$F[17];
        }
        elsif($F[6]=~/^Yme1$/ && $F[15]=~/^Yme3$/) {
            $F[5]=$F[14];
            $F[6]="Yme1-Yme3";
            $F[8]=$F[17];
            if($F[5]=~/\-/) { 
                $up_coor=$F[1]-$F[8];
                $down_coor=$F[2]+abs($F[7]);
            } else {
                $up_coor=$F[1]-abs($F[7]);
                $down_coor=$F[2]+$F[8];
            }
            @id=split(/[\:\-\_]+/,$F[3]);
            $F[3]="$id[0]:$up_coor-$down_coor"."_$id[3]";
        }
        print "$F[0]"; foreach(@F[1..8]) { print "\t$_"; } print "\n";' > $OUTDIR/ENHANCERS.BED 
    >&2 echo done

else
    scp $OUTDIR/secondary_files/h3k4me1/ENHANCERS_H3K4ME1.BED $OUTDIR/ENHANCERS.BED
fi

## refine classes using h3k27me3 data
if [ ! -z "$H3K27ME3FILE" ]; then
    >&2 echo -n "Predict peaks on H3K27me3 data (`date`).. "

    if [ ! -s "$OUTDIR/h3k27me3/PEAKS.BED" ]; then
        mkdir -p $OUTDIR/secondary_files/h3k27me3
        if [ -z "$CONTROLFILE" ]; then
            bam2peaks -i $H3K27ME3FILE -o $OUTDIR/h3k27me3 -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v 0 -d $DISTRIBUTION -b &>$OUTDIR/logs/bam2peaks_h3k27me3.log
        else
            bam2peaks -i $H3K27ME3FILE -o $OUTDIR/h3k27me3 -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v 0 -d $DISTRIBUTION -l $CONTROLFILE -b &>$OUTDIR/logs/bam2peaks_h3k27me3.log
        fi
    fi
    >&2 echo "done"

    >&2 echo -n "Refine enhancer classes using h3k27me3 peaks (`date`).. "
    if [ ! -s "$OUTDIR/h3k27me3/PEAKS.BED" ]; then
        >&2 echo
        >&2 echo "H3K27me3 peak file is not computed properly.. "
        >&2 echo "exiting.. "
        >&2 echo
        exit
    else
        TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
        intersectBed -a $OUTDIR/ENHANCERS.BED -b $OUTDIR/h3k27me3/PEAKS.BED -wao | perl -ane 'if($F[9]!~/^\.$/ && $F[6]=~/^N$/) { $F[6]="Y27me3"; } elsif($F[9]!~/^\.$/ && $F[6]=~/^Yme1$/) { $F[6]="Yme1-Y27me3"; } print "$F[0]"; foreach(@F[1..8]) { print "\t$_"; } print "\n";' > $OUTDIR/ENHANCERS.BED.$TMP
        mv $OUTDIR/ENHANCERS.BED.$TMP $OUTDIR/ENHANCERS.BED
    fi
    >&2 echo done
fi

## refine classes using gene TSS
if [ ! -z "$GENEFILE" -a ! -z "$H3K4ME3FILE" ]; then
    >&2 echo -n "Refine enhancer classes using gene promoter region (`date`).. "
    ## check if input gene file is in proper format
    NCOL=$(zless $GENEFILE | perl -ane 'print scalar(@F)."\n";' | sort -k 1r,1 | head -n 1)
    if [ "$NCOL" -lt 6 ]; then
        echo
        echo "input gene file is not in correct format"
        echo
        usage
    fi

    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    gene2promoter -i $GENEFILE -j $H3K4ME3FILE -o $OUTDIR/h3k4me3 -n $WINDOW | sort -k 4,4 > $OUTDIR/h3k4me3/GENES_PROMOTER.BED

    cat <(intersectBed -a <(zless $OUTDIR/ENHANCERS.BED | perl -ane '@id=split(/[\:\-\_]+/,$F[3]); print "$id[0]\t$id[1]\t$id[2]\t$F[0]:$F[1]-$F[2]_$id[3]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\t$F[8]\n";' | sortBed -i stdin) -b <(zless $OUTDIR/h3k4me3/GENES_PROMOTER.BED | perl -ane '@coor=split(/[\:\-]+/,$F[7]); print "$coor[0]\t$coor[1]\t$coor[2]\n";' | sortBed -i stdin) -v | perl -ane '@id=split(/[\:\-\_]+/,$F[3]); print "$id[0]\t$id[1]\t$id[2]\t$F[0]:$F[1]-$F[2]_$id[3]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\t$F[8]\n";') <(intersectBed -a <(zless $OUTDIR/ENHANCERS.BED | perl -ane '@id=split(/[\:\-\_]+/,$F[3]); if($F[6]=~/^Yme1-Yme3$/) { $F[6]="$F[6]_P"; } print "$id[0]\t$id[1]\t$id[2]\t$F[0]:$F[1]-$F[2]_$id[3]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\t$F[8]\n";' | sortBed -i stdin) -b <(zless $OUTDIR/h3k4me3/GENES_PROMOTER.BED | perl -ane '@coor=split(/[\:\-]+/,$F[7]); print "$coor[0]\t$coor[1]\t$coor[2]\n";' | sortBed -i stdin) -u | perl -ane '@id=split(/[\:\-\_]+/,$F[3]); print "$id[0]\t$id[1]\t$id[2]\t$F[0]:$F[1]-$F[2]_$id[3]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\t$F[8]\n";') | sortBed -i stdin > $OUTDIR/ENHANCERS.BED.$TMP
    mv $OUTDIR/ENHANCERS.BED.$TMP $OUTDIR/ENHANCERS.BED
    >&2 echo done
fi

## create UCSC file
echo "track name=\"Refined enhancer regions\" description=\"Refined enhancer regions\" itemRgb=\"On\"" > $OUTDIR/ENHANCERS.BED.UCSC
zless $OUTDIR/ENHANCERS.BED | perl -ane 'if($F[5]=~/\-/) { $fbStart=$F[1]-$F[8]; $fbEnd=$F[1]-1; $sbStart=$F[2]+1; $sbEnd=$F[2]+abs($F[7]); } else { $fbStart=$F[1]-abs($F[7]); $fbEnd=$F[1]-1; $sbStart=$F[2]+1; $sbEnd=$F[2]+$F[8]; } if($fbEnd < $fbStart) { $fbEnd=$fbStart; } if($sbEnd < $sbStart) { $sbEnd=$sbStart; } print "$F[0]\t$fbStart\t$fbEnd\t$F[3]_$F[6]\t$F[4]\t$F[5]\t$fbStart\t$fbEnd\t0,255,0\n"; print "$F[0]\t$F[1]\t$F[2]\t$F[3]_$F[6]\t$F[4]\t$F[5]\t$F[1]\t$F[2]\t255,0,0\n"; print "$F[0]\t$sbStart\t$sbEnd\t$F[3]_$F[6]\t$F[4]\t$F[5]\t$sbStart\t$sbEnd\t0,255,0\n";' >> $OUTDIR/ENHANCERS.BED.UCSC

>&2 echo "All done. Bye"
