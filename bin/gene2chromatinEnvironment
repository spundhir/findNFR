#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
gene2chromatinEnvironment: predict chromatin environment of genes
Copyright (C) 2017  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
OUTDIR="peaks";
GENOME="mm9"
PROCESSOR=1

MINCLUSTERHEIGHT=2
MINBLOCKHEIGHT=2
DISTANCE=70
SCALE="0.6"
BLOCKHEIGHT="abs"
PVALUE="0.05"
MERGEDISTANCE=0
DISTRIBUTION="nbinom"

WINDOW=1000

CHROMHMMPATH="/home/pundhir/software/ChromHMM"
STATES=15

#### usage ####
usage() {
	echo Program: "gene2chromatinEnvironment (predict chromatin environment of genes)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2chromatinEnvironment -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates of genes in BED format]"
    echo "             [format: chr start end name score strand]"
    echo " -j <file>   [configuration file containing list of BAM files used to compute chromatin environment]"
    echo "             [<chrEnv> <id> <bamfile> <bamfileControl (optional)> (eg. chrEnv h3k27me3 <PATH>/h3k27me3_esc_Rep1.bam]"
    echo "[OPTIONS]"
    echo " -o <dir>    [output directory to store results (default: analysis)"
    echo " -m <string> [genome (default: mm9)]"
    echo " -p <int>    [number of processors to use (default: 1)]"
    echo "[OPTIONS: bam2peaks]"
    echo " -c <int>    [minimum number of read in the block group (default: 2)]"
    echo " -e <int>    [minimum number of read in the block (default: 2)]"
    echo " -x <int>    [maximum distance between the blocks (default: 70)]"
    echo " -s <float>  [scale to define blocks (default: 0.6)]"
    echo " -g <int>    [block height (abs or rel) (default: abs)]"
    echo " -t <float>  [FDR at which to consider a peak as significant (default: 0.05)]"
    echo " -v <int>    [merge peaks separated by input distance (default: 0)]"
    echo " -d <int>    [distribution to use for data fit (pois or nbinom) (default: nbinom)]"
    echo "[OPTIONS: gene2promoter]"
    echo " -w <int>    [assign h3k4me3 peak to a gene as promoter region, if within this distance to TSS (default: 1000 bp)]"
    echo "[OPTIONS: gene2distalEnvironment]"
    echo " -r <dir>    [absolute path to ChromHMM jar file (default: /home/pundhir/software/ChromHMM)]"
    echo " -a <int>    [number of ChromHMM states (default: 15)"
    echo " -l <file>   [input genomic coordinates of enhancers in BED format]"
    echo "             [if provided, peaks overlapping enhancers will be used for analysis]"
	echo " -h          [help]"
    echo "[OUTPUT]"
    echo "             [chr start end gene score strand promoter_defined promoter dist_tss_up dist_tss_down signal_promoter (...) signal_distal (...)  weighted_signal_distal (...) chromatin_states (...)]"
    echo "             [per input BAM file: signal_promoter, signal_distal and weighted_signal]"
    echo "             [chromatin states (8): enhancer_active enhancer_poised enhancer_primed promoter_active promoter_bivalent repressed_heterochromatin repressed_polycomb transcribed]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:o:m:p:c:e:x:s:g:t:v:d:w:r:a:l:h ARG; do
	case "$ARG" in
		i) GENEFILE=$OPTARG;;
        j) CONFIGFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        m) GENOME=$OPTARG;;
        p) PROCESSOR=$OPTARG;;
        c) MINCLUSTERHEIGHT=$OPTARG;;
        e) MINBLOCKHEIGHT=$OPTARG;;
        x) DISTANCE=$OPTARG;;
        s) SCALE=$OPTARG;;
        g) BLOCKHEIGHT=$OPTARG;;
        t) PVALUE=$OPTARG;;
        v) MERGEDISTANCE=$OPTARG;;
        d) DISTRIBUTION=$OPTARG;;
        w) WINDOW=$OPTARG;;
        r) CHROMHMMPATH=$OPTARG;;
        a) STATES=$OPTARG;;
        l) ENHANCERFILE=$OPTARG;;
		h) HELP=1;;
	esac
done

echo
if [ "$HELP" ]; then
    usage
fi

echo
echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$GENEFILE" -o ! -f "$CONFIGFILE" ]; then
    echo
    echo "Error: one or more required paramter values not provided"
    echo
	usage
fi
echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

echo -n "Create directory structure (`date`).. "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi

if [ ! -d "$OUTDIR/peaks" ]; then
    mkdir -p $OUTDIR/peaks
fi

if [ ! -d "$OUTDIR/chromatin_environment" ]; then
    mkdir -p $OUTDIR/chromatin_environment
fi
echo "done"

echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
#GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    echo
    echo "computation for $GENOME is not available yet"
    echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    echo
    usage
fi
echo "done"

## create temporary BED file if input is from stdin
if [ "$GENEFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo "${LINE}"
    done | cut -f 1-6 | sort -k 4,4 > $OUTDIR/$TMP
    GENEFILE=$OUTDIR/$TMP
else
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    zless $GENEFILE | perl -ane 'if($F[0]=~/\_/ || $F[0]=~/chrM/) { next; } print $_;' | cut -f 1-6 | sort -k 4,4 > $OUTDIR/$TMP
    GENEFILE=$OUTDIR/$TMP
fi

## check if input gene file is in proper format
NCOL=$(zless $GENEFILE | perl -ane 'print scalar(@F)."\n";' | sort -k 1r,1 | head -n 1)
if [ "$NCOL" -lt 6 ]; then
    echo
    echo "input gene file is not in correct format"
    echo
    usage
fi

echo -n "Start predicting peaks on input BAM files (`date`).. "
BAMFILEs=""
REPLICATES=0
while read LINE; do
    TPM=$(echo $LINE | perl -ane 'if($F[0]!~/^chrEnv/i || $_=~/^$/) { print "1"; } else { print "0" }')
    [ "$TPM" -eq "1" ] && continue;

    ID=$(echo $LINE | perl -ane 'print "$F[1]"')
    BAMFILE=$(echo $LINE | perl -ane 'print "$F[2]"')
    CONTROLFILE=$(echo $LINE | perl -ane 'print "$F[3]"')
    BROAD=$(echo $ID | perl -ane 'if($_!~/^$/ && ($_=~/h3k27me3/i || $_=~/h3k36me3/i || $_=~/h3k9me3/i || $_=~/h3k4me1/i)) { print "1"; } elsif($_!~/^$/) { print "0" }')

    if [ ! -s "$OUTDIR/peaks/$ID/PEAKS.BED" ]; then
        if [ -z "$CONTROLFILE" ]; then
            if [ "$BROAD" -eq 1 ]; then
                bam2peaks -i ${BAMFILE} -o $OUTDIR/peaks/$ID -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v $MERGEDISTANCE -d $DISTRIBUTION -b
            else
                bam2peaks -i ${BAMFILE} -o $OUTDIR/peaks/$ID -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v $MERGEDISTANCE -d $DISTRIBUTION
            fi
        else
            if [ "$BROAD" -eq 1 ]; then
                bam2peaks -i ${BAMFILE} -o $OUTDIR/peaks/$ID -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v $MERGEDISTANCE -d $DISTRIBUTION -l $CONTROLFILE -b
            else
                bam2peaks -i ${BAMFILE} -o $OUTDIR/peaks/$ID -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v $MERGEDISTANCE -d $DISTRIBUTION -l $CONTROLFILE
            fi
        fi
    fi

    if [ ! -s "$OUTDIR/peaks/$ID/PEAKS.BED" ]; then
        echo
        echo "Peak file $OUTDIR/peaks/$ID/PEAKS.BED is not computed properly.. "
        echo "exiting.. "
        echo
        exit
    fi

    REPLICATES=$(echo $BAMFILE | perl -an -F'/\,/' -e 'print scalar(@F);')
    BAMFILEs="$BAMFILEs,$BAMFILE"
done < $CONFIGFILE
BAMFILEs=$(echo $BAMFILEs | perl -ane '$_=~s/^\,//; print $_;')
echo "done"

echo -n "Define gene promoter (`date`).. "
if grep -qw h3k4me3 $CONFIGFILE; then
    if [ ! -s "$OUTDIR/GENES_PROMOTER.BED" ]; then
        BAMFILE=$(grep -w h3k4me3 $CONFIGFILE | cut -f 3 -d " ")
        gene2promoter -i $GENEFILE -j $BAMFILE -o $OUTDIR/peaks/h3k4me3 -n $WINDOW | sort -k 4,4 > $OUTDIR/GENES_PROMOTER.BED
    fi
else
    zless $GENEFILE | bed2window -i stdin -w $WINDOW -x | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[5]\tNA\t$F[0]:$F[1]-$F[2]\t-50\t50\n";' | sort -k 4,4 > $OUTDIR/GENES_PROMOTER.BED
fi
echo "done"

## create configuration files
echo -n "Create configuration file to compute chromatin environment at promoters, distal and gene body (`date`).. "
while read LINE; do
    TPM=$(echo $LINE | perl -ane 'if($F[0]!~/^chrEnv/i || $_=~/^$/) { print "1"; } else { print "0" }')
    [ "$TPM" -eq "1" ] && continue;

    ID=$(echo $LINE | perl -ane 'print "$F[1]"')
    echo -e "$ID\t$OUTDIR/peaks/$ID/PEAKS.BED"
done < $CONFIGFILE > $OUTDIR/chromatin_environment/peaks.config

while read LINE; do
    TPM=$(echo $LINE | perl -ane 'if($F[0]!~/^chrEnv/i || $_=~/^$/ || $_!~/h3k/i) { print "1"; } else { print "0" }')
    [ "$TPM" -eq "1" ] && continue;

    ID=$(echo $LINE | perl -ane 'print "$F[1]"')
    FILE=$(echo $LINE | perl -ane '$F[2]=~s/^.*\///g; print $F[2];')
    BAMPATH=$(echo $LINE | perl -ane '$F[2]=~s/\/[^\/]+$//g; print $F[2];')
    echo -e "cell\t$ID\t$FILE"
done < $CONFIGFILE > $OUTDIR/chromatin_environment/bam.config
echo "done"

## gene2promoterEnvironment (bed2weightedSignal)
echo -n "Compute promoter environment (`date`).. "
if [ ! -f "$OUTDIR/chromatin_environment/PROMOTER_ENVIRONMENT.BED" ]; then
    cat $OUTDIR/GENES_PROMOTER.BED | perl -ane '@t=split(/[\:\-]/,$F[7]); print "$t[0]\t$t[1]\t$t[2]\t$F[3]\t$F[4]\t$F[5]\t$F[6]\t$F[0]:$F[1]-$F[1]\t$F[8]\t$F[9]\n";' | gene2promoterEnvironment -i stdin -j $OUTDIR/chromatin_environment/peaks.config -o $OUTDIR/chromatin_environment/promoter -g $GENOME -c 5 > $OUTDIR/chromatin_environment/PROMOTER_ENVIRONMENT.BED
fi
echo "done"

## gene2distalEnvironment (regions2classify, bed2weightedSignal)
echo -n "Compute distal environment (`date`).. "
if [ -z "$ENHANCERFILE" -a ! -f "$OUTDIR/chromatin_environment/DISTAL_ENVIRONMENT.BED" ]; then
    cat $OUTDIR/GENES_PROMOTER.BED | perl -ane '@t=split(/[\:\-]/,$F[7]); print "$t[0]\t$t[1]\t$t[2]\t$F[3]\t$F[4]\t$F[5]\t$F[6]\t$F[0]:$F[1]-$F[1]\t$F[8]\t$F[9]\n";' | gene2distalEnvironment -i $OUTDIR/chromatin_environment/peaks.config -j $OUTDIR/chromatin_environment/bam.config -k $BAMPATH -l stdin -o $OUTDIR/chromatin_environment/distal -g $GENOME -c 5 -t $CHROMHMMPATH -p $PROCESSOR -s $STATES > $OUTDIR/chromatin_environment/DISTAL_ENVIRONMENT.BED 
elif [ ! -f "$OUTDIR/chromatin_environment/DISTAL_ENVIRONMENT.BED" ]; then
    cat $OUTDIR/GENES_PROMOTER.BED | perl -ane '@t=split(/[\:\-]/,$F[7]); print "$t[0]\t$t[1]\t$t[2]\t$F[3]\t$F[4]\t$F[5]\t$F[6]\t$F[0]:$F[1]-$F[1]\t$F[8]\t$F[9]\n";' | gene2distalEnvironment -i $OUTDIR/chromatin_environment/peaks.config -j $OUTDIR/chromatin_environment/bam.config -k $BAMPATH -l stdin -o $OUTDIR/chromatin_environment/distal -g $GENOME -c 5 -e $ENHANCERFILE -t $CHROMHMMPATH -p $PROCESSOR -s $STATES > $OUTDIR/chromatin_environment/DISTAL_ENVIRONMENT.BED
fi
echo "done"

## gene2chromatinInteractions (to-do)

## gene2tfEnvironment (to-do)

echo -n "Compile all the results together in one file (`date`).. "
NCOL_PROMOTER=$(zless $OUTDIR/GENES_PROMOTER.BED | head -n 1 | perl -ane 'print scalar(@F);')
NCOL_PROMOTER_ENVIRONMENT=$(zless $OUTDIR/chromatin_environment/PROMOTER_ENVIRONMENT.BED | head -n 1 | perl -ane 'print scalar(@F);')
NCOL_DISTAL_ENVIRONMENT=$(zless $OUTDIR/chromatin_environment/DISTAL_ENVIRONMENT.BED | head -n 1 | perl -ane 'print scalar(@F);')

paste <(cut -f 1-$NCOL_PROMOTER $OUTDIR/GENES_PROMOTER.BED) <(cut -f $(($NCOL_PROMOTER+1))-$NCOL_PROMOTER_ENVIRONMENT $OUTDIR/chromatin_environment/PROMOTER_ENVIRONMENT.BED) <(cut -f $(($NCOL_PROMOTER+1))-$NCOL_DISTAL_ENVIRONMENT $OUTDIR/chromatin_environment/DISTAL_ENVIRONMENT.BED) > $OUTDIR/GENES_PROMOTER.BED.RC
echo "done"

## THIS DOES NOT WORK
<<"COMMENT"
echo -n "Define enhancers (`date`).. "
if grep -qw h3k4me1 $CONFIGFILE; then
    if [ ! -s "$OUTDIR/ENHANCERS.BED" ]; then
        grep -v start $OUTDIR/chromatin_environment/distal/DISTALPEAKS.BED | grep enhancer | bed2nfr -i stdin -j $OUTDIR/peaks/h3k4me1/PEAKS.BED -g $GENOME | perl -ane '$i++; print "$F[0]\t$F[1]\t$F[2]\t$F[3]_$i\t0\t.\t".$F[scalar(@F)-2]."\t".$F[scalar(@F)-1]."\n";' | sort -k 1,1 -k 2n,2 -k 3n,3 -k 4,4 | perl -ane '$key="$F[0]_$F[1]_$F[2]"; if(!$seen{$key}) { print $_; $seen{$key}=1; }' > $OUTDIR/ENHANCERS.BED
    fi
else
    grep -v start $OUTDIR/chromatin_environment/distal/DISTALPEAKS.BED | grep enhancer | perl -ane '$i++; print "$F[0]\t$F[1]\t$F[2]\t$F[3]_$i\t0\t.\tNA\tNA\n";' > $OUTDIR/ENHANCERS.BED
fi
echo "done"
COMMENT

## OLD
<<"COMMENT"
echo -n "Compute weighted epigenetic signal for input genes - promoter, distal and gene body (`date`).. "
WS_PROMOTER_FILE=""
WS_DISTAL_FILE=""
WS_GENEBODY_FILE=""
while read LINE; do
    TPM=$(echo $LINE | perl -ane 'if($F[0]!~/^chrEnv/i || $_=~/^$/) { print "1"; } else { print "0" }')
    [ "$TPM" -eq "1" ] && continue;

    ID=$(echo $LINE | perl -ane 'print "$F[0]"')

    if [ ! -d "$OUTDIR/peaks/$ID/WS" ]; then
        mkdir $OUTDIR/peaks/$ID/WS
    fi

    if [ ! -s "$OUTDIR/peaks/$ID/WS/WS_PROMOTER.BED" ]; then
        bed2weightedSignal -i $OUTDIR/GENES_PROMOTER.BED -j $OUTDIR/peaks/$ID/PEAKS.BED -g $GENOME -c 5 -v | sort -k 4,4 > $OUTDIR/peaks/$ID/WS/WS_PROMOTER.BED
    fi
    WS_PROMOTER_FILE="$WS_PROMOTER_FILE $OUTDIR/peaks/$ID/WS/WS_PROMOTER.BED"

    if [ ! -s "$OUTDIR/peaks/$ID/WS/WS_DISTAL.BED" ]; then
        TMP_SUB=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
        intersectBed -a $OUTDIR/peaks/$ID/PEAKS.BED -b $OUTDIR/GENES_PROMOTER.BED -v > $TMP_SUB
        
        ## OBSOLETE: gene with broader promoter (more active) get less weighed signal if we measure peak distance from TSS
        #bed2window -i $OUTDIR/GENES_PROMOTER.BED -w 1 | bed2weightedSignal -i stdin -j $TMP_SUB -g $GENOME -c 5 | sort -k 4,4 > $OUTDIR/peaks/$ID/WS/WS_DISTAL.BED

        ## NEW: now we are measuring peak distance from gene promoter boundaries defined by gene2promoter script
        bed2weightedSignal -i $OUTDIR/GENES_PROMOTER.BED -j $TMP_SUB -g $GENOME -c 5 | sort -k 4,4 > $OUTDIR/peaks/$ID/WS/WS_DISTAL.BED

        rm $TMP_SUB
    fi
    WS_DISTAL_FILE="$WS_DISTAL_FILE $OUTDIR/peaks/$ID/WS/WS_DISTAL.BED"

    if [ ! -s "$OUTDIR/peaks/$ID/WS/WS_GENEBODY.BED" ]; then
        TMP_SUB=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
        intersectBed -a $OUTDIR/peaks/$ID/PEAKS.BED -b $GENEFILE -u > $TMP_SUB
        bed2window -i $GENEFILE -w 1 | bed2weightedSignal -i stdin -j $TMP_SUB -g $GENOME -c 5 | sort -k 4,4 > $OUTDIR/peaks/$ID/WS/WS_GENEBODY.BED
        rm $TMP_SUB
    fi
    WS_GENEBODY_FILE="$WS_GENEBODY_FILE $OUTDIR/peaks/$ID/WS/WS_GENEBODY.BED"
done < $CONFIGFILE

WS_PROMOTER_FILE=$(echo $WS_PROMOTER_FILE | perl -ane '$_=~s/^\s+//g; print $_;')
WS_DISTAL_FILE=$(echo $WS_DISTAL_FILE | perl -ane '$_=~s/^\s+//g; print $_;')
WS_GENEBODY_FILE=$(echo $WS_GENEBODY_FILE | perl -ane '$_=~s/^\s+//g; print $_;')
echo "done"

echo -n "Compute regulatory complexity of input genes (`date`).. "
oIFS=$IFS
IFS=" "
WS_PROMOTER_FILES=($WS_PROMOTER_FILE)
WS_DISTAL_FILES=($WS_DISTAL_FILE)
WS_GENEBODY_FILES=($WS_GENEBODY_FILE)
WS_PROMOTER_FILES_COUNT=${#WS_PROMOTER_FILES[@]}
IFS=$oIFS

HEADER_PROMOTER="chr\tstart\tend\tgene\tscore\tstrand\tpromoter_defined\ttss\tdist_tss_up\tdist_tss_down"
HEADER_DISTAL="chr\tstart\tend\tgene\tscore\tstrand\tpromoter_defined\ttss\tdist_tss_up\tdist_tss_down"
HEADER_GENEBODY="chr\tstart\tend\tgene\tscore\tstrand"

WS_PROMOTER_COLUMNS="1-10"
WS_DISTAL_COLUMNS="1-10"
WS_GENEBODY_COLUMNS="1-6"
for(( i=1; i<=$WS_PROMOTER_FILES_COUNT; i++ )); do
    ID=$(echo ${WS_PROMOTER_FILES[$i-1]} | perl -ane '@t=split(/\//, $_); print $t[scalar(@t)-3];')
    HEADER_PROMOTER="$HEADER_PROMOTER\t$ID (promoter)"
    NCOL=$(head -n 1 ${WS_PROMOTER_FILES[$i-1]} | perl -ane 'print scalar(@F);')
    WS_PROMOTER_COLUMNS="$WS_PROMOTER_COLUMNS,$(perl -e '$col=('$NCOL'*'$i'); print "$col"')"

    HEADER_DISTAL="$HEADER_DISTAL\t$ID (distal)"
    NCOL=$(head -n 1 ${WS_DISTAL_FILES[$i-1]} | perl -ane 'print scalar(@F);')
    WS_DISTAL_COLUMNS="$WS_DISTAL_COLUMNS,$(perl -e '$col=('$NCOL'*'$i'); print "$col"')"

    HEADER_GENEBODY="$HEADER_GENEBODY\t$ID (genebody)"
    NCOL=$(head -n 1 ${WS_GENEBODY_FILES[$i-1]} | perl -ane 'print scalar(@F);')
    WS_GENEBODY_COLUMNS="$WS_GENEBODY_COLUMNS,$(perl -e '$col=('$NCOL'*'$i'); print "$col"')"
done

echo -e $HEADER_PROMOTER > $OUTDIR/RC_PROMOTER.BED
paste $WS_PROMOTER_FILE | cut -f $WS_PROMOTER_COLUMNS >> $OUTDIR/RC_PROMOTER.BED

echo -e $HEADER_DISTAL > $OUTDIR/RC_DISTAL.BED
paste $WS_DISTAL_FILE | cut -f $WS_DISTAL_COLUMNS >> $OUTDIR/RC_DISTAL.BED

echo -e $HEADER_GENEBODY > $OUTDIR/RC_GENEBODY.BED
paste $WS_GENEBODY_FILE | cut -f $WS_GENEBODY_COLUMNS >> $OUTDIR/RC_GENEBODY.BED

paste $OUTDIR/RC_PROMOTER.BED <(cut -f 11-$((WS_PROMOTER_FILES_COUNT+10)) $OUTDIR/RC_DISTAL.BED) <(cut -f 7-$((WS_PROMOTER_FILES_COUNT+6)) $OUTDIR/RC_GENEBODY.BED) > $OUTDIR/RC.BED
echo "done"
COMMENT

<<"COMMENT"
echo -n "Compute regulatory complexity of input genes using histone reads overlapping to gene promoters (`date`).. "
if [ ! -s "$OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED" -a "$REPLICATES" -gt 1 ]; then
    echo -e $HEADER > $OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED
    bed2expr -i $OUTDIR/GENES_PROMOTER.BED -j $BAMFILEs -d -v 1 -g $GENOME >> $OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED
elif [ ! -s "$OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED" ]; then
    echo -e $HEADER > $OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED
    bed2expr -i $OUTDIR/GENES_PROMOTER.BED -j $BAMFILEs -d -g $GENOME >> $OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED
fi

#nfrDynAna2Matrix -i $OUTDIR/GENES_PROMOTER.BED -j $CONFIGFILE -o $OUTDIR/nfrDynAna -r 1 -n 1 -g $GENOME -c

#TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
#cat <(cat $CONFIGFILE | perl -ane 'BEGIN { $line=""; } if($_=~/^chrEnv/i) { @count=split(/\,/,$F[1]); foreach(@count) { $line.="$F[0]\t"; } } END { $line=~s/\t$//g; print "chr\tstart\tend\tgene\tscore\tstrand\tpromoter_defined\t$line\n"; }') <(cat $OUTDIR/nfrDynAna/NFR_DYNAMICS_SIG.stat) > $OUTDIR/nfrDynAna/$TMP
#mv $OUTDIR/nfrDynAna/$TMP $OUTDIR/nfrDynAna/NFR_DYNAMICS_SIG.stat
echo "done"
COMMENT

## remove temporary file, if exists
if [ ! -z "$OUTDIR/$TMP" ]; then
    rm $OUTDIR/$TMP
fi

echo "All done.. bye"
